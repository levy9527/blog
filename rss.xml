<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="https://levy.vip/rss.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <atom:link href="https://levy.vip/rss.xml" rel="self" type="application/rss+xml"/>
    <title>levy</title>
    <link>https://levy.vip/</link>
    <description>levy&amp;apos;s blog</description>
    <language>zh-CN</language>
    <pubDate>Sat, 05 Aug 2023 06:34:00 GMT</pubDate>
    <lastBuildDate>Sat, 05 Aug 2023 06:34:00 GMT</lastBuildDate>
    <generator>vuepress-plugin-feed2</generator>
    <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
    <item>
      <title>VuePress2 娱乐视频</title>
      <link>https://levy.vip/daily/a-vuepress2-entertaining-video.html</link>
      <guid>https://levy.vip/daily/a-vuepress2-entertaining-video.html</guid>
      <source url="https://levy.vip/rss.xml">VuePress2 娱乐视频</source>
      <description>VuePress2 娱乐视频 参考《原神，启动》的梗，做的一个娱乐向视频。</description>
      <pubDate>Tue, 01 Aug 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> VuePress2 娱乐视频</h1>
<p>参考《原神，启动》的梗，做的一个娱乐向视频。</p>
]]></content:encoded>
    </item>
    <item>
      <title>来自Navicat的侵权警告</title>
      <link>https://levy.vip/daily/a-warning-from-navicat.html</link>
      <guid>https://levy.vip/daily/a-warning-from-navicat.html</guid>
      <source url="https://levy.vip/rss.xml">来自Navicat的侵权警告</source>
      <description>来自Navicat的侵权警告 公司收到了Navicat的侵权警告, 很有可能要吃官司。在此还是呼吁大家使用正版，拒绝使用盗版软件。 另外，开发者常用的软件的合法替代品，视频中也有推荐。</description>
      <pubDate>Mon, 31 Jul 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 来自Navicat的侵权警告</h1>
<p>公司收到了Navicat的侵权警告, 很有可能要吃官司。在此还是呼吁大家使用正版，拒绝使用盗版软件。</p>
<p>另外，开发者常用的软件的合法替代品，视频中也有推荐。</p>
]]></content:encoded>
    </item>
    <item>
      <title>关于 Arm 你需要了解的三件事</title>
      <link>https://levy.vip/daily/about-arm-things-you-need-to-know.html</link>
      <guid>https://levy.vip/daily/about-arm-things-you-need-to-know.html</guid>
      <source url="https://levy.vip/rss.xml">关于 Arm 你需要了解的三件事</source>
      <description>关于 Arm 你需要了解的三件事 Arm 是另一种CPU架构（CISC），与常见的 x86 有所不同（RISC）。 跟我们有什么关系呢？ MacOS 的 M1 芯片是基于 Arm 的 云厂商及生态都在积极与 Arm 进行合作 Docker 镜像的构建有注意事项</description>
      <pubDate>Wed, 02 Aug 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 关于 Arm 你需要了解的三件事</h1>
<p>Arm 是另一种CPU架构（CISC），与常见的 x86 有所不同（RISC）。</p>
<p>跟我们有什么关系呢？</p>
<ol>
<li>MacOS 的 M1 芯片是基于 Arm 的</li>
<li>云厂商及生态都在积极与 Arm 进行合作</li>
<li>Docker 镜像的构建有注意事项</li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>对Vue不得不吐槽的事</title>
      <link>https://levy.vip/daily/things-I-have-to-vent-about-vue.html</link>
      <guid>https://levy.vip/daily/things-I-have-to-vent-about-vue.html</guid>
      <source url="https://levy.vip/rss.xml">对Vue不得不吐槽的事</source>
      <description>对Vue不得不吐槽的事 为了完善博客，不得不升级至 Vuepress2。期间开发层面的各种问题我都忍了，但最终CI环节报错，我真的受不了了！ 总结一下，我对Vue生态不满的地方在于： Vue总是破坏性升级，新技术完全不管旧用户的体验 你要新技术可以，别逼我跟着用，我不想破坏 CI 的稳定性</description>
      <pubDate>Sun, 30 Jul 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 对Vue不得不吐槽的事</h1>
<p>为了完善博客，不得不升级至 Vuepress2。期间开发层面的各种问题我都忍了，但最终CI环节报错，我真的受不了了！</p>
<p>总结一下，我对Vue生态不满的地方在于：</p>
<ol>
<li>Vue总是破坏性升级，新技术完全不管旧用户的体验</li>
<li>你要新技术可以，别逼我跟着用，我不想破坏 CI 的稳定性</li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>sh与bash的区别</title>
      <link>https://levy.vip/daily/what-is-the-difference-between-sh-and-bash.html</link>
      <guid>https://levy.vip/daily/what-is-the-difference-between-sh-and-bash.html</guid>
      <source url="https://levy.vip/rss.xml">sh与bash的区别</source>
      <description>sh与bash的区别 结论：如果可移植性很重要，那么应该使用 sh！</description>
      <pubDate>Thu, 03 Aug 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> sh与bash的区别</h1>
<p>结论：如果可移植性很重要，那么应该使用 sh！</p>
<!-- more -->
<p>以下是 ChatGPT 的回答：<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/md-image-kit/1691066962763-bfbe3c1a-cb4f-43bc-b181-062eabee9529.png#averageHue=%23e4e5e7&amp;clientId=ue1ff8f12-10ba-4&amp;from=paste&amp;height=196&amp;id=u6521b3f3&amp;originHeight=392&amp;originWidth=1428&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=235208&amp;status=done&amp;style=none&amp;taskId=uef2009af-bd00-4e0e-a215-9cca4c37ed2&amp;title=&amp;width=714" alt="" loading="lazy"><br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/md-image-kit/1691067007160-ec9a619b-be1c-4947-9dfc-6578d7b95003.png#averageHue=%23e5e6e8&amp;clientId=ue1ff8f12-10ba-4&amp;from=paste&amp;height=116&amp;id=u443ed474&amp;originHeight=232&amp;originWidth=1354&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=75155&amp;status=done&amp;style=none&amp;taskId=u999f43f5-eb71-425d-8651-fbe5098a7c9&amp;title=&amp;width=677" alt="" loading="lazy"><br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/md-image-kit/1691067065982-c0370621-ff74-41e2-a435-b21973c64be4.png#averageHue=%23e3e4e6&amp;clientId=ue1ff8f12-10ba-4&amp;from=paste&amp;height=170&amp;id=u00ae3745&amp;originHeight=340&amp;originWidth=1382&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=116797&amp;status=done&amp;style=none&amp;taskId=u563107c4-dbc5-464b-bb87-ab1c1dea427&amp;title=&amp;width=691" alt="" loading="lazy"><br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/md-image-kit/1691067101217-a60e6bd8-600c-4c68-89d0-53675a11442c.png#averageHue=%23e5e5e8&amp;clientId=ue1ff8f12-10ba-4&amp;from=paste&amp;height=118&amp;id=u1559e5c7&amp;originHeight=236&amp;originWidth=1370&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=77383&amp;status=done&amp;style=none&amp;taskId=u846749a0-6dcb-429b-ad44-0d6e77dea00&amp;title=&amp;width=685" alt="" loading="lazy"></p>
<p>视频里有实战演示：</p>
]]></content:encoded>
      <enclosure url="https://raw.gitmirror.com/levy9527/image-holder/main/md-image-kit/1691066962763-bfbe3c1a-cb4f-43bc-b181-062eabee9529.png#averageHue=%23e4e5e7&amp;clientId=ue1ff8f12-10ba-4&amp;from=paste&amp;height=196&amp;id=u6521b3f3&amp;originHeight=392&amp;originWidth=1428&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=235208&amp;status=done&amp;style=none&amp;taskId=uef2009af-bd00-4e0e-a215-9cca4c37ed2&amp;title=&amp;width=714" type="image/"/>
    </item>
    <item>
      <title>现代大学英语精读(第2版)第一册</title>
      <link>https://levy.vip/english/contemporary-college-english-1.html</link>
      <guid>https://levy.vip/english/contemporary-college-english-1.html</guid>
      <source url="https://levy.vip/rss.xml">现代大学英语精读(第2版)第一册</source>
      <description>现代大学英语精读(第2版)第一册 介绍 全书链接：https://www.ximalaya.com/album/43891910 虽然这是英语专业的大学教材，但不用担心难度——只要英语不是太差，上过大学的都能看，甚至刚参加完高考的学生就能看。 虽然名字说是精读，但自己依然可以泛读、挑选着读。因此，本文记录的是经过个人挑选认为值得一读的文章，最主要的目的是，塑造全英文阅读的习惯。除此之外，也有开阔视野，增进对西方文化、经典文学作品的了解之意。</description>
      <pubDate>Sun, 29 May 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 现代大学英语精读(第2版)第一册</h1>
<h2> 介绍</h2>
<p>全书链接：<a href="https://www.ximalaya.com/album/43891910" target="_blank" rel="noopener noreferrer">https://www.ximalaya.com/album/43891910</a></p>
<p>虽然这是英语专业的大学教材，但不用担心难度——只要英语不是太差，上过大学的都能看，甚至刚参加完高考的学生就能看。</p>
<p>虽然名字说是精读，但自己依然可以泛读、挑选着读。因此，本文记录的是经过个人挑选认为值得一读的文章，最主要的目的是，塑造全英文阅读的习惯。除此之外，也有开阔视野，增进对西方文化、经典文学作品的了解之意。</p>
<h2> 值得一读的文章</h2>
<p>本册里面大部分是记叙文，阅读趣味性比较强。</p>
<p>欧亨利不愧是大师，第一册里收录了两篇他的小说。</p>
<ul>
<li><a href="https://www.ximalaya.com/sound/356764931" target="_blank" rel="noopener noreferrer">After Twenty Years</a><br>
经典短篇小说，应该大家都在学校看过中文版。<a href="https://www.ximalaya.com/sound/356764931" target="_blank" rel="noopener noreferrer">https://www.ximalaya.com/sound/356764931</a></li>
<li><a href="https://americanliterature.com/author/o-henry/short-story/hearts-and-hands" target="_blank" rel="noopener noreferrer">Hearts  And Hands</a><br>
我认为这篇小说是第一册中最有阅读难度的，可以作为阅读能力的检测，看能不能读懂。反正我第一次没读懂。本文使用了经典的结尾手法——最后一句话反转全文。<a href="https://americanliterature.com/author/o-henry/short-story/hearts-and-hands" target="_blank" rel="noopener noreferrer">https://americanliterature.com/author/o-henry/short-story/hearts-and-hands</a></li>
</ul>
<p>另外，戏剧 The Monsters Are Due in Maple Street 也值得一读</p>
<ul>
<li><a href="https://www.ximalaya.com/sound/357087229" target="_blank" rel="noopener noreferrer">https://www.ximalaya.com/sound/357087229</a></li>
</ul>
<p>总结一下，本册难度较低，就是来建立信心的。如果想只阅读精华，那只看我挑选出的三篇文章就够了。适应了全英文阅读后，就可以开始看第二册的内容了。</p>
]]></content:encoded>
    </item>
    <item>
      <title>现代大学英语精读(第2版)第二册</title>
      <link>https://levy.vip/english/contemporary-college-english-2.html</link>
      <guid>https://levy.vip/english/contemporary-college-english-2.html</guid>
      <source url="https://levy.vip/rss.xml">现代大学英语精读(第2版)第二册</source>
      <description>现代大学英语精读(第2版)第二册 介绍 全书链接：https://www.ximalaya.com/album/44290107 本册多了一些议论文，难度有所增加。同时记叙文也更加有内涵，立意高了不少。 另外就是，语言难度有所上升——比如一些骂人的话，单词能认识，变成句子就不懂了😂。 值得一读的文章 say-yes-by-tobias-wolff 第一次没读懂，看到最后，我还以为家里进小偷了 😂</description>
      <pubDate>Sat, 04 Jun 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 现代大学英语精读(第2版)第二册</h1>
<h2> 介绍</h2>
<p>全书链接：<a href="https://www.ximalaya.com/album/44290107" target="_blank" rel="noopener noreferrer">https://www.ximalaya.com/album/44290107</a></p>
<p>本册多了一些议论文，难度有所增加。同时记叙文也更加有内涵，立意高了不少。 另外就是，语言难度有所上升——比如一些骂人的话，单词能认识，变成句子就不懂了😂。</p>
<h2> 值得一读的文章</h2>
<p>say-yes-by-tobias-wolff 第一次没读懂，看到最后，我还以为家里进小偷了 😂</p>
<ul>
<li></li>
</ul>
<p>原文：<a href="https://www.missmccalister.com/uploads/3/0/9/3/30937509/lesson-7a-say-yes-by-tobias-wolff.pdf" target="_blank" rel="noopener noreferrer">https://www.missmccalister.com/uploads/3/0/9/3/30937509/lesson-7a-say-yes-by-tobias-wolff.pdf</a></p>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Say_Yes_(short_story)" target="_blank" rel="noopener noreferrer">wiki</a><br>
说明：<a href="https://en.wikipedia.org/wiki/Say_Yes_(short_story)" target="_blank" rel="noopener noreferrer">https://en.wikipedia.org/wiki/Say_Yes_(short_story)</a></li>
</ul>
<p>The Dog of Pompeii 讲述了一个盲人男孩与一只小狗的故事，令人泪目。结尾比较含蓄，思考片刻明白后，就破防了～</p>
<ul>
<li></li>
</ul>
<p>原文：<a href="https://www.acaedu.net/cms/lib3/TX01001550/Centricity/Domain/562/Week%206%20-%20The%20Dog%20of%20Pompeii.pdf" target="_blank" rel="noopener noreferrer">https://www.acaedu.net/cms/lib3/TX01001550/Centricity/Domain/562/Week%206%20-%20The%20Dog%20of%20Pompeii.pdf</a></p>
<p>button button 人心拷问：如果按下按钮，你能得到一笔钱，但世上会有一人因此而死去，你会按下按钮吗？</p>
<ul>
<li></li>
</ul>
<p>原文：<a href="https://christian_fuller.myteachersite.org/teacher/files/documents/button%20button.pdf" target="_blank" rel="noopener noreferrer">https://christian_fuller.myteachersite.org/teacher/files/documents/button%20button.pdf</a></p>
<p>A Doctor's Dilemma 医生的困境</p>
<ul>
<li>原文：<a href="http://www.kekenet.com/daxue/201706/508290.shtml" target="_blank" rel="noopener noreferrer">http://www.kekenet.com/daxue/201706/508290.shtml</a></li>
<li>拓展阅读，<a href="https://www.gutenberg.org/files/5070/5070-h/5070-h.htm" target="_blank" rel="noopener noreferrer">肖伯纳的 THE DOCTOR’S DILEMMA</a><br>
：<a href="https://www.gutenberg.org/files/5070/5070-h/5070-h.htm" target="_blank" rel="noopener noreferrer">https://www.gutenberg.org/files/5070/5070-h/5070-h.htm</a></li>
</ul>
<p>the-oyster-and-the-pearl</p>
<ul>
<li>原文：<a href="http://www.kekenet.com/daxue/201708/521462.shtml" target="_blank" rel="noopener noreferrer">http://www.kekenet.com/daxue/201708/521462.shtml</a></li>
<li></li>
</ul>
<p>解析：<a href="https://schoolworkhelper.net/william-saroyans-the-oyster-and-the-pearl-summary-analysis/" target="_blank" rel="noopener noreferrer">https://schoolworkhelper.net/william-saroyans-the-oyster-and-the-pearl-summary-analysis/</a></p>
<p>文册收录了两篇奥巴马的演讲，还是挺有意思的，能打动人心的部分当然有，同时也可以看出一些政治家演讲的特色：</p>
<ol>
<li>赞美对方。糖衣炮弹过去，对方就伸手不打笑脸人</li>
<li>用好词，美化自己，把功劳往自己身上揽</li>
<li>强调双方关系： 我们是很友好的哦、我们是合作伙伴哦</li>
<li>回顾历史，展望未来：我们已经走了很长的路，做出了很多的改变，取得了很大的进步，为了下一代、为了未来，我们要加油鸭！</li>
</ol>
<p>相关链接：</p>
<ul>
<li>竞选胜利演讲：<a href="http://www.kekenet.com/daxue/201707/518237.shtml" target="_blank" rel="noopener noreferrer">http://www.kekenet.com/daxue/201707/518237.shtml</a></li>
<li>在上海的演讲：<a href="http://www.kekenet.com/daxue/201708/518540.shtml" target="_blank" rel="noopener noreferrer">http://www.kekenet.com/daxue/201708/518540.shtml</a></li>
</ul>
<p>另外，我摘录了一些觉得不错的句子：</p>
<ul>
<li>When dealing with people, let us remember we are not dealing with creatures of logic.</li>
<li>We are dealing with creatures of emotion, creatures bristling with prejudices, and motivated by pride and vanity.</li>
<li>Any fool can criticize, condemn and complain—and most fools do. But it takes character and self-control to be<br>
understanding and forgiving.</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>现代大学英语精读(第2版)第三册</title>
      <link>https://levy.vip/english/contemporary-college-english-3.html</link>
      <guid>https://levy.vip/english/contemporary-college-english-3.html</guid>
      <source url="https://levy.vip/rss.xml">现代大学英语精读(第2版)第三册</source>
      <description>现代大学英语精读(第2版)第三册 介绍 全书链接：https://www.ximalaya.com/album/44439108 阅读本册，我在阅读上开始有了一定的厌倦感。这种厌倦感来自于，文章看得多了，不再首先关注是否完整读懂了文章，而是更关心文章是否有趣、是否吸引人——如果不能吸引我，我都不想去关心你在说什么。所以，有些说明议论文，我是跳着看的，因为某些段落让我觉得很无聊，内容不吸引我，行文呆板僵硬，充满了说教的味道。</description>
      <pubDate>Sat, 25 Jun 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 现代大学英语精读(第2版)第三册</h1>
<h2> 介绍</h2>
<p>全书链接：<a href="https://www.ximalaya.com/album/44439108" target="_blank" rel="noopener noreferrer">https://www.ximalaya.com/album/44439108</a></p>
<p>阅读本册，我在阅读上开始有了一定的厌倦感。这种厌倦感来自于，文章看得多了，不再首先关注是否完整读懂了文章，而是更关心文章是否有趣、是否吸引人——如果不能吸引我，我都不想去关心你在说什么。所以，有些说明议论文，我是跳着看的，因为某些段落让我觉得很无聊，内容不吸引我，行文呆板僵硬，充满了说教的味道。</p>
<p>这种转变，说明了两点：</p>
<ol>
<li>我开始应用我在中文阅读中培养出来的阅读喜爱，去评判英文文章了</li>
<li>我开始有意识地运用阅读技巧，恰当地泛读，不再是拿到一篇文章就逐字逐句地读</li>
</ol>
<h2> 值得一读的文章</h2>
<p>A-DILL-PICKLE 讲述的是曾经的恋人偶遇，欧亨利式结尾：</p>
<ul>
<li></li>
</ul>
<p>原文：<a href="https://www.katherinemansfieldsociety.org/archive/www.katherinemansfieldsociety.org/assets/KM-Stories/A-DILL-PICKLE1917.pdf" target="_blank" rel="noopener noreferrer">https://www.katherinemansfieldsociety.org/archive/www.katherinemansfieldsociety.org/assets/KM-Stories/A-DILL-PICKLE1917.pdf</a></p>
<ul>
<li>wiki<br>
解析：<a href="https://en.wikipedia.org/wiki/A_Dill_Pickle#Plot_summary" target="_blank" rel="noopener noreferrer">https://en.wikipedia.org/wiki/A_Dill_Pickle#Plot_summary</a></li>
</ul>
<p>The Invisible Japanese Gentlemen</p>
<ul>
<li></li>
</ul>
<p>原文：<a href="https://www.ff.umb.sk/app/cmsFile.php?disposition=a&amp;ID=4292" target="_blank" rel="noopener noreferrer">https://www.ff.umb.sk/app/cmsFile.php?disposition=a&amp;ID=4292</a></p>
<ul>
<li><a href="http://sittingbee.com/the-invisible-japanese-gentlemen-graham-greene/" target="_blank" rel="noopener noreferrer">分析：http://sittingbee.com/the-invisible-japanese-gentlemen-graham-greene/</a></li>
</ul>
<p>My Grandmother, the Bag Lady 被这篇文章打动，泪目了</p>
<ul>
<li>原文：<a href="http://www.kekenet.com/daxue/201704/504622.shtml" target="_blank" rel="noopener noreferrer">http://www.kekenet.com/daxue/201704/504622.shtml</a></li>
</ul>
<p>The End of the Civil War 本册收录了挺多美国南北战争相关的内容，这是其中角度新颖的一篇</p>
<ul>
<li>原文：<a href="http://www.kekenet.com/daxue/201705/509083.shtml" target="_blank" rel="noopener noreferrer">http://www.kekenet.com/daxue/201705/509083.shtml</a></li>
</ul>
<p>Why Historians Disagree 科普了一下历史学是如何看待历史，有助于我们更理性地学习历史</p>
<ul>
<li>原文：<a href="https://www.ximalaya.com/sound/361971944" target="_blank" rel="noopener noreferrer">https://www.ximalaya.com/sound/361971944</a></li>
</ul>
<p>the-most-dangerous-game 可以说是三册中最精彩的一篇小说之一，不容错过</p>
<ul>
<li></li>
</ul>
<p>原文+分析（左边是内容，右边是分析）：<a href="https://www.litcharts.com/lit/the-most-dangerous-game/summary-and-analysis" target="_blank" rel="noopener noreferrer">https://www.litcharts.com/lit/the-most-dangerous-game/summary-and-analysis</a></p>
<p>The Bench 用一个黑人小哥故意坐在标明只能由欧洲人坐的板凳上的故事，以小见大，描绘了 Civil War 之后美国种族歧视现状</p>
<ul>
<li>原文：<a href="http://www.kekenet.com/daxue/201708/521739.shtml" target="_blank" rel="noopener noreferrer">http://www.kekenet.com/daxue/201708/521739.shtml</a></li>
</ul>
<p>Twelve Angry Men 十二怒汉，是本册的精彩内容之一。激发了对法治话题的兴趣，看得我直接睡不着，接着去B站看电影版。</p>
<ul>
<li>原文：<a href="http://www.kekenet.com/daxue/201708/522771.shtml" target="_blank" rel="noopener noreferrer">http://www.kekenet.com/daxue/201708/522771.shtml</a></li>
<li></li>
</ul>
<p>电影：<a href="https://www.bilibili.com/bangumi/play/ep332629?theme=movie&amp;spm_id_from=333.337.0.0" target="_blank" rel="noopener noreferrer">https://www.bilibili.com/bangumi/play/ep332629?theme=movie</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>现代大学英语精读(第2版)第四册</title>
      <link>https://levy.vip/english/contemporary-college-english-4.html</link>
      <guid>https://levy.vip/english/contemporary-college-english-4.html</guid>
      <source url="https://levy.vip/rss.xml">现代大学英语精读(第2版)第四册</source>
      <description>现代大学英语精读(第2版)第四册 介绍 全书链接：https://www.ximalaya.com/album/44641280 本册立意又高了一个层次，开始讨论哲学、政治等上层建筑，并提供了新颖的视角。如果说，前几册是开阔视野，本册开始拓展思维了。 值得一读的文章 Groundless Beliefs 提醒我们，自认为正确的东西，很可能只是毫无根据的盲从</description>
      <pubDate>Mon, 11 Jul 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 现代大学英语精读(第2版)第四册</h1>
<h2> 介绍</h2>
<p>全书链接：<a href="https://www.ximalaya.com/album/44641280" target="_blank" rel="noopener noreferrer">https://www.ximalaya.com/album/44641280</a></p>
<p>本册立意又高了一个层次，开始讨论哲学、政治等上层建筑，并提供了新颖的视角。如果说，前几册是开阔视野，本册开始拓展思维了。</p>
<h2> 值得一读的文章</h2>
<p>Groundless Beliefs 提醒我们，自认为正确的东西，很可能只是毫无根据的盲从</p>
<ul>
<li>原文：<a href="http://www.kekenet.com/daxue/201808/561902.shtml" target="_blank" rel="noopener noreferrer">http://www.kekenet.com/daxue/201808/561902.shtml</a></li>
</ul>
<p>Economic Growth Is a Path to Perdition, Not Prosperity 提醒我们更加理性地看待“增长”</p>
<ul>
<li>原文：<a href="http://www.kekenet.com/daxue/201811/571277.shtml" target="_blank" rel="noopener noreferrer">http://www.kekenet.com/daxue/201811/571277.shtml</a></li>
</ul>
<p>The Damned Human Race 其实我觉得本文并非“值得一读”，但还列举出来原因有二：一是毕竟是马克·吐温之作，不可怠慢；二是我认为其论点新颖，不愧为讽刺大师，但论据越到后面越无说服力，可列为“反面教材”</p>
<ul>
<li>原文：<a href="http://www.kekenet.com/daxue/201812/573461.shtml" target="_blank" rel="noopener noreferrer">http://www.kekenet.com/daxue/201812/573461.shtml</a></li>
</ul>
<p>A String of Beads 挺有趣的文章，揭示了人们普遍的一种心理：事情的真相相比，人们更在意的是故事的戏剧性，或是否符合自己心中的设定</p>
<ul>
<li>原文：<a href="http://www.kekenet.com/daxue/201812/574998.shtml" target="_blank" rel="noopener noreferrer">http://www.kekenet.com/daxue/201812/574998.shtml</a></li>
</ul>
<p>The World House 马丁·路德·金 的文章</p>
<ul>
<li>原文：<a href="http://www.kekenet.com/daxue/201901/576160.shtml" target="_blank" rel="noopener noreferrer">http://www.kekenet.com/daxue/201901/576160.shtml</a></li>
</ul>
<p>Soldier's Heart 也叫PTSD，由战后士兵自述</p>
<ul>
<li>原文：<a href="http://www.kekenet.com/daxue/201902/578424.shtml" target="_blank" rel="noopener noreferrer">http://www.kekenet.com/daxue/201902/578424.shtml</a></li>
</ul>
<p>Secrets 这是一篇可以让人由好奇变为感动的文章。我原以为讲的是主人公的 “aunt” 与其旧情人的故事，直到最后，“forgive”一词的出现，令我恍然大悟，瞬间泪目。为避免剧透，我不细说了，强烈推荐。</p>
<ul>
<li>原文：<a href="http://www.kekenet.com/daxue/201903/580020.shtml" target="_blank" rel="noopener noreferrer">http://www.kekenet.com/daxue/201903/580020.shtml</a></li>
</ul>
<p>The Rivals<br>
两个男的在言语上较劲，只觉得好笑，可看到后面，我心情如此图<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/english/1688258250066.png" alt="1657000860176_9DFDD7F8-C809-4aa4-A996-05F4C984C76A.png" loading="lazy"><br>
强烈推荐，你一定也会“surprised”!</p>
<ul>
<li>原文：<a href="http://www.kekenet.com/daxue/201904/584021.shtml" target="_blank" rel="noopener noreferrer">http://www.kekenet.com/daxue/201904/584021.shtml</a></li>
</ul>
<p>Cord：一对母女的故事</p>
<ul>
<li>原文：<a href="https://www.ximalaya.com/sound/364021411" target="_blank" rel="noopener noreferrer">https://www.ximalaya.com/sound/364021411</a></li>
<li></li>
</ul>
<p>论文分析。有一定难度，因为它是综合了同一个作者的三篇文章进行分析，需要挑选着读：<a href="https://www.yuque.com/office/yuque/0/2022/pdf/160590/1657283857640-11aa59bb-edc1-475f-a97f-37124a27afd9.pdf?from=https%3A%2F%2Fwww.yuque.com%2Flevy%2Fblog%2Fxweufx%2Fedit" target="_blank" rel="noopener noreferrer">https://www.yuque.com/office/yuque/0/2022/pdf/160590/1657283857640-11aa59bb-edc1-475f-a97f-37124a27afd9.pdf</a></p>
<p>The Never-Ending Fight “机器人学之父”阿西莫夫的反迷信文章</p>
<ul>
<li>原文：<a href="https://www.ximalaya.com/sound/364032034" target="_blank" rel="noopener noreferrer">https://www.ximalaya.com/sound/364032034</a></li>
</ul>
<p>Man of the Moment 又到了令人享受的戏剧欣赏时间</p>
<ul>
<li>原文：<a href="https://www.ximalaya.com/sound/364032690" target="_blank" rel="noopener noreferrer">https://www.ximalaya.com/sound/364032690</a></li>
</ul>
<p>Is Everybody Happy 讨论了幸福的定义</p>
<ul>
<li>
<p>原文：<a href="https://www.ximalaya.com/sound/364033142" target="_blank" rel="noopener noreferrer">https://www.ximalaya.com/sound/364033142</a></p>
<p><a href="https://americanliterature.com/author/o-henry/short-story/hearts-and-hands" target="_blank" rel="noopener noreferrer"><br>
</a></p>
</li>
</ul>
]]></content:encoded>
      <enclosure url="https://raw.gitmirror.com/levy9527/image-holder/main/docs/english/1688258250066.png" type="image/png"/>
    </item>
    <item>
      <title>现代大学英语精读(第2版)第五册</title>
      <link>https://levy.vip/english/contemporary-college-english-5.html</link>
      <guid>https://levy.vip/english/contemporary-college-english-5.html</guid>
      <source url="https://levy.vip/rss.xml">现代大学英语精读(第2版)第五册</source>
      <description>现代大学英语精读(第2版)第五册 介绍 全书链接：https://www.ximalaya.com/album/49466046 本册开始，阅读难度再次上升，同时也更有思考的乐趣。另外，从本册开始，会在后面推荐一些著名的英文演讲，其中就有大家熟悉的乔布斯，激发读者的热情。 Who Are You and What Are You Doing Here</description>
      <pubDate>Sun, 28 Aug 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 现代大学英语精读(第2版)第五册</h1>
<h2> 介绍</h2>
<p>全书链接：<a href="https://www.ximalaya.com/album/49466046" target="_blank" rel="noopener noreferrer">https://www.ximalaya.com/album/49466046</a></p>
<p>本册开始，阅读难度再次上升，同时也更有思考的乐趣。另外，从本册开始，会在后面推荐一些著名的英文演讲，其中就有大家熟悉的乔布斯，激发读者的热情。</p>
<h2> Who Are You and What Are You Doing Here</h2>
<p>原文链接：<a href="https://m.kekenet.com/daxue/201909/593904.shtml" target="_blank" rel="noopener noreferrer">https://m.kekenet.com/daxue/201909/593904.shtml</a></p>
<p>本文分享了作者教育观，并阐述了上大学的意义，否定了上学是为了就业的观点。</p>
<p>摘录如下： Education has one salient enemy in present-day America, and that enemy is education——university education in<br>
particular. To almost every university education is a means to an end. For students, that end is a good job.</p>
<p>The best reason to read great writers is to see if they may know you better than you know yourself. You may find your<br>
own suppressed and rejected thoughts flowing back to you with an "alienated majesty." Reading the great writers, you may<br>
have the experience that Longinus associated with the sublime: You feel that you have actually created the text<br>
yourself. For somehow your predecessors are more yourself than you are.</p>
<p>Trying to figure out whether the stuff you're reading is true or false and being open to having your life changed is a<br>
fraught, controversial activity. Doing so requires energy from the professors. This kind of perspective-altering<br>
teaching and learning can cause the things which administrators fear above all else: trouble, arguments, bad press, etc.</p>
<h2> <strong>Two Kinds</strong></h2>
<p>原文链接：<a href="https://m.kekenet.com/daxue/201909/595380.shtml" target="_blank" rel="noopener noreferrer">https://m.kekenet.com/daxue/201909/595380.shtml</a></p>
<p>本文以女儿的视角讲述了母亲望女成凤而女儿叛逆的故事，文中母亲代表的中国式家庭教育观，我想不少人会感同身受。用现在的眼光看来，这只不过是一段充满了失败的沟通、无法双赢的家庭教育经历，借助非暴力沟通或双赢思维是能够避免的。</p>
<p>摘录如下： I didn't budge. And then I decided. I didn't have to do what my mother said anymore. I wasn't her slave. This<br>
wasn't China. I had listened to her before and look what happened. She was the stupid one.</p>
<p>You want me to be someone that I'm not!" I sobbed. "I will never be the kind of daughter you want me to be!"</p>
<p>"Only two kinds of daughters," she shouted in Chinese. "Those who are obedient and those who follow their own mind! Only<br>
one kind of daughter can live in this house. Obedient daughter!"</p>
<p>"Then I wish I wasn't your daughter, I wish you weren't my mother," I shouted.</p>
<h2> Love is a Fallacy</h2>
<p>原文链接：<a href="https://www.ximalaya.com/sound/414753193" target="_blank" rel="noopener noreferrer">https://www.ximalaya.com/sound/414753193</a></p>
<p>这多篇看下来，这篇是目前最有意思、最有趣、最令人忍俊不禁的。为避免剧透，我就少说一点。本文首尾响应，完美闭环，看完后我直呼我直呼，哈哈哈哈。就说到这了，总之墙裂推荐。</p>
<h2> Rewriting American History</h2>
<p>原文链接：<a href="https://www.ximalaya.com/sound/414754775" target="_blank" rel="noopener noreferrer">https://www.ximalaya.com/sound/414754775</a></p>
<p>本文讲述的是美国历史教材的一些变化及背后的思考。我认可其中的一个做法：不是对历史给一个所谓正统的结论，而是充分准备材料，从不同的角度陈述观点，引导人思考。</p>
<h2> Nobel Peace Price About Global Warming</h2>
<p>原文链接：<a href="https://www.ximalaya.com/sound/414756339" target="_blank" rel="noopener noreferrer">https://www.ximalaya.com/sound/414756339</a></p>
<h2> The Bluest Eyes</h2>
<p>原文链接：<a href="https://www.ximalaya.com/sound/414757228" target="_blank" rel="noopener noreferrer">https://www.ximalaya.com/sound/414757228</a></p>
<p>这是个记叙文，然而，我认为确是这么多篇文章中，最难懂的。</p>
<h2> How News Becomes Options and Opinions Off-Limits</h2>
<p>原文链接：<a href="https://www.ximalaya.com/sound/414759448" target="_blank" rel="noopener noreferrer">https://www.ximalaya.com/sound/414759448</a></p>
<p>本文说明了当代一种社会现代：人们在看新闻，不是在看“事实”，而是在看“观点”，作者认为，现在的新闻跟小说并非没有相似之处了。然而，作者对这种现象并非完全持否定态度，他认为这是言论自由的一种方式。最后，作者还表达了在自由社会对“尊重”一词的看法。</p>
<p>摘录如下： In any version of a free society, the value of free speech must rank the highest, for that is the freedom without<br>
which all other freedoms would fall.</p>
<p>In free societies, you must have the free play of ideas. There must be arguments, and it must be impassioned and<br>
untrammeled.</p>
<p>A free society is not a calm and eventless place——that is the kind of static, dead society dictators try to create. Free<br>
societies are dynamic, noisy, turbulent and full of radical disagreements.</p>
<h2> The Indispensable Opposition</h2>
<p>原文链接：<a href="https://m.kekenet.com/daxue/202001/603745.shtml" target="_blank" rel="noopener noreferrer">https://m.kekenet.com/daxue/202001/603745.shtml</a></p>
<p>本文所表达的观点，属于民主与自由思想的经典内容：不可缺少的反对派（或忠诚的反对派）。</p>
<p>摘录如下： I wholly disapprove of what you say, but will defend to the death your right to say it.</p>
<p>If we truly wish to understand why freedom is necessary in a civilized society, we must begin by realizing that, because<br>
freedom of discussion improves our own opinions, the liberties of other men are our own vital necessity.</p>
<p>We must insist that free oratory is only the beginning of free speech; it is not the end, but a means to an end. The end<br>
is to find the truth.</p>
<p>The only reason for dwelling on all this is that if we are to preserve democracy we must understand its principles. And<br>
the principle which distinguishes it from all other forms of government is that in a democracy the opposition not only<br>
is tolerated as constitutional but must be maintained because it is in fact indispensable.</p>
<p>The democratic system cannot be operated without effective opposition. For, in making the great experiment of governing<br>
people by consent rather than by coercion, it is not sufficient that the party in power should have a majority. It is<br>
just as necessary that the party in power should never outrage the minority. That means that it must listen to the<br>
minority and be moved by the criticisms of the minority. That means that its measures must take account of the<br>
minority's objections, and that in administering measures it must remember that the minority may become the majority.</p>
<h2> The Danger of a Single Story</h2>
<p>原文链接：<a href="https://www.ximalaya.com/sound/414765357" target="_blank" rel="noopener noreferrer">https://www.ximalaya.com/sound/414765357</a></p>
<p>认识到硬币有正反面，并坚持凡事至少从两个角度去看待与分析，那么本篇文章就没白读。</p>
<p>摘录如下： It is impossible to talk about the single story without talking about power. Power is the ability not just to tell<br>
the story of another person, but to make it the definitive story of that person.</p>
<p>All of these stories make me who l am. But to insist on only these negative stories is to flatten my experience and to<br>
overlook the many other stories that formed me.</p>
<p>The single story creates stereotypes,and the problem with stereotypes is not that theyare untrue, but that they are<br>
incomplete. They make one story become the only story.</p>
<p>The consequence of the single story is this:  It robs people of dignity. It makes our recognition of our equal humanity<br>
difficult. It emphasizes how we are different rather than how we are similar.</p>
<h2> Come Rain or Come Shine</h2>
<p>原文链接：<a href="https://www.ximalaya.com/sound/414767340" target="_blank" rel="noopener noreferrer">https://www.ximalaya.com/sound/414767340</a></p>
<p>看得不太懂，但故事倒挺有意思的。</p>
<p>解析：<a href="https://medium.com/the-afterglow/come-rain-or-come-shine-by-kazuo-ishiguro-finding-the-moment-b09e418652db" target="_blank" rel="noopener noreferrer">https://medium.com/the-afterglow/come-rain-or-come-shine-by-kazuo-ishiguro-finding-the-moment-b09e418652db</a></p>
<h2> Invisible Man</h2>
<p>原文链接：<a href="https://www.ximalaya.com/sound/414776047" target="_blank" rel="noopener noreferrer">https://www.ximalaya.com/sound/414776047</a></p>
<p>节选自同名小说（有改编），telling a story about a black teenager present his speech before white people.</p>
<h2> You've Got to Find What You Love</h2>
<p>原文链接：<a href="https://www.ximalaya.com/sound/414769322" target="_blank" rel="noopener noreferrer">https://www.ximalaya.com/sound/414769322</a></p>
<p>Steve Jobs 在 Standford 的演讲，没想到 Jobs 声音这么年轻！演讲分享三个故事，表达主旨“follow your heart”。</p>
<p>精彩摘录如下： You can't connect the dots looking forward: You can only connect them looking backwards. So you have to trust<br>
that the dots will somehow connect in your future. You have to trust in something-your destiny,life,whatever. Because<br>
believing that the dots will connect down the road will give you the confidence to follow your heart, even when it leads<br>
you off the well-worn path. And that would make all the difference.</p>
<p>Sometimes life is gonna hit you in the head with a brick. Don't lose faith. I'm convinced that the only thing that kept<br>
me going was that I loved what I did. You've got to find what you love. And that is as true for your work as it is for<br>
your lovers. Your work is going to fill a large part of your life, and the only way to be truly satisfied is to do what<br>
you believe is great work. And the only way to do great work is to love what you do. If you haven't found it yet, keep<br>
looking, and don't settle. As with all matters of the heart, you'll know when you find it. And like any great<br>
relationship, it just gets better and better as the years roll on. So keep looking. Don't settle.</p>
<p>I have looked in the mirror every morning and asked myself: "If today were the last day of my life,would I want to do<br>
what l am about to do today?" And whenever the answer has been "No" for too many days in a row, l know I need to change<br>
something. Remembering that I'll be dead soon is the most important tool I've ever encountered to help me make the big<br>
choices in life. Because almost everything-all external expectations, all pride, all fear of embarrassment or<br>
failure-these things just fall away in the face of death,leaving only what is truly important. Remembering that you are<br>
going to die is the best way I know to avoid the trap of thinking you have something to lose. You are already naked.<br>
There is no reason not to follow your heart.</p>
<h2> Where Do We Go from Here</h2>
<p>原文链接：<a href="https://www.ximalaya.com/sound/414771197" target="_blank" rel="noopener noreferrer">https://www.ximalaya.com/sound/414771197</a></p>
<p>本文是马丁·路德·金的另一篇呼吁黑人平等的演讲，从中可以看到与《I Have a Dream》的影子。</p>
<p>摘录如下： As long as the mind is enslaved, the body can never be free. Psychological freedom,a firm sense of self-esteem, is<br>
the most powerful weapon against the long night of physical slavery. No Lincolnian emancipation proclamation or<br>
Johnsonian civil rights bill can totally bring this kind of freedom. The Negro will only be free when he reaches down to<br>
the inner depths of his own being and signs with the pen and ink of assertive manhood his own emancipation proclamation.</p>
<p>And so I say to you today that I still stand by nonviolence. For through violence you may murder a murderer but you<br>
can't murder murder. Through violence you may murder a liar but you can't establish truth. Through violence you may<br>
murder a hater,but you can't murder hate. Darkness cannot put out darkness. Only light can do that.</p>
]]></content:encoded>
    </item>
    <item>
      <title>现代大学英语精读(第2版)第六册</title>
      <link>https://levy.vip/english/contemporary-college-english-6.html</link>
      <guid>https://levy.vip/english/contemporary-college-english-6.html</guid>
      <source url="https://levy.vip/rss.xml">现代大学英语精读(第2版)第六册</source>
      <description>现代大学英语精读(第2版)第六册 前言 全书链接：https://www.ximalaya.com/album/49468954 本册是整个系列的最后一册了，完结撒花🎉 Paper Tigers 原文链接：https://www.ximalaya.com/sound/414998175</description>
      <pubDate>Sun, 04 Sep 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 现代大学英语精读(第2版)第六册</h1>
<h2> 前言</h2>
<p>全书链接：<a href="https://www.ximalaya.com/album/49468954" target="_blank" rel="noopener noreferrer">https://www.ximalaya.com/album/49468954</a></p>
<p>本册是整个系列的最后一册了，完结撒花🎉</p>
<h2> Paper Tigers</h2>
<p>原文链接：<a href="https://www.ximalaya.com/sound/414998175" target="_blank" rel="noopener noreferrer">https://www.ximalaya.com/sound/414998175</a></p>
<p>探讨了 Asian American 的教育经历与社会成就不符的现象。</p>
<p>摘录如下： Let me summarize my feelings toward Asian values: Damn filial piety. Damn grade grubbing. Damn Ivy League mania.<br>
Damn deference to authority. Damn humility and hard work. Damn harmonious relations. Damn sacrificing for the future.<br>
Damn earnest, striving middle-class servility.</p>
<p>Maybe a traditionally Asian upbringing is the problem. In order to be a leader, you must have followers. Associates are<br>
initially judged on how well they do the work they are assigned. But being a leader requires different skill sets. “The<br>
traits that got you to where you are won't necessarily take you to the next level," says the diversity consultant Jane<br>
Hyun, who wrote a book called Breaking the Bamboo Ceiling.</p>
<p>At Yale, Chua made the connection between her upbringing and her adult dissatisfaction. “My parents didn't sit around<br>
talking about politics and philosophy at the dinner table," she told the students. Even after she had escaped from<br>
corporate law and made it onto a law faculty,“I was kind of lost. I just didn't feel the passion."</p>
<p>Chua's Chinese education had gotten her through an elite schooling, but it left her unprepared for the real world.</p>
<p>注：Chua<br>
也就是《虎妈战歌》的作者：<a href="https://baike.baidu.com/item/%E8%94%A1%E7%BE%8E%E5%84%BF/3424632#7" target="_blank" rel="noopener noreferrer">https://baike.baidu.com/item/%E8%94%A1%E7%BE%8E%E5%84%BF/3424632#7</a></p>
<h2> What Is News</h2>
<p>原文链接：<a href="https://www.ximalaya.com/sound/414999846" target="_blank" rel="noopener noreferrer">https://www.ximalaya.com/sound/414999846</a></p>
<p>提示我们如何看待新闻，与前面的如何看待历史可谓是姐妹篇。</p>
<p>摘录如下： The news is made rather than gather.</p>
<p>We see what we expect to see. We focus on what we are paid to see. And those who pay us to see usually expect us to<br>
accept their notions.</p>
<p>“What is news?" News,we might say, may be history in its first and best form, or the stuff of literature, or a record of<br>
the condition of a society, or the expression of things, but in its worst form it can also be mainly a “filler,” a<br>
“come-on" to keep the viewer's attention until the commercials come.</p>
<p>All of which leads us to reiterate, first, that there are no simple answers to the question “What is news?"<br>
And, second, that it is not our purpose to tell you what you ought to believe about the question. The purpose of this<br>
chapter is to arouse your interest in thinking about the question. Your answers are to be found by knowing what you feel<br>
is significant and how your sense of the significant conforms with or departs from that of others. Answers are to be<br>
found in your ideas about the purpose of public communication, and in your judgment of the kind of society you live in<br>
and wish to live in. We cannot provide answers to these questions. But you also need to know something about the<br>
problems, limitations, traditions, motivations, and, yes, even the delusions of the television news industry.</p>
<h2> At War with the Planet</h2>
<p>原文链接：<a href="https://www.ximalaya.com/sound/415001340" target="_blank" rel="noopener noreferrer">https://www.ximalaya.com/sound/415001340</a></p>
<p>本文为了我们科普了人类社会与自然环境的特征，提供了一个新颖而深刻的视角来看待人与自然的关系，启发我们在采取人与自然和谐相处的措施时，不要走极端。</p>
<h2> How to Get the Poor off Our Conscience</h2>
<p>原文链接：<a href="https://www.ximalaya.com/sound/415004615" target="_blank" rel="noopener noreferrer">https://www.ximalaya.com/sound/415004615</a></p>
<p>本文讨论了面对一直存在的贫富差距现象，社会思想、政府措施在历史上经历了怎样的变化。</p>
<h2> Housewifely Arts</h2>
<p>原文链接：<a href="https://www.ximalaya.com/sound/415006607" target="_blank" rel="noopener noreferrer">https://www.ximalaya.com/sound/415006607</a></p>
<p>本文主要表达的是对母亲的回忆，其实属于可看可不看类型，之所以还放上来，原因有二：</p>
<ol>
<li>冷幽默，毕竟有几处地方让我笑了</li>
<li>引以为戒，千万别学女主</li>
</ol>
<h2> The One Against The Many</h2>
<p>原文链接：<a href="https://www.ximalaya.com/sound/415007539" target="_blank" rel="noopener noreferrer">https://www.ximalaya.com/sound/415007539</a></p>
<p>本文主要是讲美国文明的，没有一个地方出现China，但几乎处处都能看到China的影子。绝对不容错过的好文，可以说是反洗脑的基础。</p>
<p>精彩摘录： It is important here to insist on the distinction between ideals and ideology. Ideals refer to the long-run goals<br>
of a nation and the spirit in which these goals are pursued. Ideology is something different, more systematic, more<br>
detailed, more comprehensive, more dogmatic.</p>
<p>An ideology, in other words, is an abstraction from reality. There is nothing wrong with abstractions or models. In<br>
fact, we could not conduct discourse without them. The ideological fallacy is to forget that ideology is an abstraction<br>
from reality and to regard it as reality itself. The besetting sin of the ideologist, in short, is to confuse his own<br>
tidy models with the vast, turbulent, unpredictable, and untidy reality which is the stuff of human experience.</p>
<p>Consider for a moment the ideologist's view of history. The ideologist contends that the mysteries of history can be<br>
understood in terms of a clear-cut, absolute, social creed which explains the past and forecasts the future. Ideology<br>
thus presupposes a closed universe whose history is determined, whose principles are fixed, whose values and objectives<br>
are deducible from a central body of social dogma and often whose central dogma is confided to the custody of an<br>
infallible priesthood.</p>
<p>The American tradition has found this view of human history repugnant and false, against the belief in the<br>
all-encompassing power of a single explanation, against the commitment to the absolutism of ideology, against the notion<br>
that all answers to political and social problems can be found in the back of some sacred book, against the<br>
deterministic interpretation of history.</p>
<p>Ideologists are afraid of the free flow of ideas, even of deviant ideas within their own ideology. They are convinced<br>
they have a monopoly on the Truth. Therefore they always feel that they are only saving the world when they slaughter<br>
the heretics. Their objective remains that of making the world over in the image of their dogmatic ideology. The goal is<br>
a monolithic world, organized on the principle of infallibility-but the only certainty in an absolute system is the<br>
certainty of absolute abuse.</p>
<p>The goal of free men is quite different. Free men know many truths, but they doubt whether any mortal man knows the<br>
Truth. Their religious and their intellectual heritage join in leading them to suspect fellow men who lay claim to<br>
infallibility. They believe that there is no greater delusion than for man to mistake himself for God. They accept the<br>
limitations of the human intellect and the infirmity of the human spirit.</p>
<h2> Notes on the English Character</h2>
<p>原文链接：<a href="https://www.ximalaya.com/sound/415017440" target="_blank" rel="noopener noreferrer">https://www.ximalaya.com/sound/415017440</a></p>
<p>本文对英格兰人的性格特征进行了简单的探讨。</p>
<h2> The Death of a Pig</h2>
<p>原文链接：<a href="https://www.ximalaya.com/sound/415019607" target="_blank" rel="noopener noreferrer">https://www.ximalaya.com/sound/415019607</a></p>
<p>本文主人公本计划养一只猪来吃，却养死了。为何把这篇文章收录进来呢，可能是因为里面细节写得好吧，把主人公的病急乱投医的场景写得较为生动。</p>
<h2> Don't Eat Fortune's Cookie</h2>
<p>原文链接：<a href="https://www.ximalaya.com/sound/415020743" target="_blank" rel="noopener noreferrer">https://www.ximalaya.com/sound/415020743</a></p>
<p>Princeton学长回校演讲，核心观点是：你以为你的成功全靠实力，然而其中隐含着运气。</p>
<h2> The Accidental Universe</h2>
<p>原文链接：<a href="https://www.ximalaya.com/sound/415022329" target="_blank" rel="noopener noreferrer">https://www.ximalaya.com/sound/415022329</a></p>
<p>本文是物理相关的说明文，讲了多重宇宙假设，提出一种观点：我们所在的宇宙是出于偶然。</p>
<h2> Rowling's Speech at Harvard</h2>
<p>原文链接：<a href="https://www.ximalaya.com/sound/415018537" target="_blank" rel="noopener noreferrer">https://www.ximalaya.com/sound/415018537</a></p>
<p>罗琳的英音很好听，而且本次演讲也很幽默，建议边看边听。</p>
]]></content:encoded>
    </item>
    <item>
      <title>人人都能学会的英语1：开篇</title>
      <link>https://levy.vip/english/everyone-can-learn-english-1-overview.html</link>
      <guid>https://levy.vip/english/everyone-can-learn-english-1-overview.html</guid>
      <source url="https://levy.vip/rss.xml">人人都能学会的英语1：开篇</source>
      <description>人人都能学会的英语1：开篇 为什么学 不可否认，英语始终在工作、生活中扮演着不可或缺的角色。可能有人并未意识到，我们的科学技术、政治经济、文化娱乐等领域都深受着英语世界的影响。掌握英语，运用英语，始终是非常必要的。 也许有人会反驳：我又不出国，我又不去外企上班，学英语有啥用？嗯，说得有道理，这属于实用主义。那么按此逻辑，但凡有以下需求，就不得不承认要学英语： 出国 去外企 有国际化需求 学习专业领域的前沿知识 我们尤其关注最后一点，它是与本职业相关的。以程序员为例，很多新的技术都起源于西方世界，往往文档资料都是先有英文版的，想要中文版至少要半年甚至更久，要想技术快人一步，职业发展更上一层楼，英语能力必不可少。</description>
      <pubDate>Thu, 23 Jun 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 人人都能学会的英语1：开篇</h1>
<h2> 为什么学</h2>
<p>不可否认，英语始终在工作、生活中扮演着不可或缺的角色。可能有人并未意识到，我们的科学技术、政治经济、文化娱乐等领域都深受着英语世界的影响。掌握英语，运用英语，始终是非常必要的。</p>
<p>也许有人会反驳：我又不出国，我又不去外企上班，学英语有啥用？嗯，说得有道理，这属于实用主义。那么按此逻辑，但凡有以下需求，就不得不承认要学英语：</p>
<ul>
<li>出国</li>
<li>去外企</li>
<li>有国际化需求</li>
<li>学习专业领域的前沿知识</li>
</ul>
<p>我们尤其关注最后一点，它是与本职业相关的。以程序员为例，很多新的技术都起源于西方世界，往往文档资料都是先有英文版的，想要中文版至少要半年甚至更久，要想技术快人一步，职业发展更上一层楼，英语能力必不可少。</p>
<p>此时也许有人会担心，自己已错过了最佳的学习时机，现在太迟了吧？非也。种一棵树最好的时机是10年前，其次是现在。如果把人生当成马拉松，那么现在开始，一定来得及，绝不会晚。记住，Better late than never!</p>
<h2> 怎么学</h2>
<p>关于怎么学的问题，我认为需要内外兼修。</p>
<h3> 建设心态</h3>
<p>在意识到、并承认掌握英语的必要性后，我们需要真正地相信：现在行动并不晚。</p>
<p>如果这点不能相信，那说什么都没用，因为人会找各种借口让自己放弃，如“现在没时间，还有更重要的事”、“性价比太低了”、“以后再说吧”、“用中文也行”。如果是这样，那事情注定是要失败的。</p>
<p>其次，要学会耐心。人们常常高估一个月所能做的事，却低估一年所能做的事。不要浮躁，学会接受每天进步一点点：</p>
<p>有了耐心，才能在整个过程中，抵制住营销号“神奇方法”的诱惑。记住，耐心是美德，这在别的领域也适用。</p>
<p>与此同时，在学习过程中，注意建立自己的信心。从怀疑自己是否能，到相信自己能，最后内化成不再需要强调这件事。</p>
<h3> 提升认知</h3>
<p>一定要搞明白：英语是技能，不只是知识。技能意味着，不仅要输入，还要输出，且需要反复地练习。</p>
<p>所以，在学习过程中，一定要让输入与输出闭环：如果想提高听力，就要辅以口语练习；如果想提高阅读能力，就要做相应的写作练习。</p>
<p>整个过程中，强调的是实践，是行动力，而不是记忆力。不要妄想把大量的知识装入脑子里——那是没用的，因为它不属于你。只有经过练习、能说出来或写出来的东西，才是你的，才会内化成自己的能力。</p>
<p>以上认知很重要，如果不能达成共识，那后面的方法对你是无效的。</p>
<h3> 明确意义</h3>
<p>需要问一下自己，英语对自己而言到底是什么？</p>
<p>是考试、考证上分的手段，还是升职加薪的工具，抑或是丰富自己、了解另一种文化、开阔视野的方式？</p>
<p>上面只是举例，并且例子之间并不冲突，是可以兼容的。</p>
<p>总之，对这个问题的回答，反映了个人动机，对行动力有很大的影响。</p>
<h3> 制定计划</h3>
<p>整个学习过程是超过一个月的，对于这种时长的事件，是需要制定计划的。</p>
<p>说直白了，就是要拆分目标，评估工作量，然后按计划执行，并能在实践中结合自身情况动态调整。这种能力，不仅是学英语，学任何东西都是适用的。</p>
<h3> 培养习惯</h3>
<p>注意培养自己的习惯，利用惯性帮助自己坚持，减少半途而废的可能。</p>
<p>建议固定时间、固定地点来学习，可以结合自己的日常作息规律，养成一个新的习惯。如每天早上起来，或晚上洗完澡后，固定抽时间来学习。</p>
<h3> 注重方法</h3>
<p>前面说了那么多，都是内功，放在前面，是因为我认为心态建设、认知及习惯比方法更重要。</p>
<p>至于学习方法，因学习内容而异。按照知识体系划可大致分为：</p>
<ul>
<li>基础知识：
<ul>
<li>音标</li>
<li>单词</li>
<li>语法</li>
</ul>
</li>
<li>综合能力
<ul>
<li>听说</li>
<li>读写</li>
</ul>
</li>
</ul>
<p>基础知识是一定要掌握的，而对于综合能力，基于实用主义，不同目的可有不同的侧重。简单来说就是：</p>
<ul>
<li>如果需要利用英文资料学习、工作，或想阅读英文原著，或只需与人进行文字交流，应侧重读写</li>
<li>如果需要与人进行即时言语沟通，或想看“生肉”，或想听英文有声读物，应侧重听说</li>
</ul>
<p>今天主要是作为开篇，做个介绍，具体的方法，会在后续的内容中逐步展开。</p>
]]></content:encoded>
    </item>
    <item>
      <title>人人都能学会的英语2：音标</title>
      <link>https://levy.vip/english/everyone-can-learn-english-2-pronunciation.html</link>
      <guid>https://levy.vip/english/everyone-can-learn-english-2-pronunciation.html</guid>
      <source url="https://levy.vip/rss.xml">人人都能学会的英语2：音标</source>
      <description>人人都能学会的英语2：音标 方法 音标与发音是最基础也是最重要的环节，侧重听说的同学，一定要掌握好；侧重读写的人，也不能懈怠，因为这跟后面的单词学习有关系。 我推荐根据赖世雄的《美语音标》进行学习： 在微信公众号 常春藤英语集团&amp;nbsp;买相关书籍 在 喜马拉雅 或 B站 听相关音频，进行跟读练习 下载 谷歌翻译 app（或别的app），设置成&amp;nbsp;英 =&amp;gt;&amp;nbsp;中&amp;nbsp;翻译，检查自己发音正确，翻译软件能正确识别就算合格 有人可能会问，赖世雄是谁，没听说过啊。这是可以理解的，因为在进行这样的学习之前，我也没听过，但他却是中国十大名师之一。他最励志的经历是，一个在高考英语中只能得7分（满分100分）的人，经过学习，成为英语教学硕士。这是典型的后天成才的前辈，跟着他学，经过本人亲自验证，绝对靠谱。</description>
      <pubDate>Sun, 26 Jun 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 人人都能学会的英语2：音标</h1>
<h2> 方法</h2>
<p>音标与发音是最基础也是最重要的环节，侧重听说的同学，一定要掌握好；侧重读写的人，也不能懈怠，因为这跟后面的单词学习有关系。</p>
<p>我推荐根据赖世雄的《美语音标》进行学习：</p>
<ul>
<li>在微信公众号 常春藤英语集团&nbsp;买相关书籍</li>
<li>在 喜马拉雅 或 B站 听相关音频，进行跟读练习</li>
<li>下载 谷歌翻译 app（或别的app），设置成&nbsp;英 =&gt;&nbsp;中&nbsp;翻译，检查自己发音正确，翻译软件能正确识别就算合格</li>
</ul>
<p>有人可能会问，赖世雄是谁，没听说过啊。这是可以理解的，因为在进行这样的学习之前，我也没听过，但他却是中国十大名师之一。他最励志的经历是，一个在高考英语中只能得7分（满分100分）的人，经过学习，成为英语教学硕士。这是典型的后天成才的前辈，跟着他学，经过本人亲自验证，绝对靠谱。</p>
<p>我给出了我之前的学习进度记录，仅供参考<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/english/1682426129817.png" alt="image.png" loading="lazy"></p>
<p>学完之后，如果有兴趣，可以了解下进阶内容。American pronunciation workshop：<a href="https://www.bilibili.com/video/BV1qE411v7oE?vd_source=046b87a1b6f0cc325266cccbb4f307fa" target="_blank" rel="noopener noreferrer">https://www.bilibili.com/video/BV1qE411v7oE</a><br>
（我特意找了没有字幕的视频，建议就这样看。如果是侧重读写的同学，直接跳过就好）</p>
<p>再给出关于音标的一些资料：</p>
<ul>
<li><a href="http://yinbiao.tingclass.net/show-16-9-1.html" target="_blank" rel="noopener noreferrer">音标发音大全 48个英语音标表（IPA,DJ音标,KK音标对照表）</a></li>
<li><a href="https://new.qq.com/omn/20190106/20190106G062W8.html" target="_blank" rel="noopener noreferrer">一文理解IPA音标、DJ音标、KK音标的区别</a></li>
</ul>
<h2> 讨论</h2>
<p>这里我补充几点，虽然不是核心，却与主题息息相关：</p>
<ol>
<li>是否要买实体书？</li>
<li>为什么是美语，而不是“英语”</li>
<li>关于口音（accent）</li>
</ol>
<h3> 建议买实体书</h3>
<p>现在网络这么发达，信息随处可得，所以很可能你不愿意买实体书。</p>
<p>这样也行，但我仍然建议买书，反正我买了全套，因为我认为从某种意义上讲，实体书有助于提升行动力。还记得前面我们讲到过，整个学习过程强调的是实践，行动力或执行力是很重要的。而购买的动作，本身就是执行力的一种表现。</p>
<p>而相对的，白嫖的行为背后，隐含着不愿意付出的意味，这种思维本身是不可取的。当然，这也许是我过度解读，你可以继续白嫖。</p>
<p>不想买实体书的另一个原因是，书多了不方便，比如搬家很麻烦。对这个问题，我是这样处理的，仅供参考：</p>
<ul>
<li>捐书</li>
<li>送人</li>
</ul>
<h3> 美语是主流</h3>
<p>也许有人认为英音更好听，某些时候，我也赞同这个观点。但我们还是实用主义，现在西方世界谁说话最大声，大家都清楚。毕竟“日不落”已然衰落，现在还是美刀更好使（还在说刀的事，手动滑稽）！所以，美语才是主流。</p>
<p>一定要学英音的，建议通关后重修发音，或现在就另找门派学习。</p>
<h3> 不要纠结口音</h3>
<p>在国内的网络平台上，很常见的场景是一群人对某个中国人的口音评头论足，说什么“这个不正宗、不地道啊”，“你这个也不像美音呀”、”工地散装英语哈哈哈“。</p>
<p>我都不知道这些人在纠结什么。谁说话没口音呢？你作为中国人，能跟新闻联播主持人一样说普通话吗？你不也带点地方特色？就算是美国人，不同的地区，也有不同的口音，你说谁才是正宗的呢？</p>
<p>语言最重要的功能是沟通，能让别人听懂是首要需求——如果你的口音并不影响别人听懂并理解你，那就不用纠结它。这也是前面为什么我建议下载翻译软件的原因，让机器来判断你发音是否正确，免去担心自己口音的困扰。</p>
<p>总结一下，今天分享了音标学习的方法与经验，后面将分享单词的学习。</p>
]]></content:encoded>
      <enclosure url="https://raw.gitmirror.com/levy9527/image-holder/main/docs/english/1682426129817.png" type="image/png"/>
    </item>
    <item>
      <title>人人都能学会的英语3：单词</title>
      <link>https://levy.vip/english/everyone-can-learn-english-3-words.html</link>
      <guid>https://levy.vip/english/everyone-can-learn-english-3-words.html</guid>
      <source url="https://levy.vip/rss.xml">人人都能学会的英语3：单词</source>
      <description>人人都能学会的英语3：单词 方法 单词是听说读写的基础，是有必要花时间去学习的。 然而，我不太喜欢使用“背单词”这样的描述，因为这会显得是在死记硬背、追求机械的记忆。对于单词的学习，我有以下建议： 请务必打好音标基础。一个单词如果你不会念、你听不出来，那就没有真正的掌握 结合上下文理解。一定要把单词放到句子里去学习，而不要只看英文单词选中文含义（或反之），因为英文单词与中文词汇并非一对一的关系，并且这样只是记忆，没有获得理解。 只推荐利用词根记忆（当然并非百分百有效） 学习软件：欧路词典——免费，全平台通用</description>
      <pubDate>Mon, 27 Jun 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 人人都能学会的英语3：单词</h1>
<h2> 方法</h2>
<p>单词是听说读写的基础，是有必要花时间去学习的。</p>
<p>然而，我不太喜欢使用“背单词”这样的描述，因为这会显得是在死记硬背、追求机械的记忆。对于单词的学习，我有以下建议：</p>
<ol>
<li>请务必打好音标基础。一个单词如果你不会念、你听不出来，那就没有真正的掌握</li>
<li>结合上下文理解。一定要把单词放到句子里去学习，而不要只看英文单词选中文含义（或反之），因为英文单词与中文词汇并非一对一的关系，并且这样只是记忆，没有获得理解。</li>
<li>只推荐利用词根记忆（当然并非百分百有效）</li>
<li>学习软件：欧路词典——免费，全平台通用</li>
</ol>
<p>以手机欧路词典为例，打开后，点击“学习”，选择适合自己的单词本（或先做测试让软件来推荐），进行学习即可。<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/english/1682426210376.png" alt="image.png" loading="lazy"><br>
注意结合个人情况，进行学习设置，例如学习新词数量及、复习数量。<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/english/1682426214482.png" alt="image.png" loading="lazy"><br>
就我个人而言，我的做法是把全部单词刷一遍，过滤掉我完全掌握的，然后再进行新词的复习。</p>
<h2> 提醒</h2>
<p>必须要给大家一个提醒，避免进入单词学习的陷阱：那就是忍受不了单词学习进度缓慢、记了又忘的情况，于是追求“超级记忆术”，把单词一股脑装在脑子里。</p>
<p>回顾前面所说，学习英语强调的是实践，而不是记忆。所以，不论记忆方法有多高明，它只能解决输入，不能解决输出的问题。因此，我们的重点应该放在输入与输出闭环上，而不是追求单方面“多快好省”。</p>
<p>网络平台上很多鼓吹类似于“一天背六千个单词”的营销内容，就是抓住了人们没有正确理解的情况下贪多求快的心理，一定要警惕。</p>
<p>再者，单词与阅读理解，并非简单的线性对应关系，即不是单词量学得越多，阅读理解越深。另一方面来说，也不是只有单词量“爆表”，才能进行全英文阅读。</p>
<p>以我自身为例，我可以阅读原著，但我的词汇量不过四千左右。</p>
<p>我之前在某个词汇量评测网站做过评估：<a href="http://testyourvocab.com/result?user=13229458" target="_blank" rel="noopener noreferrer">http://testyourvocab.com/result?user=13229458</a><br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/english/1682426218162.png" alt="image.png" loading="lazy"></p>
<p>4360 是网站为我估算的单词数量。</p>
<p>为求精确，我还找了一本考研（包含了高考、四级、六级、考研词汇）的单词本，把上面的所有单词刷了一遍，结果如下：<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/english/1682426221966.png" alt="image.png" loading="lazy"><br>
上图的含义为：</p>
<ul>
<li>0 个未学习，意思是单词本的所有单词我都遇到了一遍了，并且我都进行了掌握程度判断</li>
<li>已掌握 3844，意是这些单词我一看就能知道是什么意思，并且能做翻译</li>
<li>学习中 4122，具体又可细分为：
<ul>
<li>认识：一词多义，仅知道部分的中文含义，当其在另一个句子中体现另一种意思时，自己不知道</li>
<li>模糊：原先不知道中文含义，但根据例句能隐约推断出其含义</li>
<li>不认识：给了例句也看不懂</li>
</ul>
</li>
</ul>
<p>从上面我对学习中的单词的分类就可以看出，单词这件事，不是非黑即白的。而把单词掌握数量直接与英语能力挂钩，也是不可取的。</p>
<p>我在学生时代，其实没有买过一本单词本，也没有刻意地去背过单词（例如每天固定背50个），所以上述词汇量，还是挺客观的。就以词汇量而言，可能很多人都比我强——既然单词对我来说不是困扰，那对大家来说，应该也不是。我想这点信心，大家是可以有的。</p>
<p>总之，我想说的是，单词重要，却也不用刻意强调“背”这件事。把单词与英语能力直接挂钩，追求神奇的背单词的方法，这是很多人学英语的误区。而在这种误区下，就催生了速成的方法论，迎合了浮躁社会下急功近利的心态。但其实，强调实践，讲究输入输出闭环，才是更符合客观规律的学习方式。</p>
<p>记住：重要的不是你记住了多少单词，而是你能运用多少单词来造句。</p>
<p>延伸阅读：<a href="/english/learning-7000-words-task-completed.html" target="blank">刷7000个单词的经验总结</a>。</p>
]]></content:encoded>
      <enclosure url="https://raw.gitmirror.com/levy9527/image-holder/main/docs/english/1682426210376.png" type="image/png"/>
    </item>
    <item>
      <title>人人都能学会的英语4：听说</title>
      <link>https://levy.vip/english/everyone-can-learn-english-4-listening-and-speaking.html</link>
      <guid>https://levy.vip/english/everyone-can-learn-english-4-listening-and-speaking.html</guid>
      <source url="https://levy.vip/rss.xml">人人都能学会的英语4：听说</source>
      <description>人人都能学会的英语4：听说 前言 听说篇相对独立，与读写篇没有依赖关系，但需要确保前面的基础已打好。 方法 听说属于综合能力，建议遵循以下学习步骤： 激发兴趣，建立信心 明确方向 脚踏实地，坚持输入并输出 1.建立信心 首先找到有趣的音视频材料，利用生动的内容增加学习的动力。同时应注意材料的难度不应过高，有助于自己建立信心——已经很有自信的同学可跳过此步骤。我推荐以下材料： Journey to the West： https://b23.tv/61xkAgc English at Work：https://www.bbc.co.uk/learningenglish/english/features/english-at-work</description>
      <pubDate>Tue, 28 Jun 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 人人都能学会的英语4：听说</h1>
<h2> 前言</h2>
<p>听说篇相对独立，与读写篇没有依赖关系，但需要确保前面的基础已打好。</p>
<h2> 方法</h2>
<p>听说属于综合能力，建议遵循以下学习步骤：</p>
<ol>
<li>激发兴趣，建立信心</li>
<li>明确方向</li>
<li>脚踏实地，坚持输入并输出</li>
</ol>
<h3> 1.建立信心</h3>
<p>首先找到有趣的音视频材料，利用生动的内容增加学习的动力。同时应注意材料的难度不应过高，有助于自己建立信心——已经很有自信的同学可跳过此步骤。我推荐以下材料：</p>
<ul>
<li>Journey to the West： <a href="https://b23.tv/61xkAgc" target="_blank" rel="noopener noreferrer">https://b23.tv/61xkAgc</a></li>
<li>English at Work：<a href="https://www.bbc.co.uk/learningenglish/english/features/english-at-work" target="_blank" rel="noopener noreferrer">https://www.bbc.co.uk/learningenglish/english/features/english-at-work</a></li>
</ul>
<p>前者是西游记英文动画版，后者是BBC的职场英语动画片，任选其一即可（如果是实用主义，当然选第二个啦）。<br>
两个材料都是只有英文字幕的，要逐渐习惯这种模式。这就是为什么说学习时要注重心理建设，因为需要走出舒适区。</p>
<p>记住，上面给的材料，主要是帮助自己建立自信的， 学到什么不重要，重要的是你觉得自己行了，可以进行下一步了。</p>
<h3> 2.明确方向</h3>
<p>在进行深入学习前，我们需要明确自己的学习方向，究竟是 Daily English 还是 Business English?</p>
<p>当然可以全部都学，但那是结果，在过程中总要分个前后。对这个问题的回答，取决于读者自己。</p>
<p>Daily English 我推荐：<a href="https://www.youtube.com/c/EnglishSpeakingCourses/search?query=conversation" target="_blank" rel="noopener noreferrer">https://www.youtube.com/c/EnglishSpeakingCourses/search?query=conversation</a><br>
这个视频如果看不了，可以看我写的教程：<a href="https://www.yuque.com/levy/blog/how-to-surf" target="_blank" rel="noopener noreferrer">https://www.yuque.com/levy/blog/how-to-surf</a></p>
<p>Business English，我推荐 eslpod 的教材：</p>
<ol>
<li><a href="https://secure3.eslpod.com/product/using-english-at-work/" target="_blank" rel="noopener noreferrer">Using English at Work</a></li>
<li><a href="https://secure3.eslpod.com/product/english-for-business-meetings/" target="_blank" rel="noopener noreferrer">English for Business Meetings</a></li>
<li><a href="https://secure3.eslpod.com/product/interview-questions-answered/" target="_blank" rel="noopener noreferrer">Interview Questions Answered</a></li>
</ol>
<p>这里特别说下，eslpod 的创始人是英语方面的语言学及教育学的博士，可以说没有人比他更懂英语教学（手动滑稽）！跟着他学，我成功地喜欢上了美语，从此以后听加州口音会觉得最舒服。</p>
<p>以上三本教材我自己买了，有需要的可以私信我发你。</p>
<p>另外，赖世雄的《高级美语》也极力推荐，它是属于综合性的教材，内容方面起到开阔视野的作用。而我推荐它的原因是，本书北美外教的发音尤为悦耳，朗读课文时简直“说得比唱得还好听”，练习听说的同学一定不要错过。</p>
<h3> 3.坚持输入并输出</h3>
<p>有了材料还远远不够，只是在听、光在那里看，结果还是哑巴英语。因此，对于无论什么材料，我建议这样使用：</p>
<ol>
<li>不看课本（字幕），全部语音听完</li>
<li>看课本（字幕），做笔记，学习单词与短语</li>
<li>慢速跟读
<ol>
<li>看课本（字幕），播一句，暂停，跟读一句</li>
<li>不看课本（字幕），播一句，暂停，跟读一句</li>
<li>看课本（字幕），不暂停，课程跟读</li>
</ol>
</li>
<li>独自念出来，并使用手机软件（如微信）录音，听一听自己说的效果，并进行语音翻译，以检测自己的输出正确率</li>
<li>脱稿表达（此步骤可选）</li>
</ol>
<p>在这里分享一个我遇到的“困境”。在进行不看课本的慢速跟读的练习时，播一句跟读一句的形式，让我很容易犯困。但我没有因此就放弃，也没想办法强行提神，而是转而把它当作催眠工具——困了就睡觉。这样过了两周，有一天晚上，我没有犯困，做完了训练。而那一天也是我走出“困境”的日子，后面的日子里，再也没犯困过！</p>
<p>其实我不止有一次类似的“犯困”经历，都是与学习新东西有关的。我想，这可能是大脑在生理上对学习的抗拒。对于新领域的知识或不同寻常的学习方式，是需要走出舒适区的，而这种“犯困”可能是大脑潜意识在拒绝走出舒适区。对此，应对方法很简单，那就是坚持下去，每天固定时间执行相应的学习动作，直到大脑潜意识“屈服”，转而适应新的东西。</p>
<p>以上就是今天要分享的关于听说练习的内容，下一期将分享英语读写的学习经验。</p>
]]></content:encoded>
    </item>
    <item>
      <title>人人都能学会的英语5：读写</title>
      <link>https://levy.vip/english/everyone-can-learn-english-5-reading-and-writing.html</link>
      <guid>https://levy.vip/english/everyone-can-learn-english-5-reading-and-writing.html</guid>
      <source url="https://levy.vip/rss.xml">人人都能学会的英语5：读写</source>
      <description>人人都能学会的英语5：读写 前言 读写篇相对独立，与听说篇没有依赖关系，但需要确保前面的基础已打好。 阅读能力升级之旅 我先给出自己经历过的全英阅读能力的变化过程，仅供参考： 看到英文网站，第一反应是点击切换中文版 一些技术资料、技术文章，往往是英文，没有翻译，只能硬着头皮借助浏览器的翻译或词典进行全英阅读 适应了阅读英文技术文档、英文技术博客，但看非技术领域的内容，如在 wikipedia 上查某个人物、某部电影，第一反应是切换中文版（此时对英文的阅读只停留在自己的专业领域） 尝试阅读全英书籍。其实看得明白，但总觉得太慢了、是不是在浪费时间、好想看中文版，需要耐着性子阅读 阅读量到达一定后，开始对内容挑剔，如认为议论文没有生动的例子不吸引人，或内容充满说教不想看，于是开始学会挑重点，跳过不重要或没兴趣的内容，不再逐字逐句阅读 阅读英文在感观上跟阅读中文没有重大的区别，也即看到英文内容，不会再想“这是英文，不是中文哦”——翻阅内容，看就完事了</description>
      <pubDate>Wed, 29 Jun 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 人人都能学会的英语5：读写</h1>
<h2> 前言</h2>
<p>读写篇相对独立，与听说篇没有依赖关系，但需要确保前面的基础已打好。</p>
<h2> 阅读能力升级之旅</h2>
<p>我先给出自己经历过的全英阅读能力的变化过程，仅供参考：</p>
<ol>
<li>看到英文网站，第一反应是点击切换中文版</li>
<li>一些技术资料、技术文章，往往是英文，没有翻译，只能硬着头皮借助浏览器的翻译或词典进行全英阅读</li>
<li>适应了阅读英文技术文档、英文技术博客，但看非技术领域的内容，如在 wikipedia 上查某个人物、某部电影，第一反应是切换中文版（此时对英文的阅读只停留在自己的专业领域）</li>
<li>尝试阅读全英书籍。其实看得明白，但总觉得太慢了、是不是在浪费时间、好想看中文版，需要耐着性子阅读</li>
<li>阅读量到达一定后，开始对内容挑剔，如认为议论文没有生动的例子不吸引人，或内容充满说教不想看，于是开始学会挑重点，跳过不重要或没兴趣的内容，不再逐字逐句阅读</li>
<li>阅读英文在感观上跟阅读中文没有重大的区别，也即看到英文内容，不会再想“这是英文，不是中文哦”——翻阅内容，看就完事了</li>
</ol>
<p>这是怎么做到的呢？我主要采用了以下方法。</p>
<h2> 阅读方法</h2>
<h3> 建立信心</h3>
<p>如果之前读者并没有全英文的阅读体验，建议先根据兴趣选一本书（或阅读材料）后，在两周内读完它——无论用什么手段，一定要在该时间段内完成。此举似小实大，有两点内涵：</p>
<ul>
<li>时长再拉长，你很可能读了后面忘前面；时间越长，越拖延，则两相结合，很可能最终放弃了阅读</li>
<li>在较短的时间内读完，能快速建立信心，为后续阅读打下基础</li>
</ul>
<p>第一本书或阅读材料很关键，感兴趣是最重要的，当然也可以结合后面提到的蓝思值进行选材。</p>
<p>我当初使用的是 轻听英语 app，在上面看完了英文文字加语音版的死亡笔记。看完后感受如下：</p>
<ul>
<li>一开始的阅读速度比音频的播放速度还要慢，如果没有兴趣，很可能就没耐心了</li>
<li>因为是动漫的文字版，除了画外音（内心的独白），几乎全是人物的对话，这些内容是很容易理解的</li>
</ul>
<p>之后我信心大涨，用一周时间，把魔兽世界官方小说《Arthas: Rise of the Lich King》原版看完了。<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/english/1682427477232.png" alt="image.png" loading="lazy"></p>
<h3> 根据蓝思值选书</h3>
<p>有了信心之后，我们就可以科学地、有节奏地培养自己的英文阅读能力了。</p>
<p>核心思路是评估自己的阅读<a href="https://lexile.com/parents-students/understanding-your-lexile-measure/lexile-measures-reading/" target="_blank" rel="noopener noreferrer">蓝思值</a>，再找到适合自己的阅读材料。什么是蓝思值呢？<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/english/1682427484594.png" alt="image.png" loading="lazy"><br>
假设你的阅读水平是 600L，那么蓝思值在 550L~700L 的阅读材料比较适合你。再低就太简单，达不到提升的效果；再高就超出阅读能力太多，很可能读不下去（因为我们在讲全英文阅读，所以我就不翻译了）。<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/english/1682427489979.png" alt="image.png" loading="lazy"></p>
<p>综上所述，推荐按以下步骤提升阅读能力：</p>
<ol>
<li>评估自己的阅读能力 <a href="https://readtheory.org/" target="_blank" rel="noopener noreferrer">https://readtheory.org/</a> <img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/english/1682427496404.png" alt="image.png" loading="lazy"></li>
<li>找到自己感兴趣的读物，通过网站判定书籍的蓝思值是否合适 <a href="https://hub.lexile.com/find-a-book/book-results" target="_blank" rel="noopener noreferrer">https://hub.lexile.com/find-a-book/book-results</a></li>
</ol>
<p>相关的 app 我推荐: 轻听英语，里面的书都是免费的。当然大家也可以推荐别的 app，直接有标明蓝思值的就最好不过了。<br>
![lADPJw1WS0BSWVnNBQDNBMw_1228_1280.jpg](<a href="https://raw.gitmirror.com/levy9527/image-holder/main/docs/english/1682427501518.png" target="_blank" rel="noopener noreferrer">https://raw.gitmirror.com/levy9527/image-holder/main/docs/english/1682427501518.png</a>](<a href="https://cdn.nlark.com/yuque/0/2022/jpeg/160590/1656413042641-47c45b34-b4d2-4197-9af8-536ea2e8b4be.jpeg#averageHue=%23f0edeb&amp;clientId=u576bfa2c-89a1-4&amp;from=paste&amp;height=471&amp;id=u89b97437&amp;name=lADPJv8gUK04WVbNBQDNAz4_830_1280.jpg&amp;originHeight=1280&amp;originWidth=830&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=204047&amp;status=done&amp;style=none&amp;taskId=udfd982fe-6ea1-4219-89f5-d3a68b12c42&amp;title=&amp;width=305.3333740234375" target="_blank" rel="noopener noreferrer">https://cdn.nlark.com/yuque/0/2022/jpeg/160590/1656413042641-47c45b34-b4d2-4197-9af8-536ea2e8b4be.jpeg#averageHue=%23f0edeb&amp;clientId=u576bfa2c-89a1-4&amp;from=paste&amp;height=471&amp;id=u89b97437&amp;name=lADPJv8gUK04WVbNBQDNAz4_830_1280.jpg&amp;originHeight=1280&amp;originWidth=830&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=204047&amp;status=done&amp;style=none&amp;taskId=udfd982fe-6ea1-4219-89f5-d3a68b12c42&amp;title=&amp;width=305.3333740234375</a>)</p>
<h3> 巧查生词</h3>
<p>阅读的一个拦路虎是生词。大家的第一反应是认为生词太多，看不懂，很容易放弃。</p>
<p>首先，我推荐欧路词典。如果是在电脑上看 pdf，鼠标选中区域就能查词或翻译，非常方便。</p>
<p>再者，表达一个观点：有些单词不认识，甚至有些句子无法理解，并不影响对情节的核心内容的理解。事实上，除去欧亨利式结尾的短篇小说，书的内容越多，其核心内容越不容易受生词影响。因为主题是贯穿全文的，前面因为生词没看懂，后文换了个说法，你就能看得懂了！</p>
<p>因此，对生词，我建议：一页只查一个生词。它的意义是：</p>
<ol>
<li>你不会因为频繁查生词而影响阅读体验。事实上，试图把每一个生词都查一遍，是阅读不下去的主要原因！</li>
<li>因为查词机会的“稀缺性”，你把机会留给你认为最有价值的生词</li>
<li>强迫你的大脑思考，如何在带着许多“迷雾”的情况下，去理解句子、段落，抓住故事的核心情节，理解书籍的中心思想</li>
</ol>
<p>在阅读《Arthas: Rise of the Lich King》的时候，我的体验就是：</p>
<ul>
<li>有些形容词或副词不认识，并不影响理解句子的大意</li>
<li>阅读几章后，为加快阅读速度，只出现一次的生词，我不再查字典——我只查出现过至少两次的单词</li>
<li>再看到后面，有些单词不认识，我都懒得查了，反正不影响我对整体剧情的理解</li>
</ul>
<h3> 阅读材料推荐</h3>
<p>如果实在找不到全英阅读材料，我推荐看《现代大学英语精读(第2版）》, 我已经挑选了值得一读的文章，英语高考有120分或过了四级的人，应该可以直接<a href="/english/contemporary-college-english-1.html" target="blank">点击查看</a>。</p>
<h2> 写作</h2>
<p>阅读是输入，写作是输出，二者是相辅相成的。 对于写的能力，推荐从读书笔记开始做练习 （就像看完中文书那样做笔记），也可以找机会与人发邮件。</p>
<p>读书笔记示例：</p>
<figure><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/english/indispensable-opposition.png" alt="indispensable-opposition.png" tabindex="0" loading="lazy"><figcaption>indispensable-opposition.png</figcaption></figure>
<p>这是我购买 <a href="http://eslpod.com" target="_blank" rel="noopener noreferrer">eslpod.com</a> 教材时发的邮件：<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/english/1682427508571.png" alt="image.png" loading="lazy"></p>
<p>这是我申请 JetBrains 正版授权时发的邮件：<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/english/1682427519794.png" alt="image.png" loading="lazy"></p>
<p>还有一种方法， 那就是利用软件的翻译功能，把自己写的中文笔记，翻译成英文，再去校对、修改。很多文本类 Web 应用都有此功能，可以利用起来。<br>
这种方法本质就是，自己一开始不知道英文文章写什么，那就从校对、修改开始做起；自己不能写完整的英文文章，那就从摘取段落开始做起。适应这个过程后，写作的障碍就减少了。</p>
<p>总结一下，英文读写的提升需要踏出舒适区，要耐着性子，不要怕慢。坚持去做，量变终会有质变！</p>
]]></content:encoded>
      <enclosure url="https://raw.gitmirror.com/levy9527/image-holder/main/docs/english/1682427477232.png" type="image/png"/>
    </item>
    <item>
      <title>英文能力评测手把手教学</title>
      <link>https://levy.vip/english/how-to-self-evaluate-english-level.html</link>
      <guid>https://levy.vip/english/how-to-self-evaluate-english-level.html</guid>
      <source url="https://levy.vip/rss.xml">英文能力评测手把手教学</source>
      <description>英文能力评测手把手教学 前言 之前有提到过两个英文能力评测的网站，分别用于评估蓝思值与单词量。实践中我发现有些细节可能会被大家忽略，故写下此文，以作手把手教学之用。 单词量 进入网站：https://preply.com/en/learn/english/test-your-vocab 看到如图所示区域，开始勾选单词，规则很简单：一眼看上去认识的就勾选，不认识、犹豫的都跳过，之后点击红框处继续。注意，千万不要勾选的过程中去查单词。 在下一页，重复上面的步骤，之后点击 Continue，等待几秒钟，就会出现评估的单词量。 对于该结果，网站有以下值得注意的解释：</description>
      <pubDate>Sat, 09 Jul 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 英文能力评测手把手教学</h1>
<h2> 前言</h2>
<p>之前有提到过两个英文能力评测的网站，分别用于评估蓝思值与单词量。实践中我发现有些细节可能会被大家忽略，故写下此文，以作手把手教学之用。</p>
<h2> 单词量</h2>
<p>进入网站：<a href="https://preply.com/en/learn/english/test-your-vocab" target="_blank" rel="noopener noreferrer">https://preply.com/en/learn/english/test-your-vocab</a></p>
<p>看到如图所示区域，开始勾选单词，规则很简单：一眼看上去认识的就勾选，不认识、犹豫的都跳过，之后点击红框处继续。注意，千万不要勾选的过程中去查单词。<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/english/1682426636662.png" alt="image.png" loading="lazy"><br>
在下一页，重复上面的步骤，之后点击 <code>Continue</code>，等待几秒钟，就会出现评估的单词量。<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/english/1682426647325.png" alt="image.png" loading="lazy"><br>
对于该结果，网站有以下值得注意的解释：</p>
<ol>
<li>结果偏差在正负10%左右：</li>
</ol>
<blockquote>
<p>Your vocabulary count has a margin of error of approximately ±10%. We also round results above 10,000 to the nearest 100, and results above 300 to the nearest 10.</p>
</blockquote>
<ol start="2">
<li>英语非母语者，用单词量作为能力标准通常划分如下：</li>
</ol>
<figure><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/english/1682426651054.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure>
<ol start="3">
<li>结果一年测一次最有效</li>
</ol>
<figure><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/english/1682426657822.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure>
<h2> 阅读能力</h2>
<p>评估阅读能力也就是评估蓝思值。进入网站：<a href="https://readtheory.org/" target="_blank" rel="noopener noreferrer">https://readtheory.org/</a></p>
<p>右上角点击注册：<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/english/1682426663590.png" alt="image.png" loading="lazy"></p>
<p>选择作为学生：<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/english/1682426667189.png" alt="image.png" loading="lazy"></p>
<p>可以直接使用谷歌账号注册：<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/english/1682426672418.png" alt="image.png" loading="lazy"><br>
如果不能谷歌，可以看我写的谷歌教程：<a href="https://www.yuque.com/levy/blog/how-to-surf" target="_blank" rel="noopener noreferrer">https://www.yuque.com/levy/blog/how-to-surf</a><br>
或者自己填表单，进入下一步。</p>
<p>确保自己至少有20分钟的空闲时间，之后点击已经准备好了：<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/english/1682426676249.png" alt="image.png" loading="lazy"></p>
<p>开始做题，一共8道，看不懂就乱选，后面的题目会根据你的答题情况自动调整：<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/english/1682426719299.png" alt="image.png" loading="lazy"></p>
<p>做完后，点击确认：<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/english/1682426727690.png" alt="image.png" loading="lazy"></p>
<p>点击下图红框处：<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/english/1682426733660.png" alt="image.png" loading="lazy"></p>
<p>往下翻阅，即可看到自己的蓝思值初步评分：<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/english/1682426739821.png" alt="image.png" loading="lazy"></p>
<p>再给出通用的蓝思值能力对照表：<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/english/1682426744993.png" alt="image.png" loading="lazy"><br>
以上就是今天的英文能力评测手把手教学啦，希望对大家有所帮助。</p>
]]></content:encoded>
      <enclosure url="https://raw.gitmirror.com/levy9527/image-holder/main/docs/english/1682426636662.png" type="image/png"/>
    </item>
    <item>
      <title>完成刷7k单词任务</title>
      <link>https://levy.vip/english/learning-7000-words-task-completed.html</link>
      <guid>https://levy.vip/english/learning-7000-words-task-completed.html</guid>
      <source url="https://levy.vip/rss.xml">完成刷7k单词任务</source>
      <description>完成刷7k单词任务 这周算是完成了今年定下的刷单词的任务，写篇文章总结下，为这件事划上一个句号，也给有需要的人一定的参考价值。 首先，解释下为什么完成度不是100%，我也称之为完成任务。因为软件出问题了（又或是我使用方式问题），剩下的单词无法进行学习了，进度条止步于此。我也不想纠结于这一点，就这样吧，算是残缺美。</description>
      <pubDate>Sat, 17 Sep 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 完成刷7k单词任务</h1>
<p><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/english/1682426608041.png" alt="image.png" loading="lazy"><br>
这周算是完成了今年定下的刷单词的任务，写篇文章总结下，为这件事划上一个句号，也给有需要的人一定的参考价值。</p>
<p>首先，解释下为什么完成度不是100%，我也称之为完成任务。因为软件出问题了（又或是我使用方式问题），剩下的单词无法进行学习了，进度条止步于此。我也不想纠结于这一点，就这样吧，算是残缺美。</p>
<p>再者，说明下为什么要做这件事。主要原因有三：</p>
<ol>
<li>主动扩充词汇量，与英文阅读相辅相成。诚然，可以一边阅读一边积累词汇，但这种方式我认为是“被动”的，并且有看我之前英文阅读经验分享的朋友，会知道我阅读时查词的频率很低的，如此增加词汇量的效率太慢。另外，词汇又有高频与低频、重点与非重点之分，而这是单词本的强项，因此利用单词本是接触“精华词汇”的高效方式。</li>
<li>我想知道自己确切的词汇量。虽然在之前分享的在线工具中，我评测过自己的词汇量（7000），但自己感觉有点“虚”，一方面误差有10%，另一方面我觉得波动太大了（两年前测是4000），不太相信，于是打算用刷单词本的“笨方法”去确认自己的词汇量。</li>
<li>我想体验一下刷单词本的经历。这点我在之前的文章中也透露过，我在学生时代是没有买过单词本、也没有拿着单词本去背诵过，基本都是靠音标+词根，边学课文时边记忆，讲究的是一个自然，没有刻意。然而，这隐约有种“不踏实”之感，没有经过刻意练习，似乎得来的单词“不会珍惜”，于是便趁这个机会把这个经历补上。</li>
</ol>
<p>最后，我想强调的是，注意我“刷单词”，而不是“背单词”这种描述上的差别。“刷”重在强调，过一遍，有个印象、能认识；“背”强调的是死记硬背，机械地记忆——虽然我认为练习需要刻意，但却不认为它等同于死记。</p>
<p>很多人在学习单词觉得很痛苦，半途而废，很大的原因是强调背，把内容强塞进脑子里很让人痛苦；而背了又忘，更是让人感到强烈的挫败感。在这里，我想分享的经验是，此时需要进行思维的转换：你允许自己忘记某些单词。可以把新单词想像成陌生人，总有人能与你成为好友，总有人不能给你留下深刻印象，总有人与你相处不愉快——这么多单词，你先认识容易认识的，很难“相处”、容易忘记的单词，后面再说呗，没必要一口气吃成胖子。</p>
<p>为了减少痛苦，我有以下经验，它们是属于启发式的（heuristic），仅供参考。每个人应总结符合自己的经验，其核心思想是分层次、分类，不要一刀切。</p>
<p>对单词的掌握程度区分优先级：</p>
<ul>
<li>读：阅读时能看懂是什么意思；就算第一眼看不出单词意思，结合上下文能推测出意思才行</li>
<li>听：别人正常语速、慢速说时，自己能听出这是哪个单词</li>
<li>说：我不对此有强制要求，看着音标能发音即可，因为当前我的英语实践场景中，并不侧重说</li>
<li>写：此优先级最低，因为写作不是考试，我完全可以查词典，因此有些词很难记我就索性不记，如官僚主义（bureaucratism）、资产阶级（bourgeois）——我能听、阅读，但放弃掌握写</li>
</ul>
<p>对词意进行分类掌握：有的词十几个意思，你哪能一下子全记住？</p>
<ul>
<li>结合相应的例句，一次只记一个意思</li>
<li>常见的词意，优先记住</li>
<li>冷门的词意，可以跳过</li>
<li>另外，有些中文词意解释很牵强，可以找英英释义</li>
</ul>
<p>对词汇进行分类掌握：识别出单词属于哪个领域的</p>
<ul>
<li>计算机、法律、经济、日常生活、文学等领域的词汇，我放在较高优先级，尽量去掌握</li>
<li>医学领域、非考试重点词汇，我不太重视，能认识就认识，觉得认识上有困难就跳过</li>
</ul>
<p>当然，单词不能纯刷，要结合阅读一起来做。我选择的是外国语学院的英语专业教材《现代大学英语精读》，二者结合，相辅相成。</p>
<p>还有就是，最好固定时间段，以便形成习惯，如上班坐地铁，或晚饭后等较规律的时间段。</p>
<p>最后，我想说的是，刷了这本单词本，并不意味着我就 master 7,000 English words。它对我而言，更多的是在英语学习经历上，具有里程碑的意义。回顾一下，从2022年2月份开始到，到现在历经大约7个月，我算是把英语单词这件事的“遗憾”给补上了，此事至此告一段落，我可以开始新的旅程了🎉。</p>
]]></content:encoded>
      <enclosure url="https://raw.gitmirror.com/levy9527/image-holder/main/docs/english/1682426608041.png" type="image/png"/>
    </item>
    <item>
      <title>让 ChatGPT 成为你的外语私教</title>
      <link>https://levy.vip/english/let-chatgpt-be-your-foreign-language-teacher.html</link>
      <guid>https://levy.vip/english/let-chatgpt-be-your-foreign-language-teacher.html</guid>
      <source url="https://levy.vip/rss.xml">让 ChatGPT 成为你的外语私教</source>
      <description>让 ChatGPT 成为你的外语私教 前言 有了 ChatGPT 后，练习外语口语的门槛再次降低，没有外语环境再也不是问题了——AI 就是你的专属私教。 本文将分享借助 AI 进行口语练习的一些工具、方法与实践经验，仅供参考。 准备工作 在开始之前，要准备好几样东西： ChatGPT, 如果没有账号或不能上网，请查看上网教程 Chrome 浏览器插件 voice-control-for-chatgpt 口语练习题，根据个人需求查找即可，下文将以雅思为例进行说明</description>
      <pubDate>Sat, 06 May 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 让 ChatGPT 成为你的外语私教</h1>
<h2> 前言</h2>
<p>有了 ChatGPT 后，练习外语口语的门槛再次降低，没有外语环境再也不是问题了——AI 就是你的专属私教。</p>
<p>本文将分享借助 AI 进行口语练习的一些工具、方法与实践经验，仅供参考。</p>
<h2> 准备工作</h2>
<p>在开始之前，要准备好几样东西：</p>
<ol start="0">
<li><a href="https://chat.openai.com/" target="_blank" rel="noopener noreferrer">ChatGPT</a>, 如果没有账号或不能上网，请查看<a href="/tools/how-to-connect-to-internet.html" target="blank">上网教程</a></li>
<li><a href="https://chrome.google.com/webstore/detail/voice-control-for-chatgpt/eollffkcakegifhacjnlnegohfdlidhn" target="_blank" rel="noopener noreferrer">Chrome 浏览器插件 voice-control-for-chatgpt</a></li>
<li>口语练习题，根据个人需求查找即可，下文将以<a href="https://liuxue.koolearn.com/ielts/speak-1-44-0/" target="_blank" rel="noopener noreferrer">雅思</a>为例进行说明</li>
</ol>
<p>安装好插件后，打开 chatGPT 界面，下方就会出现语音输入按钮。<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/english/1683211581972.png" alt="image.png" loading="lazy"></p>
<h2> 常用Prompt</h2>
<p>下面总结了常用的 Prompt，可以有根据需要进行使用或调整。</p>
<p>设置角色：</p>
<ol>
<li>Please act as an English teacher.</li>
<li>Please act as an English-speaking test examiner.</li>
<li>Please act as IELTS speaking test examiner.</li>
</ol>
<p>进入一问一答模式：</p>
<ol>
<li>You're supposed to asked me questions and wait for my answer. The next question is: xxx</li>
</ol>
<p>对回答进行完善：</p>
<ol>
<li>Please revise my answer</li>
<li>Please modify my answer to make it more fluent</li>
</ol>
<p>对回答进行评分：</p>
<ol>
<li>Please rate my answer</li>
</ol>
<h2> 进行对话</h2>
<p>第一句话，是设置好 AI 的角色，让它扮演口语考官。</p>
<p>可以使用以下 prompt:</p>
<div class="language-markdown line-numbers-mode" data-ext="md"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/english/1683211593449.png" alt="image.png" loading="lazy"><br>
可以看出，语音转文字出现错误，单词 IELTS 始终未能正确识别，但 ChatGPT 却能明白其中的意思。</p>
<p>开启语音插件的意义在于，如果语音识别不了自己说的话，很有可能是自己的发音有问题，起到提醒自己纠正发音的作用。另外，ChatGPT 回复的文字，也会转换成语音输出，顺便练习了听力。</p>
<p>根据练习材料，让 AI 问自己问题。<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/english/1683211601688.png" alt="image.png" loading="lazy"><br>
记得让 AI 对自己的回答评分，可以使用以下 prompt：</p>
<div class="language-markdown line-numbers-mode" data-ext="md"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/english/1683211608559.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure>
<p>进行下一个问题：<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/english/1683211615610.png" alt="image.png" loading="lazy"><br>
上述回答不太好，AI 给出了理由：<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/english/1683211861818.png" alt="image.png" loading="lazy"></p>
<p>修改后再回答，有所进步<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/english/1683211906368.png" alt="image.png" loading="lazy"></p>
<p>再问下一个问题：<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/english/1683211920743.png" alt="image.png" loading="lazy"><br>
这个回答同样不理想，但看了提示也不知道要怎么改：<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/english/1683211928334.png" alt="image.png" loading="lazy"></p>
<p>此时可以新建一个聊天窗口，让 AI 提供示例回答：<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/english/1683211938210.png" alt="image.png" loading="lazy"></p>
<p>根据示例答案，结合关键词，重新组织语言，切换回原聊天窗口，再回答一次：<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/english/1683211955902.png" alt="image.png" loading="lazy"><br>
有所进步！</p>
<p>有时对话长了，AI 会“糊涂”如下所示：<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/english/1683373370527.png" alt="image.png" loading="lazy"></p>
<p>此时要重新强调它扮演的角色，让其回忆起上下文，可以使用以下 prompt:</p>
<div class="language-markdown line-numbers-mode" data-ext="md"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/english/1683373376359.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure>
<p>除此之外，就没啥值得注意的了。重复上述过程，不断练习即可。</p>
<h2> 记录回答</h2>
<p>做完了练习，还要作笔记。但在记录回答之前，还要润色一下，毕竟口语表达的时候，可能会存在语法错误。</p>
<p>进入 <a href="https://quillbot.com/" target="_blank" rel="noopener noreferrer">https://quillbot.com/</a>，把答案复制上去，先进行语法检查：<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/english/1683211964246.png" alt="image.png" loading="lazy"><br>
再进行流畅度润色：<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/english/1683211997332.png" alt="image.png" loading="lazy"><br>
最后保存到笔记本上即可。</p>
]]></content:encoded>
      <enclosure url="https://raw.gitmirror.com/levy9527/image-holder/main/docs/english/1683211581972.png" type="image/png"/>
    </item>
    <item>
      <title>旧文章精选</title>
      <link>https://levy.vip/frontend/old-articles.html</link>
      <guid>https://levy.vip/frontend/old-articles.html</guid>
      <source url="https://levy.vip/rss.xml">旧文章精选</source>
      <description>旧文章精选 📦vue组件发布npm最佳实践 🔨揭秘vue-sfc-cli：组件研发利器 🚀Github集成TravisCI：自动发布 ⚡Github集成Netlify：快速预览PR 🌪自动化的Github Workflow 🤖如何写一个GithubApp 🔒免费开启HTTPS 🕸捕获与改写HTTPS请求</description>
      <pubDate>Tue, 03 Sep 2019 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 旧文章精选</h1>
<ul>
<li><a href="https://github.com/levy9527/blog/issues/2" target="_blank" rel="noopener noreferrer">📦vue组件发布npm最佳实践</a></li>
<li><a href="https://github.com/levy9527/blog/issues/7" target="_blank" rel="noopener noreferrer">🔨揭秘vue-sfc-cli：组件研发利器</a></li>
<li><a href="https://github.com/levy9527/blog/issues/1" target="_blank" rel="noopener noreferrer">🚀Github集成TravisCI：自动发布</a></li>
<li><a href="https://github.com/levy9527/blog/issues/4" target="_blank" rel="noopener noreferrer">⚡Github集成Netlify：快速预览PR</a></li>
<li><a href="https://github.com/levy9527/blog/issues/12" target="_blank" rel="noopener noreferrer">🌪自动化的Github Workflow</a></li>
<li><a href="https://github.com/levy9527/blog/issues/10" target="_blank" rel="noopener noreferrer">🤖如何写一个GithubApp</a></li>
<li><a href="https://github.com/levy9527/blog/issues/5" target="_blank" rel="noopener noreferrer">🔒免费开启HTTPS</a></li>
<li><a href="https://github.com/levy9527/blog/issues/11" target="_blank" rel="noopener noreferrer">🕸捕获与改写HTTPS请求</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Git最佳实践</title>
      <link>https://levy.vip/git/git-best-pratices.html</link>
      <guid>https://levy.vip/git/git-best-pratices.html</guid>
      <source url="https://levy.vip/rss.xml">Git最佳实践</source>
      <description>2020-09-21 Git最佳实践 精简提交 一次只提交一个“瘦”的功能，同时只包含相关改动文件。例如，对于两个错误的修复应该进行两次不同的提交。 如果发现写提交信息时，需要写两点以上; &amp;nbsp;则可以考虑拆分提交。 频繁提交 一次提交应只对应一个“瘦”的功能。从而达到频繁提交的目标。 经常性地提交改动可以确保不会出现特别庞大的提交，同时也可以比较精准地对应到所需要的改动上。 此外，通过频繁地提交也可以比较快速地和其他开发人员来共享你的改动。同样也会避免在整合代码时出现过多的合并冲突。相反的，非常庞大的提交会加大整合代码时出现冲突的风险，解决这些冲突也会非常复杂。</description>
      <pubDate>Mon, 21 Sep 2020 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>2020-09-21</p>
<h1> Git最佳实践</h1>
<h2> 精简提交</h2>
<p>一次只提交一个“瘦”的功能，同时只包含相关改动文件。例如，对于两个错误的修复应该进行两次不同的提交。<br>
如果发现写提交信息时，需要写两点以上; &nbsp;则可以考虑拆分提交。</p>
<h2> 频繁提交</h2>
<p>一次提交应只对应一个“瘦”的功能。从而达到频繁提交的目标。<br>
经常性地提交改动可以确保不会出现特别庞大的提交，同时也可以比较精准地对应到所需要的改动上。</p>
<p>此外，通过频繁地提交也可以比较快速地和其他开发人员来共享你的改动。同样也会避免在整合代码时出现过多的合并冲突。相反的，非常庞大的提交会加大整合代码时出现冲突的风险，解决这些冲突也会非常复杂。</p>
<h2> 不要提交不完整的改动</h2>
<p>虽然原则上来说不要提交一些还没有完成的改动，但是对于一个非常庞大的新功能来说，也并不意味着你必须整体完成这个功能后才可以提交。恰恰相反，你必须把那些改动正确地分割成一些有意义的逻辑模块来进行频繁地提交。</p>
<p>如果你仅仅是因为急着想要下班，或者是想要得到一个干净的工作副本（比如想要切换到另一个分支上），你可以利用 Git 所提供的储藏（Stash）功能来解决这些问题。切记不要把那些不完整的改动提交到仓库中。</p>
<h2> 提交前测试那些改动</h2>
<p>不要理所当然地认为自己完成的改动都是正确的。所有的改动一定要通过彻底地测试才表示它真正地被完成了。</p>
<h2> 版本控制不是备份系统</h2>
<p>版本控制系统具有一个很强大的附带功能，那就是服务器端的备份功能。但是千万不要把 VCS 仅仅当成一个备份系统。特别需要注意的是，只能提交那些有意义的改动。</p>
<h2> Github实例</h2>
<h3> 一个功能对应一个分支</h3>
<p>下面是好的示例： 格式化代码，也应该单独一个PR<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682344980430.png" alt="" loading="lazy"><br>
下面是不好的示例：因为一个PR修改了不同的主题内容<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682344985874.png" alt="" loading="lazy"><br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682344990582.png" alt="" loading="lazy"></p>
<h3> 提交“瘦”的PR</h3>
<p>参考文章：<a href="https://deliveroo.engineering/2017/09/06/play-pull-request-roulette.html#ideas-to-make-your-prs-more-review-friendly" target="_blank" rel="noopener noreferrer">https://deliveroo.engineering/2017/09/06/play-pull-request-roulette.html#ideas-to-make-your-prs-more-review-friendly</a><br>
其中最重要的一点：不要一次提交一个很大改动的PR，否则别人很难 review，要学会拆分步骤。<br>
下面是一个 PR 示例：<br>
拆分前，包含了35个改动，很难 review<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682344998899.png" alt="" loading="lazy"></p>
<p>下图是拆分后：<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682345004360.png" alt="" loading="lazy"></p>
<p>单个PR的改动文件只有11个<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682345009991.png" alt="" loading="lazy">每个 PR&nbsp;改动的文件少了，这样&nbsp;review&nbsp;起来就更容易了。</p>
<h3> 使用正确的标题</h3>
<p><a href="https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#commits" target="_blank" rel="noopener noreferrer">相关规范看这里</a></p>
<p>另外，请回答：出于什么原因需要进行这次修改？具体改动了些什么？</p>
<ul>
<li>使用一定要使用现在时祈使句（例如要使用 change ，而不是 changed 或 changes）。</li>
<li>优先使用正面肯定语句，而不是否定句。</li>
</ul>
<p>好的示例：<code>docs: extraQuery 的正确使用方法</code><br>
不好的示例：<code>docs: 更新不直观的例子</code></p>
<h3> 根据模板填写PR描述</h3>
<p>这是我们 Github 的 PR 模板，融合了我们的最佳实践<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682345014045.png" alt="" loading="lazy"><br>
下面是实际的好的例子<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682345019293.png" alt="" loading="lazy"></p>
<h3> 自动关闭issue</h3>
<figure><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682345024941.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当pr合并时，将自动close issue</p>
<h3> 1+2 review 规则</h3>
<p>1 是指发起 PR 的人，2 是指进行 code review 的人。也即，每一个 PR，至少要经过两个团队成员 approve 才能合并。</p>
<blockquote>
<p>上面是针对 github 的协作，项目组中可酌情变为 1+1 规则</p>
</blockquote>
<p><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682345031945.png" alt="" loading="lazy"><br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682345036964.png" alt="" loading="lazy"></p>
<h3> 礼貌提问</h3>
<p>在 github 向人提问时，需要有礼貌。当提出 feature request时，还要说明自己的情况，尽可能提供更多的信息给对方。<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682345041577.png" alt="" loading="lazy"><br>
上面的示例有三个重点：</p>
<ol>
<li>开头表达感谢</li>
<li>中间说明己方的使用情况，并给出相应链接</li>
<li>最后参考业界已有实现，给出一个方案设想，并给出相应链接</li>
</ol>
<h2> 学习资源</h2>
<ul>
<li><a href="https://git.oschina.net/progit/" target="_blank" rel="noopener noreferrer">Pro Git</a></li>
<li><a href="https://learngitbranching.js.org/?NODEMO" target="_blank" rel="noopener noreferrer">https://learngitbranching.js.org</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682344980430.png" type="image/png"/>
    </item>
    <item>
      <title>Git代码合并指南</title>
      <link>https://levy.vip/git/git-definitive-guide-to-merge-code.html</link>
      <guid>https://levy.vip/git/git-definitive-guide-to-merge-code.html</guid>
      <source url="https://levy.vip/rss.xml">Git代码合并指南</source>
      <description>Git代码合并指南 前言 合并时代码常见问题是冲突、提交错代码以及合并错分支，本文将说明这些问题的解决方案，为代码合并打下坚实的基础，以应对未来可能出现的分支模型多样化、协作流程复杂化的场景。 在说明问题前，先定义一些概念： feat：指代功能分支 dev 与 test：指代两条不同的长驻分支，它们具有以下特点： 受保护，不能直接推送 不会被删除 二者之间不直接合并，也即合并方式一般是 feat -&amp;gt; dev，feat -&amp;gt; test MR：merge request。代码合并请求</description>
      <pubDate>Thu, 28 Apr 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Git代码合并指南</h1>
<h2> 前言</h2>
<p>合并时代码常见问题是冲突、提交错代码以及合并错分支，本文将说明这些问题的解决方案，为代码合并打下坚实的基础，以应对未来可能出现的分支模型多样化、协作流程复杂化的场景。<br>
在说明问题前，先定义一些概念：</p>
<ul>
<li>feat：指代功能分支</li>
<li>dev 与 test：指代两条不同的长驻分支，它们具有以下特点：
<ul>
<li>受保护，不能直接推送</li>
<li>不会被删除</li>
<li>二者之间不直接合并，也即合并方式一般是 feat -&gt; dev，feat -&gt; test</li>
</ul>
</li>
<li>MR：merge request。代码合并请求</li>
</ul>
<p>以及说明本文解决冲突涉及到的工具及平台：</p>
<ul>
<li>使用 IDEA 解决冲突（JetBrains系列的工具都适用）</li>
<li>使用 GitLab 托管代码</li>
</ul>
<h2> 功能分支合并长驻分支冲突</h2>
<p>这是最常见的场景：feat1 与 feat2 并行开发，当提交MR（ feat1 -&gt; dev ）时，发现冲突了，无法合并。<br>
下面先给出解决思路，再给出图文操作步骤。</p>
<h3> 解决思路</h3>
<ol>
<li>因为合并的方向是 feat -&gt; dev，所以解决冲突应该是在本地 dev 合并 feat</li>
<li>又因为本地 dev 不能向远程推送，因而需要基于 dev 切一个新分支 conflict/resolved</li>
<li>推送 conflict/resolved 分支</li>
<li>提交 MR：conflict/resolved -&gt; dev</li>
</ol>
<h3> 操作步骤</h3>
<ol>
<li>本地切换到 dev 分支，更新代码</li>
<li>合并相应的 feat 分支</li>
</ol>
<figure><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682344287512.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ol>
<li>弹出冲突提示，点击合并</li>
</ol>
<figure><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682344293749.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ol>
<li>首先处理无冲突的代码，点击下图红框处</li>
</ol>
<figure><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682344298158.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ol>
<li>再根据情况，选择合并代码或丢弃代码。</li>
</ol>
<figure><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682344303228.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ol>
<li>在 dev 分支上切出新分支，推荐命名为 conflict/xxx</li>
</ol>
<figure><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682344307534.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ol>
<li>推送代码，提交MR（conflict -&gt; dev)，记得勾选合并后删除</li>
</ol>
<figure><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682344312127.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> 功能分支被污染</h2>
<p>分支一多，人难免失误，很可能造成 feat 分支被污染，即当提MR（feat -&gt; test）时，出现不想合并到 test的代码或提交记录。<br>
这种场景的出现可能有多种原因：</p>
<ol>
<li>研发过程中出现误操作，如出现了 dev -&gt; feat 的合并</li>
<li>feat 分支的基线分支搞错了，如从 dev 切出了 feat</li>
</ol>
<h3> 解决思路</h3>
<ol>
<li>基于目标分支如 (test 分支）切一个干净的分支 clean</li>
<li>使用 cherry-pick，挑选自己想要的提交</li>
<li>再提交MR（clean -&gt; test）</li>
</ol>
<p>注意的是，要按提交顺序进行 cherry-pick，以避免遗漏或出错。</p>
<h3> 操作步骤</h3>
<ol>
<li>更新目标分支（在这里是 test）</li>
</ol>
<figure><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682344317048.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ol>
<li>基于 test 切新分支，这里示例命名为：clean</li>
</ol>
<figure><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682344322358.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ol>
<li>在拥有最新代码的分支（这里是 feat） 找到并选中相应的提交记录</li>
<li>右键，点击 Cherry-Pick<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682344326902.png" alt="" loading="lazy"></li>
<li>则相应的提交记录就会合并到 clean 分支</li>
<li>推送 clean，提交MR（clean -&gt; test）</li>
</ol>
<h2> 挑选别的分支部分代码合并</h2>
<p>有可能会出现这样一种场景：</p>
<ul>
<li>最新的生产代码里，假设版本为v1.3.0，包含了 feat 分支的代码</li>
<li>为了减少分支的冗余，代码一旦上生产后，就会清除相应的功能分支，也即此时仓库里没有 feat 分支了</li>
<li>客户方部署的版本代码为 v1.1.0，而客户不想升级到最新的版本，只想要 feat 分支相应的功能</li>
</ul>
<p>此时该如何是好？</p>
<h3> 解决思路</h3>
<p>其实只要触发“挑选”关键字，就可以考虑使用 cherry-pick。<br>
feat 分支就算被删了，只要提交记录还在，那也没关系：</p>
<ul>
<li>在v1.3.0 的代码库中，按分支筛选，找出 feat 分支对应的提交记录</li>
<li>通过 cherry-pick 把 feat 分支的代码合并到客户方的代码分支即可</li>
</ul>
<p>注意：毕竟跨越了版本，无法保证合并过去后的代码一定能正确工作，需要进行充分地测试。</p>
<h3> 操作步骤</h3>
<p>此操作本质还是 cherry-pick，参考前面 cherry-pick 的示例即可。</p>
]]></content:encoded>
      <enclosure url="https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682344287512.png" type="image/png"/>
    </item>
    <item>
      <title>Git常用命令</title>
      <link>https://levy.vip/git/git-useful-commands.html</link>
      <guid>https://levy.vip/git/git-useful-commands.html</guid>
      <source url="https://levy.vip/rss.xml">Git常用命令</source>
      <description>Git常用命令 前言 这里列举常见场景，并给出相应解决方案 约定： 下文代码块中${}里面表示的是变量，具体值视情况而定，其余的都是正确可执行的命令。 配置 Mac/Linux 用户 执行以下操作 vi ~/.gitconfig</description>
      <pubDate>Mon, 21 Sep 2020 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Git常用命令</h1>
<h2> 前言</h2>
<p>这里列举常见场景，并给出相应解决方案<br>
约定： 下文代码块中<code>${}</code>里面表示的是变量，具体值视情况而定，其余的都是正确可执行的命令。</p>
<h2> 配置</h2>
<p>Mac/Linux 用户 执行以下操作</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Windows用户在桌面用户文件夹下有个.gitconfig隐藏文件，直接修改即可<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682343376774.png" alt="" loading="lazy"><br>
补充以下内容</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 增强</h2>
<p>Mac或Linux用户，推荐安装<a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener noreferrer">https://github.com/robbyrussell/oh-my-zsh</a>，增强命令行体验。</p>
<h2> 记住账号密码</h2>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2> 本地提交</h2>
<h3> 取消未暂存的修改</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 取消add</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 取消提交</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 修正提交</h3>
<p>适用于提交信息有误或有遗漏，需要修正最新提交信息的场景。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> stash修改</h3>
<p>适用于当前功能开发并不完整，不能产生一次提交，但却要开发另外功能的场景</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 恢复stash</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 分支管理</h2>
<h3> 创建分支</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 查看远程分支</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 创建干净历史分支</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 删除分支</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 标签管理</h2>
<h3> 新建本地标签</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 删除本地标签</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 查看本地所有标签</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 推送本地标签</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 获取远程标签</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 删除远程标签</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 远程仓库</h2>
<h3> 浅克隆</h3>
<p>适用于仓库很大，对过往历史不关心，想快速克隆的场景。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 克隆指定分支</h3>
<p>适用于只想要某一分支代码的场景。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 克隆失败因为文件名太长</h3>
<p>报错信息为：<code>error: unable to create file xxx.java: Filename too long</code></p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意，如果是使用 IDEA 进行克隆，很可能会看忽略该报错，但可以根据以下经验加以验证：如果 git clone 完成后，工作区并不干净（可以用 git status 检查）、不能切换分支，说明很可能就是上述情况。</p>
<h3> 强行推送</h3>
<p>适用于本地开发了一段时间，最近才在代码托管平台上初始化远程仓库的场景</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> 取消错误的推送</h3>
<p>适用于推送了错误的提交后, 想取消该推送的场景</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 其他</h2>
<h3> cherry-pick</h3>
<ol>
<li>checkout目标分支(target branch)</li>
<li>选中相应的提交记录，右键</li>
<li>点击Cherry-pick<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682343384184.png" alt="image.png" loading="lazy"></li>
<li>则相应的提交记录就会合并到目标分支</li>
</ol>
<h3> merge unrelated histories</h3>
<p>遇到上述问题时，可以使用 <code>--allow-unrelated-histories</code>&nbsp;，如</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 查看分支创建时间</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，本地分支可以查看到 clone 或 create 的日期：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>但远程分支，并不能确切地知道分支创建的日期：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 根据文件搜索历史</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> </h3>
<h3> 从所有提交中删除一个文件</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果代码已经推送到了远程仓库，还需要强制推送</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>]]></content:encoded>
      <enclosure url="https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682343376774.png" type="image/png"/>
    </item>
    <item>
      <title>Gitlab CI</title>
      <link>https://levy.vip/git/gitlab-ci.html</link>
      <guid>https://levy.vip/git/gitlab-ci.html</guid>
      <source url="https://levy.vip/rss.xml">Gitlab CI</source>
      <description>Gitlab CI 合并代码前进行检查 背景 有的产品线使用 Jenkins 进行 CI，但又没设置好相应的 GitLab 插件，于是会形成这样一个流程： feature 分支发起 Merge Request 合并至受保护的分支 登录 Jenkins，点击构建 构建失败，原因：编译报错 最后一点，非常难以忍受，因为代码已经合并进去了，木已成舟。此时面对编译报错，第一反应是解决报错，重新编译。但有没有一种可能，我根本不想要这些编译报错的代码呢？</description>
      <pubDate>Tue, 10 Jan 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Gitlab CI</h1>
<h2> 合并代码前进行检查</h2>
<h3> 背景</h3>
<p>有的产品线使用 Jenkins 进行 CI，但又没设置好相应的 GitLab 插件，于是会形成这样一个流程：</p>
<ul>
<li>feature 分支发起 Merge Request</li>
<li>合并至受保护的分支</li>
<li>登录 Jenkins，点击构建</li>
<li>构建失败，原因：编译报错</li>
</ul>
<p>最后一点，非常难以忍受，因为代码已经合并进去了，木已成舟。此时面对编译报错，第一反应是解决报错，重新编译。但有没有一种可能，我根本不想要这些编译报错的代码呢？</p>
<p>笔者还是更倾向于防患于未然的思维模式，也即不能通过编译的代码，不允许合并至受保护的分支。而使用 Gitlab CI 来做这件事比 Jenkins 体验更丝滑，下面就来介绍一下具体的做法。</p>
<h3> 安装Gitlab Runner</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其他安装方式可查阅<a href="https://docs.gitlab.com/runner/install/docker.html#install-the-docker-image-and-start-the-container" target="_blank" rel="noopener noreferrer">文档</a>。</p>
<h3> 注册Gitlab Runner</h3>
<p>Gitlab Runner 根据范围分为<a href="https://docs.gitlab.com/ee/ci/runners/runners_scope.html" target="_blank" rel="noopener noreferrer">三种</a>。注册需要获取相应的 token，这就涉及到了权限，至少需要 Maintainer 权限。<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682387098778.png" alt="image.png" loading="lazy"><br>
下面以 Specific Runner 为例进行说明。</p>
<p>进入项目如下界面：<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682387102770.png" alt="image.png" loading="lazy"></p>
<p>拿到 URL 及 token：<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682387107092.png" alt="image.png" loading="lazy"></p>
<p>执行命令进行注册:</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>根据提示输入内容，其中 URL 及 token 就是前面步骤中 Web 界面获取的信息。</p>
<p>命令行操作示例如下：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注册成功后，显示示例如下：<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682387118062.png" alt="image.png" loading="lazy"></p>
<h3> 设置MR检查</h3>
<p>进入项目如下界面：<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682387122013.png" alt="image.png" loading="lazy"></p>
<p>勾选流水线必须成功。<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682388470210.png" alt="image.png" loading="lazy"></p>
<h3> 配置.gitlab-ci.yml</h3>
<p>简单示例如下，根据实际情况修改：</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述示例要设置成功，还要确保 .m2/settings.xml 文件存在。</p>
<p>建议提前 yml 文件前，在 Gitlab 先进行语法校验。<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682388474604.png" alt="image.png" loading="lazy"></p>
<p>如果错误，会有提示。<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682388478169.png" alt="image.png" loading="lazy"></p>
<h3> 效果</h3>
<p>当流水线还未结束时，不能提前合并代码，只能等待流水线成功。<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682388481821.png" alt="image.png" loading="lazy"></p>
<p>如果流水线失败了，不能合并。<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682388485568.png" alt="image.png" loading="lazy"></p>
<h2> 线上发布 jar</h2>
<p>可以在前文的基础上，设置流水线自动发布 jar。</p>
<h3> Maven配置</h3>
<p>考虑到一个项目A，可能划分了多个模块，并非每个模块都需要发布 jar，可以修改对应模块的 pom.xml</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>则在项目根目录执行 deploy 命令即可：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> Gitlab配置</h3>
<p>相应 gitlab-ci 配置如下：</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码合并或有新的 commit 时，会执行流水线：<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682388489368.png" alt="image.png" loading="lazy"></p>
<h3> 拉取最新的jar</h3>
<p>在B项目中，如果要引用A项目打出来的 jar，记得拉取最新的版本，pom.xml 设置如下：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 报错</h2>
<h3> 创建不了容器</h3>
<blockquote>
<p>ERROR: Preparation failed: adding cache volume: set volume permissions: running permission container "d1574748b77fc73a4319a45341af1f0eab983900d81885a02c017ff6c5559f28" for volume "runner-bzsttzs-project-2271-concurrent-0-cache-3c3f060a0374fc8bc39395164f415a70": starting permission container: Error response from daemon: OCI runtime create failed: container_linux.go:349: starting container process caused "process_linux.go:319: getting the final child's pid from pipe caused "EOF"": unknown (linux_set.go:105:0s)</p>
</blockquote>
<p>可以尝试的方案：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果上述方法不行，可尝试重启 docker</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 本地成功，流水线失败</h3>
<p>如果流水线编译报错，本地编译通过，不用怀疑，一定是本地的问题。</p>
<p>本地之所以能编译通过，是因为有缓存。如果 pom.xml 没有设置 <code>&lt;updatePolicy&gt;always&lt;/updatePolicy&gt;</code>，编译时很可能使用的是缓存。</p>
<p>清除缓存拉取最新的包即可。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 参考文档</h2>
<ul>
<li><a href="https://docs.gitlab.com/ee/ci/examples/" target="_blank" rel="noopener noreferrer">Gitlab CI 示例 </a></li>
<li><a href="https://docs.gitlab.com/ee/ci/variables/predefined_variables.html" target="_blank" rel="noopener noreferrer">预设的环境变量</a></li>
<li><a href="https://docs.gitlab.com/ee/ci/jobs/job_control.html#specify-when-jobs-run-with-rules" target="_blank" rel="noopener noreferrer">rules规则说明</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682387098778.png" type="image/png"/>
    </item>
    <item>
      <title>再论Git Flow</title>
      <link>https://levy.vip/git/rethinking-git-flow.html</link>
      <guid>https://levy.vip/git/rethinking-git-flow.html</guid>
      <source url="https://levy.vip/rss.xml">再论Git Flow</source>
      <description>再论Git Flow 背景 团队目前使用的 Git 协作模式是： 对每个功能建立相应的 feat 分支 上研发、测试、UAT环境时，分别把相应的 feat 分支合并进入长驻 dev/test/uat 如有冲突，则在本地更新长驻分支 dev/test/uat，merge feat into current branch，之后 checkout 一个新分支，作为 conflict resolved 分支，推送并合并至远程长驻分支 这个模式简单好懂，且业界流行，最直观的好处是，可以满足以下需求：</description>
      <pubDate>Thu, 21 Apr 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 再论Git Flow</h1>
<h2> 背景</h2>
<p>团队目前使用的 Git 协作模式是：</p>
<ol>
<li>对每个功能建立相应的 feat 分支</li>
<li>上研发、测试、UAT环境时，分别把相应的 feat 分支合并进入长驻 dev/test/uat</li>
<li>如有冲突，则在本地更新长驻分支 dev/test/uat，merge feat into current branch，之后 checkout 一个新分支，作为 conflict resolved 分支，推送并合并至远程长驻分支</li>
</ol>
<p>这个模式简单好懂，且业界流行，最直观的好处是，可以满足以下需求：</p>
<ol>
<li>某 feat 合并至 dev 后，并不想合并至 test</li>
<li>某 feat 合并至 test 后，并不想合并至 uat</li>
</ol>
<p>本文暂且不讨论该交付理念的优劣，毕竟每个团队研发情况、交付理念都不一样。 本文关注的是，在满足上述需求的情况下，是否有更好的分支协作方式。</p>
<h2> 动机</h2>
<p>为什么要寻求更好的方式？因为上述分支协作模式，会导致代码冲突的噩梦：</p>
<ol>
<li>feat -&gt; dev，解决冲突</li>
<li>feat -&gt; test，又要解决冲突</li>
<li>feat -&gt; uat，还要解决冲突</li>
</ol>
<p>正如<a href="https://www.cloudbees.com/blog/pitfalls-feature-branching" target="_blank" rel="noopener noreferrer">此文章</a>所说，“把时间浪费在解决不必要的冲突上”。</p>
<p>再者，功能已经通过测试了，准备上UAT环境时，居然还要解决一大堆曾经解决过的冲突，实在不想接受这种“惊喜”（或者说“惊吓”更合适）——合错代码了怎么办？并且，这么多分支，遗漏了怎么办？这些问题可以解决，但难免有为了解决一个问题，引入更多问题之嫌。</p>
<p>理想中的研发流程是，测试通过后，上 UAT 的体验是平滑的，是不用担心出错的。</p>
<p>为此，本文思考是否存在另一种分支协作的方式。</p>
<h2> 分析</h2>
<p>首先分析一下，“某功能测试通过但不上 UAT”的可操作方法有哪些：</p>
<ol>
<li>要上 UAT 的 feat 分支逐个依次合并至长驻分支，也即当前的做法</li>
<li>在原计划要上的功能的代码集合中，剔除掉相应 feat 的代码，再上 UAT</li>
<li>相应分支再次提交代码，或提交 revert commit，或屏蔽相应的功能及入口，变相达到目的</li>
</ol>
<h3> 剔除代码</h3>
<p>先来看第2种方法。filter by branch，这是最先想到且符合直觉的方式，可惜实际上 Git 并没有此功能。</p>
<p>想“剔除某 feat 分支的代码”，可操作方式如下，更多请<a href="https://www.clock.co.uk/insight/deleting-a-git-commit" target="_blank" rel="noopener noreferrer">参考此文章</a>：</p>
<ol>
<li><code>git rebase</code></li>
<li><code>git cherry-pick</code></li>
</ol>
<p><code>git rebase</code>要求 commit 是连续的，这对于实际不可行，因为集成分支里各个 feat 分支的提交记录掺杂在一起。</p>
<p><code>git cherry-pick</code>是可行的。不过其思路是挑捡想要的 commit，放到目标分支，本质上并不是剔除的逻辑。</p>
<h3> 再次提交</h3>
<p>真正的剔除逻辑，存在于第3种方法中。提交一个 revert commit，就可以把之前的代码干掉了（如果想恢复代码，需要 revert "revert commit")。</p>
<p>觉得 revert 可能会对后续恢复代码造成困扰的话，也可以再提交代码，屏蔽相应功能及入口。这种方式适合于功能入口少，功能本身具有类似开关特性的场景。</p>
<h3> 比较优劣</h3>
<p>要比较上述方案优劣，本文倾向于使用功利主义的最佳实践作为指导思想——认为痛苦存在更多共同点，因而为避免消极而努力。换言之，本文关注的是，哪种方案最令人痛苦，则优先淘汰它。</p>
<p>还有一个指导思想：麻烦、辛苦的事情放前面；前面可以多做，后面期望少做。</p>
<p>当前的方式，存在最难受的问题：解决过的冲突，需要重复地解决。涉及范围：全部分支。涉及人员：所有参与研发的人员，即使他们在别的 feat 分支提交代码。</p>
<p>cherry-pick 依然存在要重复解决冲突的问题，且涉及范围同样为全部分支，但涉及人员减少为单人，因为只需要一个做 cherry-pick 的工作，由其解决 cherry-pick 遇到的冲突（当然，很可能需要他人协助）。</p>
<p>再次提交，冲突的可能性将大大减少，涉及范围：相应的 feat 分支。涉及人员：相应的 feat 分支研发人员。</p>
<p>也即使用再次提交的方案，痛苦将降低至最小。这也是符合直觉的：谁出问题，谁负责。某功能不上线了，这也算是“问题”的一种，则相应的负责人去处理，尽可能不影响到其他人。</p>
<p>至于再次提交是使用 revert 还是屏蔽功能及入口，则具体情况具体分析。</p>
<h2> 实例</h2>
<p>下面举例说明，如何应用上述分析结果。</p>
<h3> 分支模型</h3>
<p>长驻分支： dev/test/uat，分别对应环境：研发/测试/UAT</p>
<p>一个月一次的迭代开始时，都建立相应的 &nbsp;release 分支，命名规则可以：</p>
<ul>
<li>按版本，如： release/v2.15</li>
<li>按上线日期，如：release/04-26</li>
</ul>
<h3> 功能提交</h3>
<p>每个研发人员根据相应功能，从 uat checkout 相应的 feat 分支。</p>
<p>每次需要集成发布时，正常的分支合并操作如下：</p>
<ol>
<li>feat -&gt; dev</li>
<li>feat -&gt; release</li>
<li>release -&gt; test</li>
<li>release -&gt; uat</li>
</ol>
<p>则冲突大多数情况只发生在第前两步，解决之后，后续上测试环境、上 UAT 环境，基本无需担心冲突。</p>
<p>为什么一个 feat 要合并两次？</p>
<p>因为要保证 release 的功能是较为完整的, 至少经过开发人员在 dev 环境的自测。</p>
<p>并且这样也能适应不同的功能分批提测的研发节奏。</p>
<h3> 功能回撤</h3>
<p>当 release 合并至 test 分支后，得到通知，某功能（分支涉及 feat/unwanted）不上 UAT。</p>
<p>则此时，feat/unwanted 相应的研发人员，为了进行功能回滚，操作如下：</p>
<ol>
<li>checkout rollback 分支</li>
<li>进行回滚提交，或 revert，或屏蔽功能入口</li>
<li>请求合并至 UAT（不合并至 release/分支）:</li>
</ol>
<p>后续要恢复功能，在 rollback 分支操作，再合并至 UAT 即可。</p>
<h2> 结论</h2>
<p>通过分析与比较，本文推荐使用“再次提交”的方式，来满足某 feat 分支合进 test，不合进 uat 分支的需求。</p>
<p>这样做，将改动涉及范围减至最小，涉及人员降为单人，大大减少上 UAT 时合并代码的痛苦，达到平稳上线的目的。</p>
]]></content:encoded>
    </item>
    <item>
      <title>操作 Gitlab MR 的命令行工具</title>
      <link>https://levy.vip/git/use-command-line-tool-to-manage-gitlab-merge-request.html</link>
      <guid>https://levy.vip/git/use-command-line-tool-to-manage-gitlab-merge-request.html</guid>
      <source url="https://levy.vip/rss.xml">操作 Gitlab MR 的命令行工具</source>
      <description>操作 Gitlab MR 的命令行工具 背景 为什么开发这个工具？主要解决以下问题： 提测、上 UAT 时，避免漏合代码。 代码冲突时，团队成员不用再问“解决这个冲突要怎么切分支？” 一个 feature 分支要向多个保护分支提交合并请求时，减少烦琐而易错的选取分支的界面操作。 可能会有人问：为什么会漏合代码？当你在某一个迭代需要来回在不同的 feature 分支切换、一个 feature 横跨多个项目，同时你偶尔还要兼顾 bug 修复的时候，你极容易丢失上下文。 并且，不同的 feature 研发进度不一致，可能出现的一种情况是：feature A 只是合并到 test 分支，但　feature B 却已经合并到了 uat。 对此，有人问你代码到底合并了没，你怎么确认？一个个项目去相应的主干分支里查看提交历史吗？就是因为不想再这样做了，这才有了这个工具。</description>
      <pubDate>Thu, 23 Mar 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 操作 Gitlab MR 的命令行工具</h1>
<h2> 背景</h2>
<p>为什么开发这个工具？主要解决以下问题：</p>
<ol>
<li>提测、上 UAT 时，避免漏合代码。</li>
<li>代码冲突时，团队成员不用再问“解决这个冲突要怎么切分支？”</li>
<li>一个 feature 分支要向多个保护分支提交合并请求时，减少烦琐而易错的选取分支的界面操作。</li>
</ol>
<p>可能会有人问：为什么会漏合代码？当你在某一个迭代需要来回在不同的 feature 分支切换、一个 feature 横跨多个项目，同时你偶尔还要兼顾 bug 修复的时候，你极容易丢失上下文。<br>
并且，不同的 feature 研发进度不一致，可能出现的一种情况是：feature A 只是合并到 test 分支，但　feature B 却已经合并到了 uat。<br>
对此，有人问你代码到底合并了没，你怎么确认？一个个项目去相应的主干分支里查看提交历史吗？就是因为不想再这样做了，这才有了这个工具。</p>
<h2> 安装</h2>
<h3> 解压zip</h3>
<p>下载并解压文件:</p>
<ul>
<li><a href="https://r0e715v8ejr.feishu.cn/file/IxH4bYAOkowK08xSid1crXcSnRo" target="_blank" rel="noopener noreferrer">Windows</a></li>
<li><a href="https://r0e715v8ejr.feishu.cn/file/ORa3buA3donF3TxxPVwcHSYnnQb" target="_blank" rel="noopener noreferrer">Linux</a></li>
</ul>
<h3> 安装git bash</h3>
<p>Windows系统才要安装。<br>
如果 git bash 版本不足 2.41.0，最好安装最新版本。</p>
<p>安装地址：<a href="https://gitforwindows.org/" target="_blank" rel="noopener noreferrer">https://gitforwindows.org/</a></p>
<h2> 配置</h2>
<p>新增文件</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>复制以下内容：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于该配置的解释，详见后文。</p>
<h3> gitlab_token</h3>
<p>先获取 gitlab token，操作如下：</p>
<ol>
<li>打开Gitlab，右上角点击个人头像</li>
</ol>
<figure><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/tools/1689154008266.png" alt="0a8ff2ce0d86d685fd2b5283c40871d9.png" tabindex="0" loading="lazy"><figcaption>0a8ff2ce0d86d685fd2b5283c40871d9.png</figcaption></figure>
<ol start="2">
<li>点击左侧边栏</li>
</ol>
<figure><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/tools/1689154013693.png" alt="f1151c580d5672d187ca38699e9c2013.png" tabindex="0" loading="lazy"><figcaption>f1151c580d5672d187ca38699e9c2013.png</figcaption></figure>
<ol start="3">
<li>勾选全部权限，并确认生成 token</li>
</ol>
<figure><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/tools/1689154016668.png" alt="790ed16e056c26d79f35b7ff4c072c8f.png" tabindex="0" loading="lazy"><figcaption>790ed16e056c26d79f35b7ff4c072c8f.png</figcaption></figure>
<h3> codebases</h3>
<p>适用于多基线的场景。</p>
<p>如产品默认有三个环境，分别对应三条分支 dev、test、master。<br>
同时，又有定制化需求，专门为某一客户进行源码改动，同样有三个环境，则可能出现的配置如下：</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 环境变量</h3>
<p>把 mr 可执行文件所在目录设置到环境变量中：</p>
<ol>
<li>查找"环境变量"</li>
</ol>
<figure><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/tools/1689154020270.png" alt="157a114acdf00def50ae774b4d68e004.png" tabindex="0" loading="lazy"><figcaption>157a114acdf00def50ae774b4d68e004.png</figcaption></figure>
<ol start="2">
<li>点击"环境变量"</li>
</ol>
<figure><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/tools/1689154023459.png" alt="6a99dd2754b75348523a388d36067bd9.png" tabindex="0" loading="lazy"><figcaption>6a99dd2754b75348523a388d36067bd9.png</figcaption></figure>
<ol start="3">
<li>找到 Path，点击"编辑"</li>
</ol>
<figure><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/tools/1689154026703.png" alt="d1335d05ddefa6aa33006e9f24f3254f.png" tabindex="0" loading="lazy"><figcaption>d1335d05ddefa6aa33006e9f24f3254f.png</figcaption></figure>
<ol start="4">
<li>点击"新增"，再点击"浏览"，找到最里层的 mr 目录</li>
</ol>
<p><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/tools/1689154030135.png" alt="6df5b86a1f91452414382718983e0e22.png" loading="lazy"><br>
（上图是示例，具体路径根据自己的情况而定）</p>
<p>重新打开 git bash 即可生效，记得一定要重新打开！</p>
<p>注：如果是 Linux，那很简单，修改 ~/.bashrc</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> IDEA</h3>
<p>该步骤选填，适用于 JetBrains 系列产品，想在 IDEA 的终端中也使用 mr 命令时可配置。</p>
<p>File -&gt; Settings -&gt; Tools -&gt; Terminal：<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/tools/1689154033353.png" alt="image.png" loading="lazy"></p>
<h2> 使用</h2>
<p>可以不带参数运行，查看支持的命令：mr<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/tools/1689154109989.png" alt="image.png" loading="lazy"></p>
<h3> 创建MR</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>提示输入要提交 MR 的源分支，按回车使用当前分支：<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/tools/1689154113289.png" alt="image.png" loading="lazy"><br>
创建成功：<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/tools/1689154116622.png" alt="ae115431acc7c0b9275c158fb99e3eaa.png" loading="lazy"></p>
<p>可以处理同名项目的情况：<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/tools/dealing-with-same-name-projects.png" alt="dealing-with-same-name-projects.png" loading="lazy"></p>
<p>MR 不会重复创建：<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/tools/1689154120100.png" alt="ab7d3ea5177726bbab0ccbcd870d0044.png" loading="lazy"></p>
<p>分支没有代码更新时，也不会创建 MR：<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/tools/1689154123348.png" alt="147f745360164598c78c3de8808af1d2.png" loading="lazy"></p>
<h3> 查看MR</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以用来查看自己有哪些MR未合并。注意：只显示自己创建的。</p>
<ul>
<li>如果可以合并，显示 [ok]</li>
<li>如果有冲突，显示 [conflict]</li>
</ul>
<figure><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/tools/1689154126283.png" alt="85ac4ee87e49965270f502ef830bf619.png" tabindex="0" loading="lazy"><figcaption>85ac4ee87e49965270f502ef830bf619.png</figcaption></figure>
<h3> 合并MR</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>{mr_url} 的值可以根据以下方式来获取：</p>
<ol>
<li>create 命令成功后的输出</li>
<li>list 命令的输出</li>
<li>gitlab web界面上 MR 的 url</li>
</ol>
<p>合并前会有确认提示：<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/tools/1689154129605.png" alt="image.png" loading="lazy"></p>
<p>可以取消，防止误合并：<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/tools/1689154133045.png" alt="image.png" loading="lazy"></p>
<h3> 冲突处理</h3>
<p>解决冲突，切换分支，是很麻烦的事情，故本工具为解决冲突提供了一些辅助功能。</p>
<p>注意：命令行只做拉取代码、切合分支等必要操作，冲突的解决仍需要人工介入，工具不会自动合并代码的。</p>
<p>合并冲突状态的MR：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>出现提示，是否自动切换分支为解决冲突作准备：<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/tools/1689154136190.png" alt="image.png" loading="lazy"><br>
当然在此之前，要保证工作目录是干净的，如果有修改未提交，会中止切换分支操作：<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/tools/1689154139322.png" alt="image.png" loading="lazy"></p>
<blockquote>
<p>可以使用 <code>git stash</code>保存修改，合并冲突后，再 <code>git stash pop</code></p>
</blockquote>
<p>命令执行成功时，会切换到 <code>conflict/</code> 开头的分支。<br>
此时，打开 IDE 或 Git 管理工具，根据提示把相应的分支合并到 <code>conflict/</code> 分支即可。<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/tools/1689154143622.png" alt="image.png" loading="lazy"></p>
<p>以 IDEA 为例：<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/tools/1689154146323.png" alt="image.png" loading="lazy"></p>
<p>解决冲突后，再切回命令行，此时有两种选择：</p>
<ol>
<li>创建 MR，适用于自己没有权限合并的场景</li>
<li>合并 MR，适用于自己有权限合并的场景</li>
</ol>
<p>如果是创建，再次执行 create 命令即可：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/tools/1689154149211.png" alt="image.png" loading="lazy"><br>
创建的 MR 合并时会自动删除 <code>conflict/</code> 分支。<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/tools/1689154152000.png" alt="image.png" loading="lazy"></p>
<p>如果是合并，同样再次执行 merge 命令即可，此时不用带参数：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/tools/1689154155089.png" alt="image.png" loading="lazy"><br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/tools/1689154158111.png" alt="52fee749bc6d270f9ccab3eb0e04208b.png" loading="lazy"></p>
]]></content:encoded>
      <enclosure url="https://raw.gitmirror.com/levy9527/image-holder/main/docs/tools/1689154008266.png" type="image/png"/>
    </item>
    <item>
      <title>Python 导出 MySQL 库表信息到 Excel</title>
      <link>https://levy.vip/python/export-mysql-table-into-excel.html</link>
      <guid>https://levy.vip/python/export-mysql-table-into-excel.html</guid>
      <source url="https://levy.vip/rss.xml">Python 导出 MySQL 库表信息到 Excel</source>
      <description>Python 导出 MySQL 库表信息到 Excel 需求 查询 MySQL 某个库的全部表的元信息，输出成 Excel，每一张表一个 sheet。</description>
      <pubDate>Sun, 05 Mar 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Python 导出 MySQL 库表信息到 Excel</h1>
<h2> 需求</h2>
<p>查询 MySQL 某个库的全部表的元信息，输出成 Excel，每一张表一个 sheet。</p>
<!-- more -->
<h2> 代码</h2>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 其他细节</h2>
<p>上述代码由于库的原因，只能生成新文件或覆盖文件，不能修改原有文件。<br>
执行代码时必须关闭生成的文件，否则报错。<br>
sheet的名字不能超过 31 个字符。<br>
<a href="https://www.rapidtables.com/convert/color/rgb-to-hex.html" target="_blank" rel="noopener noreferrer">RBG 转 Hex 工具</a>，给单元格、文字上颜色时会用到，因为 Excel 显示的是 RBG，但代码里是 Hex。</p>
]]></content:encoded>
    </item>
    <item>
      <title>使用 RestAssured 进行 API 测试</title>
      <link>https://levy.vip/software-testing/use-RestAssured-for-api-testing.html</link>
      <guid>https://levy.vip/software-testing/use-RestAssured-for-api-testing.html</guid>
      <source url="https://levy.vip/rss.xml">使用 RestAssured 进行 API 测试</source>
      <description>使用 RestAssured 进行 API 测试 前言 本文将借助 RestAssured 工具，向大家介绍如何进行 API 测试，从而在团队中开启接口自动化之路。 本文的示例代码使用的是 Java 语言。尽管本文的首要读者是 Java 研发人员，但道理是相通的，其他语言的研发人员也能从中受益。 What 什么是 API 测试？简单来说，可以认为是针对 Controller 层的测试，但不是 Mock，而是会真实地处理请求，与数据库或外部服务进行交互。 Why 为什么要做 API 测试呢？</description>
      <pubDate>Fri, 09 Jun 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 使用 RestAssured 进行 API 测试</h1>
<h2> 前言</h2>
<p>本文将借助 RestAssured 工具，向大家介绍如何进行 API 测试，从而在团队中开启接口自动化之路。</p>
<p>本文的示例代码使用的是 Java 语言。尽管本文的首要读者是 Java 研发人员，但道理是相通的，其他语言的研发人员也能从中受益。</p>
<h2> What</h2>
<p>什么是 API 测试？简单来说，可以认为是针对 Controller 层的测试，但不是 Mock，而是会真实地处理请求，与数据库或外部服务进行交互。</p>
<h2> Why</h2>
<p>为什么要做 API 测试呢？</p>
<p>考虑有过这样的场景：</p>
<ul>
<li>加一个新功能，自测没问题，结果被测试人员发现一个旧模块出了问题，感到措手不及</li>
<li>后端写好了接口，前端还没开发好界面，于是感觉不方便自测，因为没有界面，只好催前端快去做页面</li>
</ul>
<p>API 测试就是来解决上述问题的。做 API 测试的原因有：</p>
<ul>
<li>必要性：做回归测试，避免添加新功能时破坏旧功能。</li>
<li>便利性：方便本地调试，不用部署到线上，依赖界面去测试。</li>
<li>资产化：让测试用例变成资产，与团队共享。</li>
</ul>
<p>当然，要做好 API 测试，还要接受这样的认知： 接口自动化测试并不仅仅是测试人员事情，研发人员也有责任把它做好。 否则，研发人员难免会觉得这不关我的事, 从而不愿意写这种代码。 建议研发人员从以下方便思考其好处，提升行动的积极性：</p>
<ul>
<li>减少阻塞，接口自测不再依赖前端</li>
<li>提高效率，本地就能自测，不用把应用部署到线上环境</li>
<li>提高质量，减少部署到研发环境、前端一调用接口就 500 的情况</li>
</ul>
<h2> 为什么不用Postman</h2>
<p>Postman 确实是符合直觉的接口调试的第一选项。 但注意，调试不等于测试。</p>
<p>Postman 在实践过程中，最大的问题在于，无法将测试用例有效地资产化:</p>
<ul>
<li>你会在 Postman 里写断言吗？很少吧，你其实是在用肉眼去检查接口成功与否，这本质还是手工测试</li>
<li>你的 Postman 数据能与团队共享吗？不能吧，大多数人的 Postman 数据是在本地的，也不会去付费创建一个团队以共享数据</li>
<li>你的 Postman 数据在有版本管理吗？没有吧，大多数人的 Postman 数据是与源代码分离的，不利于维护与管理</li>
</ul>
<p>另外，如果要与 CI 结合，Postman 的数据更适合使用 Node.js 的 <a href="https://github.com/postmanlabs/newman" target="_blank" rel="noopener noreferrer">Newman</a>。</p>
<p>考虑源代码是 Java，使用 RestAssured，编写 API 测试代码用同一种语言，可以减少使用者的心智负担较轻；并且与源代码放在同一个 Git 仓库中，易于管理。</p>
<p>因此，我仍然会使用 Postman，但更多是把它应用在出现线上问题时，直接复制一个 cURL 用来复现、排查问题的情况。</p>
<h2> 安装</h2>
<p>下面将介绍如何用 Maven 安装 RestAssured。</p>
<p>复制以下内容到 pom.xml 即可。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>安装完成后，重启 Spring 容器。</p>
<p>如果安装依赖不成功，可以进行以下检查：</p>
<ul>
<li>显式指定 json-path 与 xml-path 的版本，并排除其他测试包(如 sping-boot-starter-test) 对 json-path 的依赖</li>
<li>声明放在 JUnit 前面</li>
</ul>
<h2> 快速上手</h2>
<p>语法结构为： given()、when()、then()</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 通用设置</h2>
<p>以下代码可直接复制到 Java 测试类中。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>动态获取 token 示例代码：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 请求示例</h2>
<p>下面是一个较完整的示例，包含了：</p>
<ul>
<li>设置请求头</li>
<li>设置请求体</li>
<li>设置query</li>
<li>判断响应体的数据结构</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>提醒，在运行测试代码前，需要做两件事：</p>
<ul>
<li>一定保证 Web 服务已请求，因为这不是 Mock，而是会发送真实的请求。</li>
<li>正确配置了环境变量 TOKEN。如果使用 IDEA，可以编辑运行配置，在环境变量里注入类似代码：TOKEN=Bearer xxx</li>
</ul>
<h2> 接口依赖</h2>
<p>有时在请求接口 B 之前，需要请求接口 A，于是就产生了接口依赖：B 依赖了 A。</p>
<p>此时可以使用 extract() 及 path() 获取请求 A 返回的数据。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 上传示例</h2>
<p>RestAssured 很强大，还能处理上传与下载的请求，简直让人“爱了爱了”。 下面是具体的示例：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果想在传文件的基础上，还传其他参数，可以这样写：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的前端请求代码为(记录一下，以备不时之需😃)：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 下载示例</h2>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看到全部用例都执行成功，非常爽快！<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/software-testing/resetassured-download.png" alt="resetassured-download" loading="lazy"></p>
<h2> 其他问题</h2>
<h3> 为什么不用 Pytest</h3>
<p>如果编码代码的人员是测试人员，那可能首选 Pytest。但本文面向的读者的 Java 研发——既写 API，也写相应的测试代码。故选型理由参考前面 为什么不用Postman 的回答。</p>
<h3> 这也是单元测试吗</h3>
<p>不是。运行上述测试代码，如果是测试本地接口，需要先在本地启动 Spring 容器；如果是测试线上接口，则需要先把应用部署到线上。因此，这是集成测试。</p>
<h2> 参考资料</h2>
<p>官方文档：<a href="https://github.com/rest-assured/rest-assured/wiki/Usage#examples" target="_blank" rel="noopener noreferrer">https://github.com/rest-assured/rest-assured/wiki/Usage</a></p>
]]></content:encoded>
      <enclosure url="https://raw.gitmirror.com/levy9527/image-holder/main/docs/software-testing/resetassured-download.png" type="image/png"/>
    </item>
    <item>
      <title>使用 Cypress 进行端对端测试</title>
      <link>https://levy.vip/software-testing/use-cypress-for-e2e-testing.html</link>
      <guid>https://levy.vip/software-testing/use-cypress-for-e2e-testing.html</guid>
      <source url="https://levy.vip/rss.xml">使用 Cypress 进行端对端测试</source>
      <description>使用 Cypress 进行端对端测试 为什么写端对端测试 写端对端测试代码的最大好处就是，把相关的用例变成可执行的代码，成为项目的资产；结合CI系统，可在后续研发维护过程中，将一部分测试过程自动化，减少重复的手工劳动，既保障质量，又提高效率。 谁来写呢？本文的目标读者是前端研发人员，因而相关测试代码是由前端同学去编写的。 为什么用 Cypress 文档齐全，生态好，对 JavaScript 友好，可简单上手。更多详见：why-cypress</description>
      <pubDate>Tue, 08 Dec 2020 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 使用 Cypress 进行端对端测试</h1>
<h2> 为什么写端对端测试</h2>
<p>写端对端测试代码的最大好处就是，把相关的用例变成可执行的代码，成为项目的资产；结合CI系统，可在后续研发维护过程中，将一部分测试过程自动化，减少重复的手工劳动，既保障质量，又提高效率。</p>
<p>谁来写呢？本文的目标读者是前端研发人员，因而相关测试代码是由前端同学去编写的。</p>
<h2> 为什么用 Cypress</h2>
<p>文档齐全，生态好，对 JavaScript 友好，可简单上手。更多详见：<a href="https://docs.cypress.io/guides/overview/why-cypress.html" target="_blank" rel="noopener noreferrer">why-cypress</a></p>
<p>缺点：全英文档</p>
<h2> 快速开始</h2>
<h3> 安装</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下载完依赖后，cypress 还会再从网络下载二进制执行包。安装完成后会在本地全局缓存一份二进制执行包，那么这台机器上所有项目都可以使用这份缓存。<a href="https://docs.cypress.io/guides/getting-started/installing-cypress.html#npm-install" target="_blank" rel="noopener noreferrer">文档参考</a></p>
<p>一般而言，国内用户都会在上述过程中卡住，最好在命令行设置网络代理后再下载（懂的自然懂）。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果是在 CI 环境，记得缓存 cypress binary。</p>
<p>安装完后，修改 package.json</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 加速下载</h3>
<p>因为安装时，需要科学上网，如果不想设置代理，也能加速下载安装。可以自己先下载官方提供的二进制 <a href="https://download.cypress.io/desktop.json" target="_blank" rel="noopener noreferrer">cypress.zip</a>，再上传至自己的 OSS。</p>
<p>则安装 Cypress 时，设置 <code>CYPRESS_INSTALL_BINARY</code> 指向对应的地址即可。如</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或使用淘宝镜像，缺点是可能包不是最新的。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或这样写</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 目录结构</h3>
<p><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/software-testing/1686494179328.png" alt="image.png" loading="lazy"><br>
推荐结构如上图所示的目录结构：</p>
<ul>
<li>cypress 相关的内容放到 test/e2e 文件夹下。与单元测试的 unit 文件夹区分开来</li>
<li>config 存放不同环境下的<a href="https://docs.cypress.io/guides/guides/environment-variables.html#Setting" target="_blank" rel="noopener noreferrer">变量</a>，如 dev/uat 环境的 baseUrl 是不同的，可分别在 config 里</li>
<li>fixtures 存放测试 mock 数据</li>
<li>integration 存放的就是 cypress 的测试用例了，命名规范同 jest：${name}.spec.js</li>
<li>plugins 存放的是相关插件</li>
<li>support 存放自定义的 cypress 命令</li>
</ul>
<p>可以根据要求，修改文件夹目录结构，只要在 cypress.json 里配置好即可：</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>注意，如果不显示声明这些配置，每次执行 cypress 命令都会自动生成相应的示例文件</p>
</blockquote>
<p>cypress.json 是放在项目根目录下的默认配置文件，全部配置项可<a href="https://docs.cypress.io/guides/references/configuration.html#Options" target="_blank" rel="noopener noreferrer">查看文档</a></p>
<blockquote>
<p>通过 <a href="https://github.com/FEMessage/create-nuxt-app" target="_blank" rel="noopener noreferrer">FEMessage/create-nuxt-app</a> 生成的项目默认是使用上面的配置</p>
</blockquote>
<h3> 与 Jest 协同工作</h3>
<p>当项目也在使用 jest 进行单元测试时，有两个注意点。</p>
<h4> ESLint 配置</h4>
<p>推荐项目中存在三份 eslint 配置文件：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，还要安装相应的依赖：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4> 测试目录</h4>
<p>两个工具都需要明确指定各自的测试目录。</p>
<p>cypress 的测试目录可通过上文所说的  cypress.json 指定。</p>
<p>jest 测试目录则可通过在 jest.config.js 里指定：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 检查依赖及生产安装依赖命令</h3>
<p>请确保生产安装依赖命令为</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上述命令，只会安装 package.json 里声明的 <code>dependencies</code>&nbsp;依赖，避免因为下载 Cypress 而超时。</p>
<p>因此，也要确保项目中 package.json 中的 <code>dependencies</code>&nbsp;<code>devDependencies</code>&nbsp;等声明是正确的。</p>
<h3> 第一个用例</h3>
<p>新建 common.spec.js</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的示例覆盖了三个 cypress 常用命令：</p>
<ul>
<li>跳转页面</li>
<li>获取元素</li>
<li>断言</li>
</ul>
<p>这里说一下 <code>should</code>&nbsp;命令，它相当于是 <code>expect.to</code>&nbsp;的简写。<br>
如： <code>expect($input).to.be.disabled</code>&nbsp;可写成 <code>get($input).should('be.disabled')</code></p>
<p>更多命令，可<a href="https://docs.cypress.io/api/commands/get.html#Syntax" target="_blank" rel="noopener noreferrer">查看API</a><br>
常见断言，可<a href="https://docs.cypress.io/guides/references/assertions.html#Common-Assertions" target="_blank" rel="noopener noreferrer">查看文档</a></p>
<p>如果想获得代码提示、代码补全，需在开头添加如下语句，（Webstorm不需要此配置）<a href="https://docs.cypress.io/zh-cn/guides/tooling/intelligent-code-completion.html#" target="_blank" rel="noopener noreferrer">参考文档</a></p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>
<p>执行 <code>yarn e2e</code>&nbsp;，出现弹窗<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/software-testing/1686494184473.png" alt="image.png" loading="lazy"><br>
点击文件，即会执行用例。<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/software-testing/1686494186469.png" alt="image.png" loading="lazy"></p>
<h3> 更复杂的示例</h3>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 结合TypeScript</h2>
<p>在 e2e 目录添加 tsconfig.json，内容如下：</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 e2e/support 添加 index.d.ts，如果有自定义命令的话</p>
<div class="language-typescript line-numbers-mode" data-ext="ts"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将 e2e/integration/xxx.spec.js 重命名为  e2e/integration/xxx.spec.ts，并添加如下2行内容：</p>
<div class="language-typescript line-numbers-mode" data-ext="ts"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 持续集成</h2>
<p>持续集成的第一步要选择合适的包含 Cypress 的<a href="https://github.com/cypress-io/cypress-docker-images" target="_blank" rel="noopener noreferrer">镜像</a>。</p>
<blockquote>
<p>注意自身的 Node 版本选择合适的镜像。</p>
</blockquote>
<p>另一方面，一般 CI 环境下执行的是 <code>cypress run</code>&nbsp;命令。</p>
<blockquote>
<p>run 与 open 的不同之处在于，run 默认不会启动浏览器界面，使用的是 headless 模式执行用例。</p>
</blockquote>
<p>同时，需要安装 Cypress 时，需要设置环境变量 <code>CYPRESS_INSTALL_BINARY</code></p>
<p>最后，还是要强调一下，在生产安装依赖环节，使用如下命令安装依赖，则不会安装 Cypress 依赖</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 直接运行 Cypress</h3>
<p>直接运行 Cypress 的场景是，e2e 作为 CI 的最后一个<a href="https://docs.gitlab.com/ee/ci/yaml/README.html#stages" target="_blank" rel="noopener noreferrer">阶段</a>，当应用完成部署后，再对应用运行线上的测试。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不推荐选择 <code>cypress/included</code> 镜像直接执行 Cypress 命令，因为很可能会遇到以下问题。<br>
当然，如果自己的用例写的不好，也很可能会出现下面的问题。<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/software-testing/1686494188361.png" alt="image.png" loading="lazy"></p>
<h3> 使用 start-server-and-test</h3>
<p>如果需要本地起个 localhost 服务，然后再运行 cypress。那么可以合作官方推荐的 <code>start-server-and-test</code>&nbsp;模块。它在 CI 上的执行顺序是：</p>
<ol>
<li>在系统后台执行拉起本地服务的命令</li>
<li>使用 wait-on 模块监听并等待该本地服务响应 200</li>
<li>执行 test 命令，完成并退出</li>
<li>CI 环境此时会自动关闭所有后台进程并退出</li>
</ol>
<p>下面以 <a href="http://gitlab.com/" target="_blank" rel="noopener noreferrer">gitlab.com</a> 为例，展示执行完 gitlab jobs 后可看到 test 记录和下载测试产物（视频及截图）</p>
<ul>
<li>package.json</li>
</ul>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>.gitlab-ci.yml</li>
</ul>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> This job is stuck</h3>
<p><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/software-testing/1686494190870.png" alt="image.png" loading="lazy">如果是自建的 gitlab, 可能会遇到这个问题。<br>
这是任务没有打对标签，导致无法给任务分配对应的 Runner。<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/software-testing/1686494192801.png" alt="image.png" loading="lazy"><br>
进入上图所示页面，注意找到可使用的 Runner<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/software-testing/1686494195056.png" alt="image.png" loading="lazy"><br>
如上图所示， <code>docker</code>&nbsp;标签对应的 Runner 是处于激活状态的，则在 CI 文件里配置即可</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> Cypress Dashbord</h3>
<p>Cypress 官方提供了一个测试记录托管服务。在 CI 命令中，只需要加上 <code>--record --key $key</code>&nbsp;即可。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>CI 日志如下：<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/software-testing/1686494197613.png" alt="image.png" loading="lazy"><br>
更多介绍请查阅<a href="https://docs.cypress.io/guides/dashboard/introduction.html#Features" target="_blank" rel="noopener noreferrer">官方文档</a></p>
<h2> 总结</h2>
<p>cypress 比较适合写一个流程测试。一般情况下，只需要把整个正常流程操作使用 cypress 记录下来即可。</p>
<p>一个流程可能长这样：创建-&gt;验证-&gt;修改-&gt;验证-&gt;删除-&gt;验证。那我们就可以根据该流程，模拟填写合法数据，模拟点击提交按钮，检查页面是否有相应内容即可。</p>
<p>这样，每次开发新功能后，编写测试用例，再跑 Cypress，就能把一部分的回归测试自动化了，保证完成新功能的同时，原有功能最低限度地保持可用。</p>
<h2> 拓展阅读</h2>
<ul>
<li><a href="https://www.yuque.com/femessage/fwrngg/arlhoq" target="_blank" rel="noopener noreferrer">Cypress 实战总结</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://raw.gitmirror.com/levy9527/image-holder/main/docs/software-testing/1686494179328.png" type="image/png"/>
    </item>
    <item>
      <title>使用 Jest 实践测试驱动开发</title>
      <link>https://levy.vip/software-testing/use-jest-for-test-driven-development.html</link>
      <guid>https://levy.vip/software-testing/use-jest-for-test-driven-development.html</guid>
      <source url="https://levy.vip/rss.xml">使用 Jest 实践测试驱动开发</source>
      <description>使用 Jest 实践测试驱动开发 前言 本文将使用jest进行测试驱动开发的示例，源码在github。 旨在说明在开发中引入单元测试后开发过程，以及测试先行的开发思路。</description>
      <pubDate>Sun, 21 Apr 2019 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 使用 Jest 实践测试驱动开发</h1>
<h2> 前言</h2>
<p>本文将使用<a href="https://jestjs.io/docs/en/getting-started" target="_blank" rel="noopener noreferrer">jest</a>进行测试驱动开发的示例，源码在<a href="https://github.com/levy9527/jest-tdd-demo" target="_blank" rel="noopener noreferrer">github</a>。<br>
旨在说明在开发中引入单元测试后开发过程，以及测试先行的开发思路。</p>
<p>本文的重点是过程以及思维方法，框架以及用法不是重点。</p>
<p>本文使用的编程语言是javascript，思路对其他语言也是适用的。</p>
<p>本文主要以函数作为测试对象。</p>
<h2> 环境搭建</h2>
<p>假设项目结构为</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>安装依赖</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li>打开package.json, 修改scripts字段</li>
</ul>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后把测试文件放在test文件夹下，使用<code>yarn test</code> 即可查看测试结果</p>
<h2> 开发</h2>
<p>现在要开发一个函数，根据传入的文件名判断是否为shell文件。</p>
<p>先做好约定：</p>
<ol>
<li>shell文件应该以 <code>.sh</code> 结尾</li>
<li>shell文件不以 <code>.</code> 开头</li>
<li>函数为名 <code>isShellFile</code></li>
</ol>
<p>下面来看下开发步骤是怎么样的。</p>
<h3> 文件初始化</h3>
<p>在src目录下新建 <code>isShellFile.js</code></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后一行代码也不写，在test目录下新建 <code>isShellFile.test.js</code></p>
<p>可以注意到，测试文件的名与源文件名类似，只是中间多了个 <code>.test</code></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 第一个用例</h3>
<p>打开测试文件 <code>test/isShellFile.test.js</code> ，编写第一个用例，也是最普通的一个: <code>bash.sh</code></p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行 <code>yarn test</code> , 结果如下：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>失败是意料之中的，因为 <code>src/isShellFile.js</code> 一行代码也没写，所以测试代码中第5行 <code>isShellFile</code> 无法进行函数调用。</p>
<p>完善源文件<code>src/isShellFile.js</code></p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样 <code>isShellFile</code> 就可以作为函数被调用了。</p>
<p>再运行 <code>yarn test</code></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>又报错了，但这次报错原因跟上次不同，说明有进步。</p>
<p>这次报错原因是，期望函数调用返回值为真 , 但实际没有返回真 。</p>
<p>这是当然的，因为在源文件中，根本没有写返回语句。</p>
<p>为了让测试通过，修改 <code>src/isShellFile.js</code></p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行 <code>yarn test</code> , 测试通过了！</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>把上述修改，提交到版本控制系统中。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> 第二个用例</h3>
<p>观察我们的测试用例，发现太简单了，只有正面的用例，没有反面的、异常的用例</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>test/isShellFile.test.js</code> 添加一个反面的用例</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行 <code>yarn test</code></p>
<p>(可以发现，在开发过程中需要反复执行上述命令，有个偷懒的办法，执行<code>yarn test --watch</code>，即可监听文件变化，自动执行测试用例)</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>报错了，期望返回假，但函数返回的是真。这是因为，源文件中， <code>isShellFile</code> 函数永远返回真！</p>
<p>完善 <code>src/isShellFile.js</code> 逻辑</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试通过了</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>把上述修改提交到版本控制系统</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 第三个用例</h3>
<p>我们再添加一个用例，这次考虑特殊情况： <code>.sh</code> 这种文件，不算是shell文件。</p>
<p>修改 <code>test/isShellFile.test.js</code></p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试不通过</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明逻辑待完善，修改 <code>src/isShellFile.js</code></p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试通过(为精简文章内容，后面不再展示测试通过的输出)，提交代码。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 第四个用例</h3>
<p>按照第三个用例的逻辑， <code>.bash.sh</code> 也不应该是shell文件，那么函数是否能正确判断呢，测试便知。</p>
<p>修改 <code>test/isShellFile.test.js</code></p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>测试不通过</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明逻辑待完善，修改 <code>src/isShellFile.js</code></p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试通过，提交代码。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 第五个用例</h3>
<p>再考虑一种情况，如果 <code>.sh</code> 出现在中间呢？如 <code>bash.sh.txt</code> , 它不应该是shell文件，来看看函数是否能通过测试。</p>
<p>修改 <code>test/isShellFile.test.js</code></p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>测试不通过</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明逻辑待完善，修改 <code>src/isShellFile.js</code></p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试通过，提交代码。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 重构</h3>
<p>我们来观察目前 <code>src/isShellFile.js</code> 的函数逻辑</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于 <code>.bashrc</code> 这样的文件，并不是shell文件，因为它是以 <code>.</code> 开头的。</p>
<p>则通过 <code>filename.startsWith('.')</code> 判断即可，前面的函数调用 <code>filename.lastIndexOf(".")</code> 是多余的。也即，目前的函数判断逻辑不够简明。</p>
<p>下面是一种优化思路：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试通过，提交代码</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意，这个重构示例的重点是：</p>
<ol>
<li>先完成功能，再重构</li>
<li>重构必须要有测试用例，且确保重构后全部测试用例通过</li>
</ol>
<p>至于其他方面，见仁见智，并不是重点。</p>
<h2> 结论</h2>
<p>本文通过代码实例，践行了测试先行的理念。</p>
<p>文中的代码实现不是重点，而是开发过程。</p>
<p>文中 <a href="#Pv5Ni">文件初始化</a> 及 <a href="#Pv5Ni">第一个用例</a> 的内容，尤其值得回味，它体现了两个思路：</p>
<ul>
<li>总是在有一个失败的单元测试后才开始编码</li>
<li>用必要的最小代码让测试通过</li>
</ul>
<p>总的来看，TDD总是处于一个循环中：</p>
<ol>
<li>编写用例</li>
<li>测试失败</li>
<li>编写代码</li>
<li>测试成功</li>
<li>提交代码</li>
<li>重复以上</li>
</ol>
<p>通过这样，功能的实现每次都是最小成本的，功能也是有步骤地、通过迭代完成的，而不是一步登天。</p>
<p>更关键的是，完善的测试用例，是开发者的“守护天使”，有了它们，以后在添加新功能时，修改/重构代码都有了可靠的保障，让开发者可以充满信心，code with confidence😎！</p>
<p>另外，测试用例延伸出的思考还有：</p>
<ol>
<li>不需要追求完美软件，不用过分考虑将来的变化：先设计能符合当前需求的用例，再编码通过测试用例即可。将来有变化，重构代码即可，因为有用例，不用担心改错了。</li>
<li>重构的前提，是存在完善的测试用例。如果没有用例，只有源码，是不敢谈轻易重构，否则就是在走钢丝。</li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>下一代 UI 自动化测试工具 Playwright</title>
      <link>https://levy.vip/software-testing/use-playwright-for-ui-testing.html</link>
      <guid>https://levy.vip/software-testing/use-playwright-for-ui-testing.html</guid>
      <source url="https://levy.vip/rss.xml">下一代 UI 自动化测试工具 Playwright</source>
      <description>下一代 UI 自动化测试工具 Playwright 前言 Playwright 是微软于 2020 年发布的一款 E2E testing 工具，跟社区成熟的 Cypress 相比，稍显年轻。然而 Playwright 的主要优势有： 支持多语言：Node.js、Java、Python，也即它并非是前端工程师专属的工具 开箱即用的代码生成功能（Cypress 现在也支持，不过要修改配置或安装插件） 另外，Playwright 的安装没什么门槛，不像 Cypress 可能需要黑魔法。</description>
      <pubDate>Sun, 07 May 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 下一代 UI 自动化测试工具 Playwright</h1>
<h2> 前言</h2>
<p>Playwright 是微软于 2020 年发布的一款 E2E testing 工具，跟社区成熟的 Cypress 相比，稍显年轻。然而 Playwright 的主要优势有：</p>
<ol>
<li>支持多语言：Node.js、Java、Python，也即它并非是前端工程师专属的工具</li>
<li>开箱即用的代码生成功能（Cypress 现在也支持，不过要修改配置或安装插件）</li>
</ol>
<p>另外，Playwright 的安装没什么门槛，不像 Cypress 可能需要黑魔法。</p>
<p>综上所述，笔者认为 Playwright 是值得在研发过程中引入的一款测试工具，它可以帮助研发、测试团队较平滑地走上自动化测试之路。它适用的典型场景之一，就是做回归测试——测试人员再也不用在界面上使用鼠标进行“点点点”，解放双手，提高测试效率。</p>
<h2> 安装</h2>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>根据命令提示，输入如下：<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/software-test/1683274667037.png" alt="image.png" loading="lazy"><br>
默认会下载所有浏览器，如果没有浏览器兼容性测试的需求，推荐如上图所示，手动安装一个浏览器。</p>
<p>以安装 chromium 为例，相应操作步骤如下：</p>
<ol>
<li>修改配置</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注释掉以下内容：<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/software-test/1683274759403.png" alt="image.png" loading="lazy"></p>
<ol start="2">
<li>安装浏览器</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>等待一段时间即可，如果失败，请重试。<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/software-test/1683274769748.png" alt="image.png" loading="lazy"></p>
<p>推荐再安装 <a href="https://marketplace.visualstudio.com/items?itemName=ms-playwright.playwright" target="_blank" rel="noopener noreferrer">VS Code 插件</a>，获取更好的使用体验。</p>
<h2> 使用</h2>
<h3> 代码生成</h3>
<p>虽然可以参考 <code>example.spec.ts</code>去编写测试用例，但这不是 Playwright 独特之处。Playwright 最引入注目的，是代码生成功能。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上述命令会打开两个浏览器窗口：</p>
<ol>
<li>一个是普通的浏览器界面</li>
<li>另一个是代码生成界面，在前一个窗口进行的任何操作，都会生成相应的代码</li>
</ol>
<p><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/software-test/1683275050705.png" alt="image.png" loading="lazy"><br>
虽然默认生成代码是 Javascript，但可以选择切换语言：<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/software-test/1683275136008.png" alt="image.png" loading="lazy"><br>
注意到可以生成 Pytest 的代码，对测试工程师来说，简直是福音。这也提示我们，Playwright 既可以由前端研发来使用，也可以由测试人员来使用，并不限制使用者的职业身份。</p>
<p>点击"Copy"按钮<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/software-test/1683276292010.png" alt="image.png" loading="lazy"><br>
然后打开代码编辑器，把代码复制进去即可。</p>
<p>点击"Clear"按钮，<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/software-test/1683277483800.png" alt="image.png" loading="lazy"><br>
可以清空本次操作生成的代码，从而开始进行下一次操作的代码生成。</p>
<p>如果是使用 VS Code 插件，点击"Record new"即可。<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/software-test/1683277490131.png" alt="image.png" loading="lazy"></p>
<h3> 修改代码</h3>
<p>生成的代码，最好还是检查一下，也许需要去掉一些多余的操作记录。<br>
如下面的代码，<code>Tab</code>的操作只是人工操作时为了方便而进行的按键，对机器而言，是多余的，应该去掉。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果想基于现在的测试代码，继续生成新的代码，可以使用 VS Code：</p>
<ul>
<li>把光标放到测试用例的最后一行</li>
<li>点击"Record at cursor"，即可继续录制</li>
</ul>
<figure><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/software-test/1683277555357.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure>
<h3> 执行用例</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/software-test/1683277566741.png" alt="image.png" loading="lazy"><br>
如果用例失败了，想查看到底哪里错了，可以用以下命令显示浏览器，查看用例执行过程：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果是使用 VS Code，直接点击运行用例即可。<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/software-test/1683277575650.png" alt="image.png" loading="lazy"><br>
勾选左下角的"Show broswer"，即可显示浏览器。<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/software-test/1683277598218.png" alt="image.png" loading="lazy"></p>
<h3> 调试用例</h3>
<p>对于失败的用例，如何 debug呢？添加 --debug 参数即可。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>点击"Step over" 即可执行下一行代码。<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/software-test/1683277605265.png" alt="image.png" loading="lazy"></p>
<p>如果是使用 VS Code，找到相应的用例，右键出现"Debug Test"，点击即可。<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/software-test/1683277678957.png" alt="image.png" loading="lazy"></p>
<h3> 查看报告</h3>
<p>在执行完用例后，本地会生成目录 <code>playwright-report</code>，可以通过以下命令查看测试报告</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/software-test/1683277713874.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure>
<h2> 常见场景与解决方案</h2>
<h3> 应用登录</h3>
<p>下面给出一个自动登录、并保存用户数据的解决方案。</p>
<p>先创建文件夹，并让 git 忽略它</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>创建 login.ts</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改 playwright.config.ts</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 本地测试与线上CI</h3>
<p>使用环境变量配置 baseURL 即可。</p>
<p>修改 playwright.config.ts</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 超时时间</h3>
<p>默认的超时时间不太够用，建议修改 playwright.config.ts:</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同时要注意拆分用例，没有依赖关系的用例建议拆分开来，避免用例执行时间过长超时。</p>
<h3> 元素选择</h3>
<p>人们对元素选择的第一反应是使用 CSS 或 XPath，但 Playwright 并不鼓励这样使用，因为这些选择器容易改变。较为好的办法是，为测试元素添加专门的属性 testid，如下所示：</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后通过下列方式进行选择：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当然，这种方式会对源代码有侵入。更为折衷的方式是，优先使用下列<a href="https://playwright.dev/docs/locators#locate-by-role" target="_blank" rel="noopener noreferrer">官方推荐的方法</a>进行元素选择，最后再使用业务 class，<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/software-test/1683277746417.png" alt="image.png" loading="lazy"></p>
<p>这里值得一提的是，业务class是针对 Tailwind CSS 这种“解构主义”的纯样式class而言的。你会发现，如果全是 Tailwind 的class，没有业务样式，E2E测试代码很不好写。</p>
<p>如果是使用 VS Code，有辅助办法：</p>
<ol>
<li>点击“Pick locator”<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/software-test/1683421157907.png" alt="image.png" loading="lazy"></li>
<li>切换到浏览器界面，点击目标元素</li>
<li>切回 VS Code，即可看到相应的元素选择代码<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/software-test/1683421163861.png" alt="image.png" loading="lazy"></li>
</ol>
<h3> 声明断言 &amp;&amp; 检查元素是否存在</h3>
<p>生成的代码是没有断言的，因此，很有可能页面报错了，用例执行报告仍然显示成功。为避免这种情况，每个用例至少要有一句断言。</p>
<p>常用的断言是，检查某一元素是否存在：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当然也可以用以下方法，这取决于元素是否可见（元素存在，未必可见）。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意，Node.js 才可以在 locator 里写 CSS 选择器，如果是 Python, 需要这样写：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>更多断言写法，参考<a href="https://playwright.dev/docs/writing-tests#assertions" target="_blank" rel="noopener noreferrer">官方文档</a>。</p>
<h3> 获取第n个元素</h3>
<p>通过定位器得到的元素可能不止一个，可以使用以下代码获得具体某一个元素：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 遍历元素</h3>
<p>使用定位器后，调用<code>.all()</code></p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> 获取元素属性</h3>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 判断子元素数量</h3>
<p>使用 <code>$</code> 及 <code>$$</code> <a href="https://playwright.dev/docs/api/class-elementhandle#element-handle-query-selector" target="_blank" rel="noopener noreferrer">元素选择器</a></p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> 鼠标悬浮</h3>
<p>有些元素是在鼠标悬浮时才显示或创建的，可以使用以下代码</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这里有个问题，自己怎么知道悬浮后显示的元素是否正确地定位到了呢？可以通过下面的小技巧：</p>
<ol>
<li>切换到 codegen 打开的浏览器页面</li>
<li>打开网页控制台（按F12)</li>
<li>鼠标悬浮在目标元素上面，然后右键，如下图所示</li>
</ol>
<figure><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/software-test/1683277759344.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure>
<ol start="4">
<li>点击控制台内部，则此时元素不会丢失 hover 状态，如下图所示</li>
</ol>
<figure><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/software-test/1683277780882.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure>
<ol start="5">
<li>切换到 VS Code</li>
</ol>
<figure><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/software-test/1683277793308.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure>
<h3> 操作剪贴板</h3>
<p>读写剪贴板需要设置权限，下面给出一个判断是否成功从剪贴板获取特定文本的测试用例：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 持续集成</h2>
<p>以 Gitlab CI 为例，说明 Playwright 如何集成进 CI 流水线中。其他方式如 Jenkins，请<a href="https://playwright.dev/docs/ci#jenkins" target="_blank" rel="noopener noreferrer">参考文档</a>。</p>
<p>首先确保已安装 Gitlab Runner 并成功注册，具体操作可以参考<a href="https://levy.vip/docs/git/gitlab-ci.html#%E5%AE%89%E8%A3%85gitlab-runner" target="_blank" rel="noopener noreferrer">安装文档</a>。</p>
<p>端对端的测试耗时较长，并且对环境的稳定性有要求，作为回归测试的实践时，一般倾向于借助定时任务跑测试用例。</p>
<p>新建调度：<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/software-test/1683436020492.png" alt="image.png" loading="lazy"><br>
设置调度时间及环境变量：</p>
<ul>
<li>每 6 小时跑一次</li>
<li>e2e 环境变量的值为 true</li>
</ul>
<figure><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/software-test/1683436027996.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure>
<p>现在可以开始编写 .gitlab-ci.yml，下面只给出测试相关的配置。</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意点：</p>
<ol>
<li>entrypoint 解决的是 <a href="https://gitlab.com/gitlab-org/gitlab-runner/-/issues/27614" target="_blank" rel="noopener noreferrer">shell not found</a> 问题</li>
<li>--ignore-engines 可以在不修改源码的情况下避免安装失败</li>
<li>只有定时调度才会触发该任务的执行</li>
</ol>
<p>再修改 Gitlab Runner 的配置，解决<a href="https://github.com/nodejs/help/issues/1754#issuecomment-1260462271" target="_blank" rel="noopener noreferrer">yarn命令无法运行</a>的问题：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>根据 token 找到对应的 Runner 配置，按照下图所示，把红框处的值设置成 <code>true</code><br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/software-test/1683277800200.png" alt="image.png" loading="lazy"><br>
config.toml 里面可能会有多个 Runner 配置，如何找到要修改哪一个呢？<br>
可以在项目界面，根据下图所示的 token（w8exPBfA） 去查找。<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/software-test/1683277808112.png" alt="image.png" loading="lazy"></p>
<p>修改完后，重启 Gitlab Runner</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>最后，使用 Chromium 可能会出现内存超出限制的问题，需要对 Docker 设置 --ipc=host，配置 .gitlab-ci.yml 如下：</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 其他</h2>
<h3> <strong><a href="http://setup.py" target="_blank" rel="noopener noreferrer">setup.py</a> bdist_wheel did not run successfully</strong></h3>
<p>Python安装时，可能会再现此错误。解决方案如下：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后，再安装</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，重新安装Playwright即可</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>]]></content:encoded>
      <enclosure url="https://raw.gitmirror.com/levy9527/image-holder/main/docs/software-test/1683274667037.png" type="image/png"/>
    </item>
    <item>
      <title>科学上网</title>
      <link>https://levy.vip/tools/how-to-connect-to-internet.html</link>
      <guid>https://levy.vip/tools/how-to-connect-to-internet.html</guid>
      <source url="https://levy.vip/rss.xml">科学上网</source>
      <description>科学上网 说明 AI时代，学会正确上网是必备的技能。不然，谷歌用不了你还能忍，但 New Bing 跟 ChatGPT 都用不了，你还能忍？ 本文讲教大家如何购买稳定的包年上网套餐，为使用各种 AI 工具打下基础。 购买指南 点击进入服务页面, 看到如下页面：</description>
      <pubDate>Mon, 20 Jun 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 科学上网</h1>
<h2> 说明</h2>
<p>AI时代，学会正确上网是必备的技能。不然，谷歌用不了你还能忍，但 New Bing 跟 ChatGPT 都用不了，你还能忍？</p>
<p>本文讲教大家如何购买稳定的包年上网套餐，为使用各种 AI 工具打下基础。</p>
<h2> 购买指南</h2>
<p><a href="https://cp.cloudnx.cc/aff.php?aff=22930" target="_blank" rel="noopener noreferrer">点击进入服务页面</a>, 看到如下页面：<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/tools/1682172119852.png" alt="image.png" loading="lazy"></p>
<p>点击注册账户, 会出现如图提示：<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/tools/1682172124456.png" alt="image.png" loading="lazy"></p>
<p>点击购买产品，就会出现查看产品列表面（为什么要这么绕，因为这是保护措施，避免产品主页被黑）。</p>
<p>推荐购买 Basic 套餐，一个人用的话，学习工作、娱乐看视频，每月 50GB 足够了。多个客户端可以同时在线，反正就是随便玩！算下来，一天不到7毛钱，很划算了。<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/tools/img.png" alt="image.png" loading="lazy"></p>
<p>点击购买后，选择包年，即可享受优惠价格，如下图所示：<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/tools/img_1.png" alt="image.png" loading="lazy"></p>
<p>支持支付宝，购买非常方便。</p>
<h2> 客户端</h2>
<p>支持全平台客户端：</p>
<ul>
<li>Mac 推荐 <a href="https://github.com/yichengchen/clashX/releases" target="_blank" rel="noopener noreferrer">ClashX</a></li>
<li>Windows 推荐 <a href="https://github.com/shadowsocks/shadowsocks-windows/releases" target="_blank" rel="noopener noreferrer">Shadowsocks</a></li>
<li>Android 推荐 V2ray</li>
<li>iOS 推荐 Shadowrocket（花点小钱，使用美区 apple id——文末有分享如何申请）</li>
</ul>
<h2> 导入配置</h2>
<p>以 Shadowsocks 为例。</p>
<p>根据客户端复制相应的订阅地址:<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/tools/1682172131049.png" alt="image.png" loading="lazy"></p>
<p>先禁用系统代理:<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/tools/1682172136278.png" alt="image.png" loading="lazy"></p>
<p>点击在线配置:<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/tools/1682172141931.png" alt="image.png" loading="lazy"></p>
<p>输入URL，点击更新:<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/tools/1682172145950.png" alt="image.png" loading="lazy"></p>
<p>选择一个服务器:<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/tools/1682172149930.png" alt="image.png" loading="lazy"><br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/tools/1682172155098.png" alt="image.png" loading="lazy"></p>
<p>再恢复系统代理，选择PAC模式:<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/tools/1682172160264.png" alt="image.png" loading="lazy"></p>
<p>就可以愉快地上网啦！</p>
<h2> 其他</h2>
<h3> 500 内部代理错误</h3>
<figure><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/tools/1682172164184.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure>
<p>出现此问题时，一般是内网自定义域名不允许走代理，需要禁用掉系统代理:<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/tools/1682172170331.png" alt="image.png" loading="lazy"></p>
<h3> 修改PAC文件</h3>
<p>PAC模式是指：根据规则识别某网站是否需要使用代理访问。</p>
<p>什么时候需要修改PAC文件呢？</p>
<ul>
<li>当某个网站不想走代理</li>
<li>设置某网站一定走代理</li>
</ul>
<p>操作如下（以Shadowsocks为例）:<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/tools/1682172175096.png" alt="" loading="lazy"></p>
<p>按下图所示，模仿添加，即可实现遇到下列网站时选择直连:<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/tools/1682172179825.png" alt="" loading="lazy"></p>
<p>不走代理的示例修改:</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>必走代理的示例修改:</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>保存后记得重启软件。</p>
<h3> 使用 New Bing</h3>
<p>再给一个配置 Clash 使用 New Bing 的示例：<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/tools/1682172184433.png" alt="image.png" loading="lazy"><br>
编辑文件：<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/tools/1682172189506.png" alt="image.png" loading="lazy"><br>
添加如下设置：</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>效果如下图：<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/tools/1682172193803.png" alt="image.png" loading="lazy"><br>
之后再重新加载配置，即可打开 New Bing 页面。</p>
<p>但要让 New Bing 回答问题，还要设置全局模式，并选择正确的节点，如图所示。<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/tools/1682172198850.png" alt="image.png" loading="lazy"></p>
<h3> 申请美区apple id</h3>
<p>在官网创建申请: <a href="https://appleid.apple.com/account" target="_blank" rel="noopener noreferrer">https://appleid.apple.com/account</a></p>
<p>不要用 qq邮箱, 注册不会的成功的。</p>
<p>需要注意的是，地区请选择：Alaska，否则后续充值的话要交税😅</p>
<p>相关的地址信息，可以使用<a href="https://www.prepostseo.com/tool/fake-address-generator" target="_blank" rel="noopener noreferrer">美国地址生成器</a>，按如图所示选择，再点击生成即可获得注册时的必要信息。这样就不需要输入信用卡信息。<br>
<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/tools/1682172198851.png" alt="image.png" loading="lazy"></p>
]]></content:encoded>
      <enclosure url="https://raw.gitmirror.com/levy9527/image-holder/main/docs/tools/1682172119852.png" type="image/png"/>
    </item>
  </channel>
</rss>