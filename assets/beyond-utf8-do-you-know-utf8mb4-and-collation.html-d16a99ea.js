import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{r as s,o as t,c as o,e as i,d as c,f as e}from"./app-3ba09f41.js";const r={},l=e('<h1 id="beyond-utf-8-do-you-know-utf8mb4-and-utf8mb4-unicode-ci" tabindex="-1"><a class="header-anchor" href="#beyond-utf-8-do-you-know-utf8mb4-and-utf8mb4-unicode-ci" aria-hidden="true">#</a> Beyond UTF-8, do you know utf8mb4 and utf8mb4_unicode_ci?</h1><h2 id="background" tabindex="-1"><a class="header-anchor" href="#background" aria-hidden="true">#</a> Background</h2><p>Look at the DDL below, can you tell the meaning of <code>CHARSET=utf8mb4</code> and <code>COLLATE=utf8mb4_general_ci</code>?</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>my_table<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>\n  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">bigint</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>\n  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span>\n<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4 <span class="token keyword">COLLATE</span><span class="token operator">=</span>utf8mb4_general_ci<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That is the knowledge that today I want to share with you.</p>',5),d=e(`<h2 id="utf8mb4-utf-8-multibyte-4-byte" tabindex="-1"><a class="header-anchor" href="#utf8mb4-utf-8-multibyte-4-byte" aria-hidden="true">#</a> utf8mb4(UTF-8 MultiByte 4-Byte)</h2><p>UTF-8 was initially designed to support characters from the Unicode standard, which includes characters from various writing systems used across different languages.</p><p>And the original UTF-8 encoding was Basic Multilingual Plane (BMP), which is a specific range of Unicode code points from U+0000 to U+FFFF, including a total of 65,536 code points, using 1 to 3 bytes.</p><p>However, as the Unicode standard expanded to include more characters beyond the BMP, there arose a need for a new encoding to accommodate these additional characters. This is where utf8mb4 comes into play.</p><p>The key differences between utf8 and utf8mb4 are:</p><ol><li><strong>Character Range:</strong> utf8mb4 supports the entire Unicode character range, while utf8 is limited to the BMP.</li><li><strong>Number of Bytes:</strong> utf8 characters can be stored using 1 to 3 bytes, while utf8mb4 characters can use up to 4 bytes.</li></ol><p>In practical terms, if you want to store or display characters beyond the BMP (e.g., emojis) in your MySQL database, you need to use the utf8mb4 character set.</p><h2 id="utf8mb4-unicode-ci" tabindex="-1"><a class="header-anchor" href="#utf8mb4-unicode-ci" aria-hidden="true">#</a> utf8mb4_unicode_ci</h2><p>This is about Collation.</p><p>Collation determines the mechanism of string comparisons, specifically regarding sorting and searching.</p><p>Let&#39;s take **utf8mb4_unicode_ci <strong>and</strong> utf8mb4_general_ci **for examples. Since <strong>ci</strong> stands for case-insensitive, both of them ignore differences in lettercase.</p><p>And their main differences are:</p><ol><li><strong>utf8mb4_unicode_ci</strong>: <ul><li>This collation provides a more comprehensive and accurate comparison algorithm based on the Unicode standard.</li><li>It is generally more suitable when dealing with multilingual applications or when precise sorting and comparisons are required.</li></ul></li><li><strong>utf8mb4_general_ci</strong>: <ul><li>This collation is generally faster for sorting and comparisons.</li><li>Its comparison algorithm would also ignore differences in certain character variations (such as accents or diacritics).</li><li>However, it may not produce accurate results when dealing with some complex language-specific sorting and comparison rules, because it might treat accented characters as identical to their unaccented counterparts.</li></ul></li></ol><p>And here&#39;re some examples of Accented Characters in Latin-based Languages:</p><ul><li>á (acute accent) - Unaccented: a</li><li>ä (umlaut/diaeresis) - Unaccented: a</li></ul><p>As a general recommendation, <strong>utf8mb4_unicode_ci</strong> is often considered a better default choice, especially in applications with internationalization (i18n) requirements. It provides more accurate sorting and comparison results for a wide range of languages and characters.<br> However, there may be some specific use cases where <strong>utf8mb4_general_ci</strong> is preferred, such as when performance is a critical concern and language-specific sorting rules are not essential.</p><h2 id="some-tips" tabindex="-1"><a class="header-anchor" href="#some-tips" aria-hidden="true">#</a> Some tips</h2><p>You can use the following command to check default collation for your MySQL database:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SHOW</span> VARIABLES <span class="token operator">LIKE</span> <span class="token string">&#39;collation_database&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>You may encounter this error Illegal mix of collations:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">select</span> <span class="token function">id</span> from my_table where <span class="token assign-left variable">tenant_id</span><span class="token operator">=</span>@target_tenant_id<span class="token punctuation">;</span>

Illegal mix of collations <span class="token punctuation">(</span>utf8mb4_unicode_ci,IMPLICIT<span class="token punctuation">)</span> 
and <span class="token punctuation">(</span>utf8mb4_general_ci,IMPLICIT<span class="token punctuation">)</span> <span class="token keyword">for</span> operation <span class="token string">&#39;=&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>and here&#39;s the solution, using the keyword <strong>COLLATE</strong>:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SET</span> <span class="token variable">@target_tenant_id</span> :<span class="token operator">=</span> <span class="token string">&#39;your_value&#39;</span> <span class="token keyword">COLLATE</span> utf8mb4_unicode_ci<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,23);function p(u,m){const a=s("BiliBili");return t(),o("div",null,[l,i(" more "),c(a,{bvid:"BV1Rp4y1g7Uw"}),d])}const g=n(r,[["render",p],["__file","beyond-utf8-do-you-know-utf8mb4-and-collation.html.vue"]]);export{g as default};
