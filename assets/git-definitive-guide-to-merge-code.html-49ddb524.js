import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as a,e as l}from"./app-2975b33b.js";const t={},r=l('<h1 id="git代码合并指南" tabindex="-1"><a class="header-anchor" href="#git代码合并指南" aria-hidden="true">#</a> Git代码合并指南</h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>合并时代码常见问题是冲突、提交错代码以及合并错分支，本文将说明这些问题的解决方案，为代码合并打下坚实的基础，以应对未来可能出现的分支模型多样化、协作流程复杂化的场景。<br> 在说明问题前，先定义一些概念：</p><ul><li>feat：指代功能分支</li><li>dev 与 test：指代两条不同的长驻分支，它们具有以下特点： <ul><li>受保护，不能直接推送</li><li>不会被删除</li><li>二者之间不直接合并，也即合并方式一般是 feat -&gt; dev，feat -&gt; test</li></ul></li><li>MR：merge request。代码合并请求</li></ul><p>以及说明本文解决冲突涉及到的工具及平台：</p><ul><li>使用 IDEA 解决冲突（JetBrains系列的工具都适用）</li><li>使用 GitLab 托管代码</li></ul><h2 id="功能分支合并长驻分支冲突" tabindex="-1"><a class="header-anchor" href="#功能分支合并长驻分支冲突" aria-hidden="true">#</a> 功能分支合并长驻分支冲突</h2><p>这是最常见的场景：feat1 与 feat2 并行开发，当提交MR（ feat1 -&gt; dev ）时，发现冲突了，无法合并。<br> 下面先给出解决思路，再给出图文操作步骤。</p><h3 id="解决思路" tabindex="-1"><a class="header-anchor" href="#解决思路" aria-hidden="true">#</a> 解决思路</h3><ol><li>因为合并的方向是 feat -&gt; dev，所以解决冲突应该是在本地 dev 合并 feat</li><li>又因为本地 dev 不能向远程推送，因而需要基于 dev 切一个新分支 conflict/resolved</li><li>推送 conflict/resolved 分支</li><li>提交 MR：conflict/resolved -&gt; dev</li></ol><h3 id="操作步骤" tabindex="-1"><a class="header-anchor" href="#操作步骤" aria-hidden="true">#</a> 操作步骤</h3><ol><li>本地切换到 dev 分支，更新代码</li><li>合并相应的 feat 分支</li></ol><figure><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682344287512.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol><li>弹出冲突提示，点击合并</li></ol><figure><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682344293749.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol><li>首先处理无冲突的代码，点击下图红框处</li></ol><figure><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682344298158.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol><li>再根据情况，选择合并代码或丢弃代码。</li></ol><figure><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682344303228.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol><li>在 dev 分支上切出新分支，推荐命名为 conflict/xxx</li></ol><figure><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682344307534.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol><li>推送代码，提交MR（conflict -&gt; dev)，记得勾选合并后删除</li></ol><figure><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682344312127.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="功能分支被污染" tabindex="-1"><a class="header-anchor" href="#功能分支被污染" aria-hidden="true">#</a> 功能分支被污染</h2><p>分支一多，人难免失误，很可能造成 feat 分支被污染，即当提MR（feat -&gt; test）时，出现不想合并到 test的代码或提交记录。<br> 这种场景的出现可能有多种原因：</p><ol><li>研发过程中出现误操作，如出现了 dev -&gt; feat 的合并</li><li>feat 分支的基线分支搞错了，如从 dev 切出了 feat</li></ol><h3 id="解决思路-1" tabindex="-1"><a class="header-anchor" href="#解决思路-1" aria-hidden="true">#</a> 解决思路</h3><ol><li>基于目标分支如 (test 分支）切一个干净的分支 clean</li><li>使用 cherry-pick，挑选自己想要的提交</li><li>再提交MR（clean -&gt; test）</li></ol><p>注意的是，要按提交顺序进行 cherry-pick，以避免遗漏或出错。</p><h3 id="操作步骤-1" tabindex="-1"><a class="header-anchor" href="#操作步骤-1" aria-hidden="true">#</a> 操作步骤</h3><ol><li>更新目标分支（在这里是 test）</li></ol><figure><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682344317048.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol><li>基于 test 切新分支，这里示例命名为：clean</li></ol><figure><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682344322358.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol><li>在拥有最新代码的分支（这里是 feat） 找到并选中相应的提交记录</li><li>右键，点击 Cherry-Pick<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682344326902.png" alt="" loading="lazy"></li><li>则相应的提交记录就会合并到 clean 分支</li><li>推送 clean，提交MR（clean -&gt; test）</li></ol><h2 id="挑选别的分支部分代码合并" tabindex="-1"><a class="header-anchor" href="#挑选别的分支部分代码合并" aria-hidden="true">#</a> 挑选别的分支部分代码合并</h2><p>有可能会出现这样一种场景：</p><ul><li>最新的生产代码里，假设版本为v1.3.0，包含了 feat 分支的代码</li><li>为了减少分支的冗余，代码一旦上生产后，就会清除相应的功能分支，也即此时仓库里没有 feat 分支了</li><li>客户方部署的版本代码为 v1.1.0，而客户不想升级到最新的版本，只想要 feat 分支相应的功能</li></ul><p>此时该如何是好？</p><h3 id="解决思路-2" tabindex="-1"><a class="header-anchor" href="#解决思路-2" aria-hidden="true">#</a> 解决思路</h3><p>其实只要触发“挑选”关键字，就可以考虑使用 cherry-pick。<br> feat 分支就算被删了，只要提交记录还在，那也没关系：</p><ul><li>在v1.3.0 的代码库中，按分支筛选，找出 feat 分支对应的提交记录</li><li>通过 cherry-pick 把 feat 分支的代码合并到客户方的代码分支即可</li></ul><p>注意：毕竟跨越了版本，无法保证合并过去后的代码一定能正确工作，需要进行充分地测试。</p><h3 id="操作步骤-2" tabindex="-1"><a class="header-anchor" href="#操作步骤-2" aria-hidden="true">#</a> 操作步骤</h3><p>此操作本质还是 cherry-pick，参考前面 cherry-pick 的示例即可。</p>',45),o=[r];function d(c,n){return e(),a("div",null,o)}const f=i(t,[["render",d],["__file","git-definitive-guide-to-merge-code.html.vue"]]);export{f as default};
