const e=JSON.parse('{"key":"v-1e5872c4","path":"/git/git-best-pratices.html","title":"Git最佳实践","lang":"zh-CN","frontmatter":{"date":"2020-09-21T00:00:00.000Z","tag":"Git","description":"2020-09-21 Git最佳实践 精简提交 一次只提交一个“瘦”的功能，同时只包含相关改动文件。例如，对于两个错误的修复应该进行两次不同的提交。 如果发现写提交信息时，需要写两点以上; &nbsp;则可以考虑拆分提交。 频繁提交 一次提交应只对应一个“瘦”的功能。从而达到频繁提交的目标。 经常性地提交改动可以确保不会出现特别庞大的提交，同时也可以比较精准地对应到所需要的改动上。 此外，通过频繁地提交也可以比较快速地和其他开发人员来共享你的改动。同样也会避免在整合代码时出现过多的合并冲突。相反的，非常庞大的提交会加大整合代码时出现冲突的风险，解决这些冲突也会非常复杂。","head":[["meta",{"property":"og:url","content":"https://levy.vip/git/git-best-pratices.html"}],["meta",{"property":"og:site_name","content":"levy"}],["meta",{"property":"og:title","content":"Git最佳实践"}],["meta",{"property":"og:description","content":"2020-09-21 Git最佳实践 精简提交 一次只提交一个“瘦”的功能，同时只包含相关改动文件。例如，对于两个错误的修复应该进行两次不同的提交。 如果发现写提交信息时，需要写两点以上; &nbsp;则可以考虑拆分提交。 频繁提交 一次提交应只对应一个“瘦”的功能。从而达到频繁提交的目标。 经常性地提交改动可以确保不会出现特别庞大的提交，同时也可以比较精准地对应到所需要的改动上。 此外，通过频繁地提交也可以比较快速地和其他开发人员来共享你的改动。同样也会避免在整合代码时出现过多的合并冲突。相反的，非常庞大的提交会加大整合代码时出现冲突的风险，解决这些冲突也会非常复杂。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-13T12:04:37.000Z"}],["meta",{"property":"article:author","content":"levy"}],["meta",{"property":"article:tag","content":"Git"}],["meta",{"property":"article:published_time","content":"2020-09-21T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-09-13T12:04:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Git最佳实践\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-09-21T00:00:00.000Z\\",\\"dateModified\\":\\"2023-09-13T12:04:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"levy\\"}]}"]]},"headers":[{"level":2,"title":"精简提交","slug":"精简提交","link":"#精简提交","children":[]},{"level":2,"title":"频繁提交","slug":"频繁提交","link":"#频繁提交","children":[]},{"level":2,"title":"不要提交不完整的改动","slug":"不要提交不完整的改动","link":"#不要提交不完整的改动","children":[]},{"level":2,"title":"提交前测试那些改动","slug":"提交前测试那些改动","link":"#提交前测试那些改动","children":[]},{"level":2,"title":"版本控制不是备份系统","slug":"版本控制不是备份系统","link":"#版本控制不是备份系统","children":[]},{"level":2,"title":"Github实例","slug":"github实例","link":"#github实例","children":[{"level":3,"title":"一个功能对应一个分支","slug":"一个功能对应一个分支","link":"#一个功能对应一个分支","children":[]},{"level":3,"title":"提交“瘦”的PR","slug":"提交-瘦-的pr","link":"#提交-瘦-的pr","children":[]},{"level":3,"title":"使用正确的标题","slug":"使用正确的标题","link":"#使用正确的标题","children":[]},{"level":3,"title":"根据模板填写PR描述","slug":"根据模板填写pr描述","link":"#根据模板填写pr描述","children":[]},{"level":3,"title":"自动关闭issue","slug":"自动关闭issue","link":"#自动关闭issue","children":[]},{"level":3,"title":"1+2 review 规则","slug":"_1-2-review-规则","link":"#_1-2-review-规则","children":[]},{"level":3,"title":"礼貌提问","slug":"礼貌提问","link":"#礼貌提问","children":[]}]},{"level":2,"title":"学习资源","slug":"学习资源","link":"#学习资源","children":[]}],"git":{"createdTime":1694606677000,"updatedTime":1694606677000,"contributors":[{"name":"levy","email":"897895407@qq.com","commits":1}]},"readingTime":{"minutes":3.86,"words":1158},"filePathRelative":"git/git-best-pratices.md","localizedDate":"2020年9月21日","excerpt":"<p>2020-09-21</p>\\n<h1> Git最佳实践</h1>\\n<h2> 精简提交</h2>\\n<p>一次只提交一个“瘦”的功能，同时只包含相关改动文件。例如，对于两个错误的修复应该进行两次不同的提交。<br>\\n如果发现写提交信息时，需要写两点以上; &nbsp;则可以考虑拆分提交。</p>\\n<h2> 频繁提交</h2>\\n<p>一次提交应只对应一个“瘦”的功能。从而达到频繁提交的目标。<br>\\n经常性地提交改动可以确保不会出现特别庞大的提交，同时也可以比较精准地对应到所需要的改动上。</p>\\n<p>此外，通过频繁地提交也可以比较快速地和其他开发人员来共享你的改动。同样也会避免在整合代码时出现过多的合并冲突。相反的，非常庞大的提交会加大整合代码时出现冲突的风险，解决这些冲突也会非常复杂。</p>","autoDesc":true}');export{e as data};
