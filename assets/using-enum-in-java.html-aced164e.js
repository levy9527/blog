import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,a as n,b as s,d as e,f as t}from"./app-6fbd5d3f.js";const i={},u=t(`<h1 id="枚举的推荐实践" tabindex="-1"><a class="header-anchor" href="#枚举的推荐实践" aria-hidden="true">#</a> 枚举的推荐实践</h1><h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景</h2><p>定义枚举的动机在于，可以作为常量，避免魔法值的出现。并且具有相应的类型，方便检索、与代码提示。</p><p>而在使用过程中，一种符合直觉的想法是，期望枚举在具备基本的 key-value 的功能外，还能够承载更多的信息。</p><p>本文推荐，不要在枚举中定义数字，直接使用枚举名即可！</p><h2 id="java" tabindex="-1"><a class="header-anchor" href="#java" aria-hidden="true">#</a> Java</h2><h3 id="极简实现" tabindex="-1"><a class="header-anchor" href="#极简实现" aria-hidden="true">#</a> 极简实现</h3><p>理想状态下，枚举就应该这样简单！</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">SEX</span> <span class="token punctuation">{</span>
  <span class="token constant">MALE</span><span class="token punctuation">,</span>
  <span class="token constant">FEMALE</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="常见实现" tabindex="-1"><a class="header-anchor" href="#常见实现" aria-hidden="true">#</a> 常见实现</h3><p>然而，代码库中常见的实现是，使用 enum 关键字定义枚举类型，并写下枚举名以及相应的绑定值</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">SEX</span> <span class="token punctuation">{</span>
  <span class="token function">MALE</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;this is description for male&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">FEMALE</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;this is description for female&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>就这点代码，从业务的角度讲，逻辑已经实现了。</p><p>但从具体编程语言（Java）的角度讲，工作还没有完成：此时，编译器会提示报错，因为缺少构造函数。</p><p>站在调用方的角度，就会发现，我们没有方法拿到枚举里的定义值，也即<code>(1, &quot;this is description for male&quot;)</code> ，</p><p>因此，还需要编写以下内容：</p><ul><li>final 的成员变量</li><li>在构造函数中为成员变量赋值</li><li>定义成员变量相应的 getter 方法</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Integer</span> code<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> desc<span class="token punctuation">;</span>

  <span class="token class-name">MyEnum</span><span class="token punctuation">(</span><span class="token keyword">int</span> code<span class="token punctuation">,</span> <span class="token class-name">String</span> desc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>desc <span class="token operator">=</span> desc<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> code<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> desc<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前面说到，我们期望枚举里有 key-value 的功能，则还要再定义 <code>getValueByKey</code> 方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getDescByCode</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> code<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MyEnum</span> e <span class="token operator">:</span> <span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> e<span class="token punctuation">.</span><span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有了上面的方法，我们才可以通过传入 code，返回相应的 desc</p><p>如果反过来，我们想通过传入 desc 返回相应的 code 呢？还得再写一个方法！真是烦琐！</p><h3 id="更好的方式" tabindex="-1"><a class="header-anchor" href="#更好的方式" aria-hidden="true">#</a> 更好的方式</h3><p>前面我们可以看到，当关键逻辑写出来以后，还要写那么多模板代码，简直索然无味。</p><p>为什么把简单的事情搞复杂，有没有更好的方式？</p><p>需要了解到以下事实，枚举类型提供了通过枚举名获得枚举值的方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">MyEnum</span> myEnum <span class="token operator">=</span> <span class="token class-name">MyEnum</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">&quot;MALE&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myEnum<span class="token punctuation">.</span><span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也就是说，如果使用 <code>valueOf</code>的方式来定位枚举值，就可以通过 getter 方法来获取自定义的业务值，不需要再写自定义的 getValueByKey 方法。</p><h3 id="为什么还要定义数字" tabindex="-1"><a class="header-anchor" href="#为什么还要定义数字" aria-hidden="true">#</a> 为什么还要定义数字？</h3><p>另外，再看之前的枚举定义，为什么要定义 <code>MALE(1, &quot;this is description for male&quot;)</code>呢？<br> 在 <code>MALE</code>本身已经有含义的情况下，为何还要再设置一个数字呢？</p><p>这个数字导致了不必要的转换：</p><ol><li>前端传数字 -&gt; 后端转成枚举</li><li>后端再把枚举转成数字 -&gt; 存入数据库</li></ol><p>最蛋疼的就是，select 数据库数据的时候，全是1、2、3，都不知道什么意思。</p><p>能不能不要这个数字？ 直接把定义好的枚举名，存入数据库呢？</p><p>表面上看，这是因为数据库定义如此——从数据库查出来是数字，因而要根据数字去获取别的业务信息。</p><p>然而，我再问了一下，得到的回答是： 上述做法是设计如此。为了节省存储空间及提升查询性能，才在数据库设置的数字，而不是直接存储字符串。</p><p>这就引出了另一个问题，需要这样做来提高性能吗？对此，我们接下来要进行数据库层面的讨论。</p><h2 id="数据库" tabindex="-1"><a class="header-anchor" href="#数据库" aria-hidden="true">#</a> 数据库</h2><p>数据库本身是支持检举类型的，下文以 MySQL 为例进行说明。</p><p>枚举相关的 SQL 语句示例：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 建表</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> shirts <span class="token punctuation">(</span>
  name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  size <span class="token keyword">ENUM</span><span class="token punctuation">(</span><span class="token string">&#39;x-small&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;small&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;medium&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;large&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;x-large&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 插入</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> shirts <span class="token punctuation">(</span>name<span class="token punctuation">,</span> size<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;dress shirt&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;large&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;t-shirt&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;medium&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">&#39;polo shirt&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;small&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 查询</span>
<span class="token keyword">SELECT</span> name<span class="token punctuation">,</span> size <span class="token keyword">FROM</span> shirts <span class="token keyword">WHERE</span> size <span class="token operator">=</span> <span class="token string">&#39;medium&#39;</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">---------+--------+</span>
<span class="token operator">|</span> name    <span class="token operator">|</span> size   <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">---------+--------+</span>
<span class="token operator">|</span> t<span class="token operator">-</span>shirt <span class="token operator">|</span> medium <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">---------+--------+</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,41),r=n("br",null,null,-1),d={href:"https://dev.mysql.com/doc/refman/5.7/en/storage-requirements.html#data-types-storage-reqs-numeric",target:"_blank",rel:"noopener noreferrer"},k=t(`<p>由上可知，为了节省空间及提高查询性能，在数据库层面使用数字代表枚举进行存储，是不必要的，因为数据库本身已有相应的功能。</p><h3 id="排序特点" tabindex="-1"><a class="header-anchor" href="#排序特点" aria-hidden="true">#</a> 排序特点</h3><p>排序规则如下（如执行order by 时）：</p><ul><li>NULL 在最前面，&#39;&#39; 次之，接下来是非空的枚举值</li><li>定义枚举值时的顺序，就是排序的顺序</li></ul><p>推荐使用以下技巧：</p><ul><li>按字母表顺序定义检举值</li><li>把检举值转换成字符串再排序 ORDER BY CAST(col AS CHAR) or ORDER BY CONCAT(col)</li></ul><h3 id="添加新值" tabindex="-1"><a class="header-anchor" href="#添加新值" aria-hidden="true">#</a> 添加新值</h3><p>使用枚举类型的最大的问题是，后续添加新值时需要执行 alter table。</p><p>如果枚举值经常变动且对枚举值的顺序要求（添加的新值不一定在最后面），则不建议使用枚举类型。</p><p>否则的话，可以使用枚举类型。</p><p>因为 alter table 的机制是：</p><ol><li>创建临时表 t&#39;</li><li>插入数据</li><li>删除当前表 t</li><li>把 t&#39; 重命名为 t</li></ol><p>这在表数据量较大时，会导致表被锁较长时间而不可用。</p><p>可以使用以下技巧进行更新，记得严格按照顺序执行：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">database</span><span class="token punctuation">.</span>shirts_tmp <span class="token operator">LIKE</span> <span class="token keyword">database</span><span class="token punctuation">.</span>shirts<span class="token punctuation">;</span>
<span class="token comment">-- 在最后添加了 &#39;xx-large&#39;</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token keyword">database</span><span class="token punctuation">.</span>shirts_tmp <span class="token keyword">MODIFY</span> <span class="token keyword">COLUMN</span> <span class="token keyword">ENUM</span><span class="token punctuation">(</span><span class="token string">&#39;x-small&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;small&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;medium&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;large&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;x-large&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;xx-large&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

FLUSH <span class="token keyword">TABLES</span> <span class="token keyword">WITH</span> <span class="token keyword">READ</span> <span class="token keyword">LOCK</span><span class="token punctuation">;</span>

<span class="token keyword">SHOW</span> variables <span class="token operator">LIKE</span> <span class="token string">&#39;datadir&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> <span class="token keyword">DATABASE</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> databaseName<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 登录 MySQL 所在机器</span>
<span class="token comment"># 根据上面最后两行SQL，进入相关目录</span>
<span class="token builtin class-name">cd</span> <span class="token variable">\${datadir}</span>/<span class="token variable">\${databaseName}</span>

<span class="token function">mv</span> shirts shirts_old<span class="token punctuation">;</span>
<span class="token function">mv</span> shirts_tmp shirts<span class="token punctuation">;</span>
<span class="token function">mv</span> shirts_old shirts_tmp<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">UNLOCK</span> <span class="token keyword">TABLES</span><span class="token punctuation">;</span>

<span class="token comment">-- 可以在删除前检查两张表的定义是否已交换</span>
<span class="token comment">-- select * from database.shirts;</span>
<span class="token comment">-- select * from database.shirts_tmp;</span>

<span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">database</span><span class="token punctuation">.</span>shirts_tmp<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果在 Navicat 或 DBeaver等图形工具上看不出表结构的变化，请刷新数据库。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>本文主要目的是想消除枚举中对魔法数字的误用，试图让 Java 代码、数据库数据、以及前端 API 传参都使用可理解、可读性强的枚举值。</p><p>在数据库层面，对于枚举类型字段的注意点，本文也做了说明。如果实在不想每次添加新的枚举值都执行 <code>alter table</code>语句，贪图省事，使用 varchar 存储也未尝不可。</p><p>总之，本文想强调的是 Java 代码与数据库数据展示内容的一致性，至于数据库的存储格式，是见仁见智的。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,23),v={href:"https://www.baeldung.com/java-enum-values",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.baeldung.com/a-guide-to-java-enums",target:"_blank",rel:"noopener noreferrer"},b={href:"https://dev.mysql.com/doc/refman/5.7/en/enum.html",target:"_blank",rel:"noopener noreferrer"},h={href:"https://www.oreilly.com/library/view/high-performance-mysql/9781449332471/",target:"_blank",rel:"noopener noreferrer"};function g(y,w){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[s("存储方式：转换成数字存储，查询时再转换成字符串"),r,n("a",d,[s("存储空间"),e(a)]),s("：1 or 2 bytes (65,535 values maximum)")]),k,n("ul",null,[n("li",null,[n("a",v,[s("https://www.baeldung.com/java-enum-values"),e(a)])]),n("li",null,[n("a",m,[s("https://www.baeldung.com/a-guide-to-java-enums"),e(a)])]),n("li",null,[n("a",b,[s("https://dev.mysql.com/doc/refman/5.7/en/enum.html"),e(a)])]),n("li",null,[n("a",h,[s("High Performance MySQL 3rd Edition"),e(a)])])])])}const _=p(i,[["render",g],["__file","using-enum-in-java.html.vue"]]);export{_ as default};
