import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o,c as r,e as u,a as n,b as a,d as s,w as p,f as t}from"./app-ab8c151e.js";const d={},m=n("h1",{id:"gitlab-ci",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#gitlab-ci","aria-hidden":"true"},"#"),a(" GitLab CI")],-1),k=n("h2",{id:"前言",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),a(" 前言")],-1),g=n("p",null,"GitLab 在企业内部还是比较通用的，其 CI 用起来个人也觉得比 Jenkins 顺手，因此在这里分享一下相关的实践经验。",-1),v=t(`<h2 id="安装与配置" tabindex="-1"><a class="header-anchor" href="#安装与配置" aria-hidden="true">#</a> 安装与配置</h2><h3 id="gitlab-runner-安装" tabindex="-1"><a class="header-anchor" href="#gitlab-runner-安装" aria-hidden="true">#</a> GitLab Runner 安装</h3><p>进行 Gitlab CI 的第一步是要安装 GitLab Runner。如果公司、团队内部已安装过，可以跳过这一步。</p><p>这里推荐使用 docker 的方式安装，复制以下命令执行即可：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> gitlab-runner <span class="token parameter variable">--restart</span> always <span class="token punctuation">\\</span>
  <span class="token parameter variable">-v</span> /var/run/docker.sock:/var/run/docker.sock <span class="token punctuation">\\</span>
  <span class="token parameter variable">-v</span> /srv/gitlab-runner/config:/etc/gitlab-runner <span class="token punctuation">\\</span>
  gitlab/gitlab-runner:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),b={href:"https://docs.gitlab.com/runner/install/docker.html#install-the-docker-image-and-start-the-container",target:"_blank",rel:"noopener noreferrer"},h=n("h3",{id:"gitlab-runner-注册",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#gitlab-runner-注册","aria-hidden":"true"},"#"),a(" GitLab Runner 注册")],-1),y=n("p",null,"GitLab Runner 安装以后，还要注册到 GitLab 的项目中才能使用，此步骤需要项目的 Maintainer 权限。",-1),f=n("p",null,[a("在注册前，可以先检查下，自己的项目中是否已有可以使用的 GitLab Runner（如果看不到 Settings，说明没有权限），如果有就记住其名字，然后跳过此步骤。"),n("br"),n("img",{src:"https://raw.gitmirror.com/levy9527/image-holder/main/docs/software-test/1683277808112.png",alt:"",loading:"lazy"})],-1),_={href:"https://docs.gitlab.com/ee/ci/runners/runners_scope.html",target:"_blank",rel:"noopener noreferrer"},x=n("br",null,null,-1),E=n("img",{src:"https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682387098778.png",alt:"image.png",loading:"lazy"},null,-1),j=t(`<p>下面以 Specific Runner 为例进行说明。</p><p>进入项目如下界面：<br><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682387102770.png" alt="image.png" loading="lazy"></p><p>拿到 URL 及 token：<br><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682387107092.png" alt="image.png" loading="lazy"></p><p>执行命令进行注册:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">--rm</span> <span class="token parameter variable">-it</span> <span class="token parameter variable">-v</span> /srv/gitlab-runner/config:/etc/gitlab-runner gitlab/gitlab-runner register
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>根据提示输入内容，其中 URL 及 token 就是前面步骤中 Web 界面获取的信息。</p><p>命令行操作示例如下，注意两点即可：</p><ol><li>最重要的就是 URL 与 token，需要根据实际情况填写</li><li>其他参数可以与示例完全一致</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Enter the GitLab instance URL <span class="token punctuation">(</span>for example, https://gitlab.com/<span class="token punctuation">)</span>:
https://your-gitlab

Enter the registration token:
your-token

Enter a description <span class="token keyword">for</span> the runner:
<span class="token function">java</span>

Enter tags <span class="token keyword">for</span> the runner <span class="token punctuation">(</span>comma-separated<span class="token punctuation">)</span>:
<span class="token function">java</span>


Enter an executor: custom, shell, virtualbox, kubernetes, docker, docker-ssh, parallels, ssh, docker+machine, docker-ssh+machine:
<span class="token function">docker</span>

Enter the default Docker image <span class="token punctuation">(</span>for example, ruby:2.6<span class="token punctuation">)</span>:
maven:3.6.3-openjdk-8
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注册成功后，显示示例如下：<br><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682387118062.png" alt="image.png" loading="lazy"></p><h3 id="提交-gitlab-ci-yml" tabindex="-1"><a class="header-anchor" href="#提交-gitlab-ci-yml" aria-hidden="true">#</a> 提交.gitlab-ci.yml</h3><p>要想 Gitlab Runner 工作，还需要在项目根目录提交 .gitlab-ci.yml 文件。</p><p>建议提交.gitlab-ci.yml文件前，在 GitLab 先进行语法校验。<br><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682388474604.png" alt="image.png" loading="lazy"></p><p>如果错误，会有提示。<br><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682388478169.png" alt="image.png" loading="lazy"></p><p>如果配置成功，会看到 GitLab 的图标：<br><img src="https://raw.githubusercontent.com/levy9527/image-holder/main/md-image-kit/1695784435960-bdac2473-54cd-4c42-85f3-cfbf18e21274.png" alt="" loading="lazy"></p><p>如果图标如下所示，说明文件有误，比如文件名开头多了个空格🤦‍♂️：<br><img src="https://raw.githubusercontent.com/levy9527/image-holder/main/md-image-kit/1695784470379-51a5693b-ecfc-4b7f-9b67-5b0b00ccf8d0.png" alt="" loading="lazy"></p><p>以上就是 GitLab CI 所需的基本环境配置，接下来进行实战内容讲解。</p><h2 id="合并代码前进行检查" tabindex="-1"><a class="header-anchor" href="#合并代码前进行检查" aria-hidden="true">#</a> 合并代码前进行检查</h2><h3 id="背景" tabindex="-1"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景</h3><p>有的产品线使用 Jenkins 进行 CI，但又没设置好相应的 GitLab 插件，于是会形成这样一个流程：</p><ul><li>feature 分支发起 Merge Request</li><li>合并至受保护的分支</li><li>登录 Jenkins，点击构建</li><li>构建失败，原因：编译报错</li></ul><p>最后一点，非常难以忍受，因为代码已经合并进去了，木已成舟。此时面对编译报错，第一反应是解决报错，重新编译。但有没有一种可能，我根本不想要这些编译报错的代码呢？</p><p>笔者还是更倾向于防患于未然的思维模式，也即不能通过编译的代码，不允许合并至受保护的分支。而使用 Gitlab CI 来做这件事比 Jenkins 体验更丝滑，下面就来介绍一下具体的做法。</p><h3 id="设置mr检查" tabindex="-1"><a class="header-anchor" href="#设置mr检查" aria-hidden="true">#</a> 设置MR检查</h3><p>进入项目如下界面：<br><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682387122013.png" alt="image.png" loading="lazy"></p><p>勾选流水线必须成功。<br><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682388470210.png" alt="image.png" loading="lazy"></p><h3 id="gitlab-ci-yml-示例" tabindex="-1"><a class="header-anchor" href="#gitlab-ci-yml-示例" aria-hidden="true">#</a> .gitlab-ci.yml 示例</h3><p>简单示例如下，根据实际情况修改：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">image</span><span class="token punctuation">:</span> maven<span class="token punctuation">:</span>3.6.3<span class="token punctuation">-</span>openjdk<span class="token punctuation">-</span><span class="token number">8</span>

<span class="token key atrule">variables</span><span class="token punctuation">:</span>
  <span class="token key atrule">MAVEN_CLI_OPTS</span><span class="token punctuation">:</span> <span class="token string">&quot;-s .m2/settings.xml --batch-mode&quot;</span>
  <span class="token key atrule">MAVEN_OPTS</span><span class="token punctuation">:</span> <span class="token string">&quot;-Dmaven.repo.local=.m2/repository&quot;</span>

<span class="token key atrule">cache</span><span class="token punctuation">:</span>
  <span class="token key atrule">paths</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> .m2/repository

<span class="token key atrule">stages</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> build

<span class="token key atrule">build</span><span class="token punctuation">:</span>
  <span class="token key atrule">stage</span><span class="token punctuation">:</span> build
  <span class="token key atrule">script</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> mvn $MAVEN_CLI_OPTS clean compile
  <span class="token key atrule">tags</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> java <span class="token comment"># 这是注册了的 gitlab runner 的 tag</span>
  <span class="token key atrule">rules</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">if</span><span class="token punctuation">:</span> $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /develop<span class="token punctuation">|</span>test<span class="token punctuation">|</span>uat/

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述示例要设置成功，还要确保 .m2/settings.xml 文件存在。</p><h3 id="效果" tabindex="-1"><a class="header-anchor" href="#效果" aria-hidden="true">#</a> 效果</h3><p>当流水线还未结束时，不能提前合并代码，只能等待流水线成功。<br><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682388481821.png" alt="image.png" loading="lazy"></p><p>如果流水线失败了，不能合并。<br><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682388485568.png" alt="image.png" loading="lazy"></p><h2 id="集成单元测试" tabindex="-1"><a class="header-anchor" href="#集成单元测试" aria-hidden="true">#</a> 集成单元测试</h2><p>核心思路就是在 CI 环境运行 <code>mvn test</code>。</p><p>可能遇到的问题在于，由于项目依赖关系：</p><ol><li>旧代码中运行不通过的测试影响到了 <code>mvn test</code> 的结果</li><li>pom.xml 无法读取相关的配置</li></ol><p>首先，假设根目录为 parent，其下有三个子模块：</p><ul><li>a</li><li>b</li><li>common</li></ul><p>每个目录都有 pom.xml，其中所有子模块的属性值都来自于 parent 目录的 pom.xml。</p><p>而我们需要进行持续集成的模块是 b，则 maven 命令应该如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mvn --also-make <span class="token parameter variable">-pl</span> b <span class="token builtin class-name">test</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>则此时就跳过了子模块 a。</p><p>但如果子模块 b 又依赖了 common，此时 common 的遗留的测试用例报错了，那我们的解决办法只能是：一个个地解决报错。</p><p>当上述 maven 命令可以运行后，就可以修改 Gitlab CI 的配置，然后设置调度任务，让 Gitlab 每天都跑测试用例。一旦用例执行不通过，就会发邮件通知到我们。</p><figure><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/software-test/1683436020492.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="线上发布-jar" tabindex="-1"><a class="header-anchor" href="#线上发布-jar" aria-hidden="true">#</a> 线上发布 jar</h2><p>可以在前文的基础上，设置流水线自动发布 jar。</p><h3 id="maven配置" tabindex="-1"><a class="header-anchor" href="#maven配置" aria-hidden="true">#</a> Maven配置</h3><p>考虑到一个项目A，可能划分了多个模块，并非每个模块都需要发布 jar，可以修改对应模块的 pom.xml</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!--  跳过 deploy 步骤   --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-deploy-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>skip</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>skip</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>则在项目根目录执行 deploy 命令即可：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mvn deploy <span class="token parameter variable">-Dmaven.test.skip</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="gitlab-ci-yml-配置" tabindex="-1"><a class="header-anchor" href="#gitlab-ci-yml-配置" aria-hidden="true">#</a> .gitlab-ci.yml 配置</h3><p>相应的配置如下：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">deploy</span><span class="token punctuation">:</span>
  <span class="token key atrule">stage</span><span class="token punctuation">:</span> deploy
  <span class="token key atrule">script</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> mvn $MAVEN_CLI_OPTS <span class="token punctuation">-</span>Dmaven.test.skip deploy
  <span class="token key atrule">tags</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> java
  <span class="token key atrule">rules</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">if</span><span class="token punctuation">:</span> $CI_COMMIT_BRANCH =~ /develop<span class="token punctuation">|</span>test<span class="token punctuation">|</span>uat/

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码合并或有新的 commit 时，会执行流水线：<br><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682388489368.png" alt="image.png" loading="lazy"></p><h3 id="拉取最新的jar" tabindex="-1"><a class="header-anchor" href="#拉取最新的jar" aria-hidden="true">#</a> 拉取最新的jar</h3><p>在B项目中，如果要引用A项目打出来的 jar，记得拉取最新的版本，pom.xml 设置如下：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repositories</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>nexus<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>nexus-snapshot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>http://localhost:8081/repository/maven-snapshots/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshots</span><span class="token punctuation">&gt;</span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">&gt;</span></span>
            <span class="token comment">&lt;!--     拉取最新的   --&gt;</span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>updatePolicy</span><span class="token punctuation">&gt;</span></span>always<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>updatePolicy</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshots</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repositories</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="保存中间产物" tabindex="-1"><a class="header-anchor" href="#保存中间产物" aria-hidden="true">#</a> 保存中间产物</h2><p>需要保存中间产物的一个场景是，流水线分多个阶段，后一个阶段依赖前一个阶段的产物。</p><p>举个例子：某个 java 项目，需要先编译输出 jar，再基于 jar 构建镜像。</p><p>相关示例代码如下：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">build-jar</span><span class="token punctuation">:</span>
  <span class="token key atrule">stage</span><span class="token punctuation">:</span> build
  <span class="token key atrule">script</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> mvn clean package <span class="token punctuation">-</span>P $<span class="token punctuation">{</span>CI_COMMIT_REF_NAME<span class="token punctuation">}</span> <span class="token punctuation">-</span>U <span class="token punctuation">-</span>DskipTests
  <span class="token key atrule">artifacts</span><span class="token punctuation">:</span> <span class="token comment"># save output </span>
    <span class="token key atrule">paths</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> $<span class="token punctuation">{</span>APP_NAME<span class="token punctuation">}</span>/target/$<span class="token punctuation">{</span>APP_NAME<span class="token punctuation">}</span><span class="token important">*.jar</span>
  <span class="token key atrule">tags</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> java
  <span class="token key atrule">only</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> /test<span class="token punctuation">|</span>uat/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">build-image</span><span class="token punctuation">:</span>
  <span class="token key atrule">stage</span><span class="token punctuation">:</span> push
  <span class="token key atrule">script</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> docker build <span class="token punctuation">-</span>f $<span class="token punctuation">{</span>APP_NAME<span class="token punctuation">}</span>/Dockerfile <span class="token punctuation">-</span>t $<span class="token punctuation">{</span>IMAGE_NAME<span class="token punctuation">}</span> .
    <span class="token punctuation">-</span> docker push $<span class="token punctuation">{</span>IMAGE_NAME<span class="token punctuation">}</span>
    <span class="token punctuation">-</span> docker rmi $<span class="token punctuation">{</span>IMAGE_NAME<span class="token punctuation">}</span>
  <span class="token key atrule">dependencies</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> build<span class="token punctuation">-</span>jar
  <span class="token key atrule">tags</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> java
  <span class="token key atrule">only</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> /test<span class="token punctuation">|</span>uat/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="其他问题与解决方案" tabindex="-1"><a class="header-anchor" href="#其他问题与解决方案" aria-hidden="true">#</a> 其他问题与解决方案</h2><h3 id="node-js" tabindex="-1"><a class="header-anchor" href="#node-js" aria-hidden="true">#</a> Node.js</h3><p>本文主要以 Java 项目为例进行 Gitlab CI 相关的讲解，如果需要 Node.js 项目的示例，可以查看另外两篇文章：</p>`,69),w=t(`<h3 id="创建不了容器" tabindex="-1"><a class="header-anchor" href="#创建不了容器" aria-hidden="true">#</a> 创建不了容器</h3><blockquote><p>ERROR: Preparation failed: adding cache volume: set volume permissions: running permission container &quot;d1574748b77fc73a4319a45341af1f0eab983900d81885a02c017ff6c5559f28&quot; for volume &quot;runner-bzsttzs-project-2271-concurrent-0-cache-3c3f060a0374fc8bc39395164f415a70&quot;: starting permission container: Error response from daemon: OCI runtime create failed: container_linux.go:349: starting container process caused &quot;process_linux.go:319: getting the final child&#39;s pid from pipe caused &quot;EOF&quot;&quot;: unknown (linux_set.go:105:0s)</p></blockquote><p>可以尝试的方案：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> restart gitlab-runner
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果上述方法不行，可尝试重启 docker</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl stop <span class="token function">docker</span>
<span class="token function">sudo</span> systemctl start <span class="token function">docker</span>
<span class="token function">sudo</span> systemctl status <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="本地成功-流水线失败" tabindex="-1"><a class="header-anchor" href="#本地成功-流水线失败" aria-hidden="true">#</a> 本地成功，流水线失败</h3><p>如果流水线编译报错，本地编译通过，不用怀疑，一定是本地的问题。</p><p>本地之所以能编译通过，是因为有缓存。如果 pom.xml 没有设置 <code>&lt;updatePolicy&gt;always&lt;/updatePolicy&gt;</code>，编译时很可能使用的是缓存。</p><p>清除缓存拉取最新的包即可。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mvn <span class="token operator">-</span>U clean install
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="参考文档" tabindex="-1"><a class="header-anchor" href="#参考文档" aria-hidden="true">#</a> 参考文档</h2>`,12),I={href:"https://docs.gitlab.com/ee/ci/examples/",target:"_blank",rel:"noopener noreferrer"},A={href:"https://docs.gitlab.com/ee/ci/variables/predefined_variables.html",target:"_blank",rel:"noopener noreferrer"},C={href:"https://docs.gitlab.com/ee/ci/jobs/job_control.html#specify-when-jobs-run-with-rules",target:"_blank",rel:"noopener noreferrer"};function G(L,R){const e=l("ExternalLinkIcon"),i=l("RouterLink");return o(),r("div",null,[m,k,g,u(" more "),v,n("p",null,[a("其他安装方式可查阅"),n("a",b,[a("文档"),s(e)]),a("。")]),h,y,f,n("p",null,[a("GitLab Runner 根据范围分为"),n("a",_,[a("三种"),s(e)]),a("。"),x,E]),j,n("ul",null,[n("li",null,[s(i,{to:"/software-testing/use-playwright-for-ui-testing.html#%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90"},{default:p(()=>[a("Playwright UI自动化测试")]),_:1})]),n("li",null,[s(i,{to:"/software-testing/use-postman-for-api-testing.html#%E5%BB%BA%E7%AB%8Bci%E4%BB%BB%E5%8A%A1"},{default:p(()=>[a("Postman API自动化测试")]),_:1})])]),w,n("ul",null,[n("li",null,[n("a",I,[a("Gitlab CI 示例"),s(e)])]),n("li",null,[n("a",A,[a("预设的环境变量"),s(e)])]),n("li",null,[n("a",C,[a("rules规则说明"),s(e)])])])])}const P=c(d,[["render",G],["__file","gitlab-ci.html.vue"]]);export{P as default};
