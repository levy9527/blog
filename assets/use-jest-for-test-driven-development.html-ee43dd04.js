import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o,c as l,a as s,b as n,d as e,f as c}from"./app-5cfa0677.js";const i={},u=s("h1",{id:"使用-jest-实践测试驱动开发",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#使用-jest-实践测试驱动开发","aria-hidden":"true"},"#"),n(" 使用 Jest 实践测试驱动开发")],-1),r=s("h2",{id:"前言",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),n(" 前言")],-1),d={href:"https://jestjs.io/docs/en/getting-started",target:"_blank",rel:"noopener noreferrer"},k={href:"https://github.com/levy9527/jest-tdd-demo",target:"_blank",rel:"noopener noreferrer"},v=s("br",null,null,-1),m=c(`<p>本文的重点是过程以及思维方法，框架以及用法不是重点。</p><p>本文使用的编程语言是javascript，思路对其他语言也是适用的。</p><p>本文主要以函数作为测试对象。</p><h2 id="环境搭建" tabindex="-1"><a class="header-anchor" href="#环境搭建" aria-hidden="true">#</a> 环境搭建</h2><p>假设项目结构为</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">.</span>
├── README.md
├── package.json
├── src
├── <span class="token builtin class-name">test</span>
└── yarn.lock
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>安装依赖</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">add</span> <span class="token parameter variable">--dev</span> jest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>打开package.json, 修改scripts字段</li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
<span class="token property">&quot;test&quot;</span><span class="token operator">:</span> <span class="token string">&quot;jest&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后把测试文件放在test文件夹下，使用<code>yarn test</code> 即可查看测试结果</p><h2 id="开发" tabindex="-1"><a class="header-anchor" href="#开发" aria-hidden="true">#</a> 开发</h2><p>现在要开发一个函数，根据传入的文件名判断是否为shell文件。</p><p>先做好约定：</p><ol><li>shell文件应该以 <code>.sh</code> 结尾</li><li>shell文件不以 <code>.</code> 开头</li><li>函数为名 <code>isShellFile</code></li></ol><p>下面来看下开发步骤是怎么样的。</p><h3 id="文件初始化" tabindex="-1"><a class="header-anchor" href="#文件初始化" aria-hidden="true">#</a> 文件初始化</h3><p>在src目录下新建 <code>isShellFile.js</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">touch</span> isShellFile.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后一行代码也不写，在test目录下新建 <code>isShellFile.test.js</code></p><p>可以注意到，测试文件的名与源文件名类似，只是中间多了个 <code>.test</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">touch</span> isShellFile.test.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="第一个用例" tabindex="-1"><a class="header-anchor" href="#第一个用例" aria-hidden="true">#</a> 第一个用例</h3><p>打开测试文件 <code>test/isShellFile.test.js</code> ，编写第一个用例，也是最普通的一个: <code>bash.sh</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> isShellFile <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;../src/isShellFile&#39;</span><span class="token punctuation">)</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;isShellFile&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 调用函数，期望它返回值为 true</span>
  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">isShellFile</span><span class="token punctuation">(</span><span class="token string">&#39;bash.sh&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行 <code>yarn test</code> , 结果如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> FAIL  test/isShellFile.test.js
  ✕ isShellFile <span class="token punctuation">(</span>2ms<span class="token punctuation">)</span>

  ● isShellFile

    TypeError: isShellFile is not a <span class="token keyword">function</span>
    ^^^

      <span class="token number">3</span> <span class="token operator">|</span> test<span class="token punctuation">(</span><span class="token string">&#39;isShellFile&#39;</span>, <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
      <span class="token number">4</span> <span class="token operator">|</span>
    <span class="token operator">&gt;</span> <span class="token number">5</span> <span class="token operator">|</span>   expect<span class="token punctuation">(</span>isShellFile<span class="token punctuation">(</span><span class="token string">&#39;bash.sh&#39;</span><span class="token punctuation">))</span>.toBeTruthy<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token operator">|</span>          ^
      <span class="token number">6</span> <span class="token operator">|</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>失败是意料之中的，因为 <code>src/isShellFile.js</code> 一行代码也没写，所以测试代码中第5行 <code>isShellFile</code> 无法进行函数调用。</p><p>完善源文件<code>src/isShellFile.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">filename</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样 <code>isShellFile</code> 就可以作为函数被调用了。</p><p>再运行 <code>yarn test</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> FAIL  test/isShellFile.test.js
  ✕ isShellFile <span class="token punctuation">(</span>7ms<span class="token punctuation">)</span>

  ● isShellFile

    expect<span class="token punctuation">(</span>received<span class="token punctuation">)</span>.toBeTruthy<span class="token punctuation">(</span><span class="token punctuation">)</span>
    ^^^
    Received: undefined

      <span class="token number">3</span> <span class="token operator">|</span> test<span class="token punctuation">(</span><span class="token string">&#39;isShellFile&#39;</span>, <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
      <span class="token number">4</span> <span class="token operator">|</span>
    <span class="token operator">&gt;</span> <span class="token number">5</span> <span class="token operator">|</span>   expect<span class="token punctuation">(</span>isShellFile<span class="token punctuation">(</span><span class="token string">&#39;bash.sh&#39;</span><span class="token punctuation">))</span>.toBeTruthy<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token operator">|</span>                                  ^
      <span class="token number">6</span> <span class="token operator">|</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>又报错了，但这次报错原因跟上次不同，说明有进步。</p><p>这次报错原因是，期望函数调用返回值为真 , 但实际没有返回真 。</p><p>这是当然的，因为在源文件中，根本没有写返回语句。</p><p>为了让测试通过，修改 <code>src/isShellFile.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">filename</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token operator">+</span>  <span class="token keyword">return</span> <span class="token boolean">true</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行 <code>yarn test</code> , 测试通过了！</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> PASS  test/isShellFile.test.js
  ✓ isShellFile <span class="token punctuation">(</span>3ms<span class="token punctuation">)</span>

Test Suites: <span class="token number">1</span> passed, <span class="token number">1</span> total
Tests:       <span class="token number">1</span> passed, <span class="token number">1</span> total
Snapshots:   <span class="token number">0</span> total
Time:        <span class="token number">1</span>.548s
Ran all <span class="token builtin class-name">test</span> suites.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>把上述修改，提交到版本控制系统中。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">add</span> package.json yarn.lock src <span class="token builtin class-name">test</span>
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&#39;feat: init jest test case&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="第二个用例" tabindex="-1"><a class="header-anchor" href="#第二个用例" aria-hidden="true">#</a> 第二个用例</h3><p>观察我们的测试用例，发现太简单了，只有正面的用例，没有反面的、异常的用例</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;isShellFile&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">isShellFile</span><span class="token punctuation">(</span><span class="token string">&#39;bash.sh&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>test/isShellFile.test.js</code> 添加一个反面的用例</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;isShellFile&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
   <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">isShellFile</span><span class="token punctuation">(</span><span class="token string">&#39;bash.sh&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">+</span>  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">isShellFile</span><span class="token punctuation">(</span><span class="token string">&#39;bash.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeFalsy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行 <code>yarn test</code></p><p>(可以发现，在开发过程中需要反复执行上述命令，有个偷懒的办法，执行<code>yarn test --watch</code>，即可监听文件变化，自动执行测试用例)</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> FAIL  test/isShellFile.test.js
  ✕ isShellFile <span class="token punctuation">(</span>6ms<span class="token punctuation">)</span>

  ● isShellFile

    expect<span class="token punctuation">(</span>received<span class="token punctuation">)</span>.toBeFalsy<span class="token punctuation">(</span><span class="token punctuation">)</span>
    ^^^
    Received: <span class="token boolean">true</span>

      <span class="token number">4</span> <span class="token operator">|</span>
      <span class="token number">5</span> <span class="token operator">|</span>   expect<span class="token punctuation">(</span>isShellFile<span class="token punctuation">(</span><span class="token string">&#39;bash.sh&#39;</span><span class="token punctuation">))</span>.toBeTruthy<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token operator">&gt;</span> <span class="token number">6</span> <span class="token operator">|</span>   expect<span class="token punctuation">(</span>isShellFile<span class="token punctuation">(</span><span class="token string">&#39;bash.txt&#39;</span><span class="token punctuation">))</span>.toBeFalsy<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token operator">|</span>                                   ^
      <span class="token number">7</span> <span class="token operator">|</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>报错了，期望返回假，但函数返回的是真。这是因为，源文件中， <code>isShellFile</code> 函数永远返回真！</p><p>完善 <code>src/isShellFile.js</code> 逻辑</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">filename</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token operator">-</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token operator">+</span>  <span class="token keyword">return</span> filename<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;.sh&#39;</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span>
 <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试通过了</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> PASS  test/isShellFile.test.js
  ✓ isShellFile <span class="token punctuation">(</span>4ms<span class="token punctuation">)</span>

Test Suites: <span class="token number">1</span> passed, <span class="token number">1</span> total
Tests:       <span class="token number">1</span> passed, <span class="token number">1</span> total
Snapshots:   <span class="token number">0</span> total
Time:        <span class="token number">1</span>.568s
Ran all <span class="token builtin class-name">test</span> suites.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>把上述修改提交到版本控制系统</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> commit <span class="token parameter variable">-am</span> <span class="token string">&#39;fix: 函数永远返回真的bug&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="第三个用例" tabindex="-1"><a class="header-anchor" href="#第三个用例" aria-hidden="true">#</a> 第三个用例</h3><p>我们再添加一个用例，这次考虑特殊情况： <code>.sh</code> 这种文件，不算是shell文件。</p><p>修改 <code>test/isShellFile.test.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>   <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">isShellFile</span><span class="token punctuation">(</span><span class="token string">&quot;bash.sh&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">isShellFile</span><span class="token punctuation">(</span><span class="token string">&quot;bash.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeFalsy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">+</span>  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">isShellFile</span><span class="token punctuation">(</span><span class="token string">&#39;.sh&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeFalsy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试不通过</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> FAIL  test/isShellFile.test.js
  ✕ isShellFile <span class="token punctuation">(</span>8ms<span class="token punctuation">)</span>

  ● isShellFile

    expect<span class="token punctuation">(</span>received<span class="token punctuation">)</span>.toBeFalsy<span class="token punctuation">(</span><span class="token punctuation">)</span>
    ^^^
    Received: <span class="token boolean">true</span>

      <span class="token number">5</span> <span class="token operator">|</span>   expect<span class="token punctuation">(</span>isShellFile<span class="token punctuation">(</span><span class="token string">&quot;bash.sh&quot;</span><span class="token punctuation">))</span>.toBeTruthy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token number">6</span> <span class="token operator">|</span>   expect<span class="token punctuation">(</span>isShellFile<span class="token punctuation">(</span><span class="token string">&quot;bash.txt&quot;</span><span class="token punctuation">))</span>.toBeFalsy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&gt;</span> <span class="token number">7</span> <span class="token operator">|</span>   expect<span class="token punctuation">(</span>isShellFile<span class="token punctuation">(</span><span class="token string">&#39;.sh&#39;</span><span class="token punctuation">))</span>.toBeFalsy<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token operator">|</span>                              ^
      <span class="token number">8</span> <span class="token operator">|</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明逻辑待完善，修改 <code>src/isShellFile.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">filename</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token operator">-</span>  <span class="token keyword">return</span> filename<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;.sh&quot;</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token operator">+</span>  <span class="token keyword">let</span> index <span class="token operator">=</span> filename<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;.sh&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">+</span>  <span class="token keyword">return</span> index <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> index <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试通过(为精简文章内容，后面不再展示测试通过的输出)，提交代码。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> commit <span class="token parameter variable">-am</span> <span class="token string">&#39;fix: .sh应该返回false&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="第四个用例" tabindex="-1"><a class="header-anchor" href="#第四个用例" aria-hidden="true">#</a> 第四个用例</h3><p>按照第三个用例的逻辑， <code>.bash.sh</code> 也不应该是shell文件，那么函数是否能正确判断呢，测试便知。</p><p>修改 <code>test/isShellFile.test.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>   <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">isShellFile</span><span class="token punctuation">(</span><span class="token string">&#39;.sh&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeFalsy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">+</span>  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">isShellFile</span><span class="token punctuation">(</span><span class="token string">&#39;.bash.sh&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeFalsy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>测试不通过</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> FAIL  test/isShellFile.test.js
  ✕ isShellFile <span class="token punctuation">(</span>3ms<span class="token punctuation">)</span>

  ● isShellFile

    expect<span class="token punctuation">(</span>received<span class="token punctuation">)</span>.toBeFalsy<span class="token punctuation">(</span><span class="token punctuation">)</span>
    ^^^
    Received: <span class="token boolean">true</span>

       <span class="token number">6</span> <span class="token operator">|</span>   expect<span class="token punctuation">(</span>isShellFile<span class="token punctuation">(</span><span class="token string">&quot;bash.txt&quot;</span><span class="token punctuation">))</span>.toBeFalsy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token number">7</span> <span class="token operator">|</span>   expect<span class="token punctuation">(</span>isShellFile<span class="token punctuation">(</span><span class="token string">&#39;.sh&#39;</span><span class="token punctuation">))</span>.toBeFalsy<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token operator">&gt;</span>  <span class="token number">8</span> <span class="token operator">|</span>   expect<span class="token punctuation">(</span>isShellFile<span class="token punctuation">(</span><span class="token string">&#39;.bash.sh&#39;</span><span class="token punctuation">))</span>.toBeFalsy<span class="token punctuation">(</span><span class="token punctuation">)</span>
         <span class="token operator">|</span>                                   ^
       <span class="token number">9</span> <span class="token operator">|</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明逻辑待完善，修改 <code>src/isShellFile.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">filename</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">let</span> index <span class="token operator">=</span> filename<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;.sh&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">-</span>  <span class="token keyword">return</span> index <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> index <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token operator">+</span>  <span class="token keyword">return</span> <span class="token operator">!</span>filename<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span>  <span class="token operator">&amp;&amp;</span> index <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试通过，提交代码。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> commit <span class="token parameter variable">-am</span> <span class="token string">&#39;fix: .开头的文件不算sh文件&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="第五个用例" tabindex="-1"><a class="header-anchor" href="#第五个用例" aria-hidden="true">#</a> 第五个用例</h3><p>再考虑一种情况，如果 <code>.sh</code> 出现在中间呢？如 <code>bash.sh.txt</code> , 它不应该是shell文件，来看看函数是否能通过测试。</p><p>修改 <code>test/isShellFile.test.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>   <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">isShellFile</span><span class="token punctuation">(</span><span class="token string">&#39;.bash.sh&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeFalsy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">+</span>  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">isShellFile</span><span class="token punctuation">(</span><span class="token string">&#39;bash.sh.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeFalsy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>测试不通过</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> FAIL  test/isShellFile.test.js
  ✕ isShellFile <span class="token punctuation">(</span>5ms<span class="token punctuation">)</span>

  ● isShellFile

    expect<span class="token punctuation">(</span>received<span class="token punctuation">)</span>.toBeFalsy<span class="token punctuation">(</span><span class="token punctuation">)</span>
    ^^^
    Received: <span class="token boolean">true</span>

       <span class="token number">7</span> <span class="token operator">|</span>   expect<span class="token punctuation">(</span>isShellFile<span class="token punctuation">(</span><span class="token string">&#39;.sh&#39;</span><span class="token punctuation">))</span>.toBeFalsy<span class="token punctuation">(</span><span class="token punctuation">)</span>
       <span class="token number">8</span> <span class="token operator">|</span>   expect<span class="token punctuation">(</span>isShellFile<span class="token punctuation">(</span><span class="token string">&#39;.bash.sh&#39;</span><span class="token punctuation">))</span>.toBeFalsy<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token operator">&gt;</span>  <span class="token number">9</span> <span class="token operator">|</span>   expect<span class="token punctuation">(</span>isShellFile<span class="token punctuation">(</span><span class="token string">&#39;bash.sh.txt&#39;</span><span class="token punctuation">))</span>.toBeFalsy<span class="token punctuation">(</span><span class="token punctuation">)</span>
         <span class="token operator">|</span>                                      ^
      <span class="token number">10</span> <span class="token operator">|</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明逻辑待完善，修改 <code>src/isShellFile.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">filename</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token operator">-</span>  <span class="token keyword">let</span> index <span class="token operator">=</span> filename<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;.sh&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">-</span>  <span class="token keyword">return</span> <span class="token operator">!</span>filename<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span>  <span class="token operator">&amp;&amp;</span> index <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token operator">+</span>  <span class="token keyword">let</span> index <span class="token operator">=</span> filename<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">+</span>  <span class="token keyword">return</span> <span class="token operator">!</span>filename<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span>  <span class="token operator">&amp;&amp;</span> filename<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&#39;.sh&#39;</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试通过，提交代码。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> commit <span class="token parameter variable">-am</span> <span class="token string">&#39;fix: .sh必须在结尾&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="重构" tabindex="-1"><a class="header-anchor" href="#重构" aria-hidden="true">#</a> 重构</h3><p>我们来观察目前 <code>src/isShellFile.js</code> 的函数逻辑</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">filename</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> index <span class="token operator">=</span> filename<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token operator">!</span>filename<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span>  <span class="token operator">&amp;&amp;</span> filename<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&#39;.sh&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于 <code>.bashrc</code> 这样的文件，并不是shell文件，因为它是以 <code>.</code> 开头的。</p><p>则通过 <code>filename.startsWith(&#39;.&#39;)</code> 判断即可，前面的函数调用 <code>filename.lastIndexOf(&quot;.&quot;)</code> 是多余的。也即，目前的函数判断逻辑不够简明。</p><p>下面是一种优化思路：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">filename</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token operator">!</span>filename<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span>  <span class="token operator">&amp;&amp;</span> filename<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>filename<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&#39;.sh&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试通过，提交代码</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> commit <span class="token parameter variable">-am</span> <span class="token string">&#39;refactor: 优化逻辑&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意，这个重构示例的重点是：</p><ol><li>先完成功能，再重构</li><li>重构必须要有测试用例，且确保重构后全部测试用例通过</li></ol><p>至于其他方面，见仁见智，并不是重点。</p><h2 id="结论" tabindex="-1"><a class="header-anchor" href="#结论" aria-hidden="true">#</a> 结论</h2><p>本文通过代码实例，践行了测试先行的理念。</p><p>文中的代码实现不是重点，而是开发过程。</p><p>文中 <a href="#Pv5Ni">文件初始化</a> 及 <a href="#Pv5Ni">第一个用例</a> 的内容，尤其值得回味，它体现了两个思路：</p><ul><li>总是在有一个失败的单元测试后才开始编码</li><li>用必要的最小代码让测试通过</li></ul><p>总的来看，TDD总是处于一个循环中：</p><ol><li>编写用例</li><li>测试失败</li><li>编写代码</li><li>测试成功</li><li>提交代码</li><li>重复以上</li></ol><p>通过这样，功能的实现每次都是最小成本的，功能也是有步骤地、通过迭代完成的，而不是一步登天。</p><p>更关键的是，完善的测试用例，是开发者的“守护天使”，有了它们，以后在添加新功能时，修改/重构代码都有了可靠的保障，让开发者可以充满信心，code with confidence😎！</p><p>另外，测试用例延伸出的思考还有：</p><ol><li>不需要追求完美软件，不用过分考虑将来的变化：先设计能符合当前需求的用例，再编码通过测试用例即可。将来有变化，重构代码即可，因为有用例，不用担心改错了。</li><li>重构的前提，是存在完善的测试用例。如果没有用例，只有源码，是不敢谈轻易重构，否则就是在走钢丝。</li></ol>`,110);function b(h,g){const a=p("ExternalLinkIcon");return o(),l("div",null,[u,r,s("p",null,[n("本文将使用"),s("a",d,[n("jest"),e(a)]),n("进行测试驱动开发的示例，源码在"),s("a",k,[n("github"),e(a)]),n("。"),v,n(" 旨在说明在开发中引入单元测试后开发过程，以及测试先行的开发思路。")]),m])}const F=t(i,[["render",b],["__file","use-jest-for-test-driven-development.html.vue"]]);export{F as default};
