import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as i,a as n,b as s,d as t,e as l,f as e}from"./app-d8f5912c.js";const u={},r=n("h1",{id:"单元测试概述",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#单元测试概述","aria-hidden":"true"},"#"),s(" 单元测试概述")],-1),d=n("h2",{id:"why",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#why","aria-hidden":"true"},"#"),s(" Why")],-1),k=n("p",null,"为什么要做单元测试？或者说，为什么要写测试代码？",-1),v=n("p",null,"个人总结为以下两点：",-1),m={href:"https://www.stickyminds.com/article/shift-left-approach-software-testing",target:"_blank",rel:"noopener noreferrer"},h=n("br",null,null,-1),b=n("img",{src:"https://raw.githubusercontent.com/levy9527/image-holder/main/md-image-kit/1690532448643-e09bebb0-66f2-49f9-8686-d4a8c6b5d590.png",alt:"",loading:"lazy"},null,-1),f=n("li",null,"形成资产，方便回归测试，后续迭代重构、维护有保障",-1),g=e('<p>以上两点，是研发人员写测试代码的本质理由，无论什么类型的测试代码、研发人员用的什么语言、框架都适用。</p><h2 id="what" tabindex="-1"><a class="header-anchor" href="#what" aria-hidden="true">#</a> What</h2><p>写测试代码究竟是写什么？</p><p>个人认为测试代码主要是为了搞清楚两件事：</p><ol><li>源码到底会不会在目标环境执行？</li><li>源码的执行结果是否符合预期？</li></ol><p>第一件事，引出了 code coverage 代码覆盖率的概念；第二件事，则引出了 assert 断言的概念。</p><h2 id="how" tabindex="-1"><a class="header-anchor" href="#how" aria-hidden="true">#</a> How</h2><h3 id="测试代码的风格" tabindex="-1"><a class="header-anchor" href="#测试代码的风格" aria-hidden="true">#</a> 测试代码的风格</h3>',8),_={href:"https://medium.com/@pjbgf/title-testing-code-ocd-and-the-aaa-pattern-df453975ab80",target:"_blank",rel:"noopener noreferrer"},w=e(`<ol><li>组装参数</li><li>执行目标方法</li><li>执行断言</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token annotation punctuation">@Test</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token comment">// Arrange</span>
    <span class="token class-name">String</span> plainText <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>licenseRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Act</span>
    <span class="token class-name">String</span> digest <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>plainText<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Assert</span>
    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>digest<span class="token punctuation">,</span> <span class="token string">&quot;myhash&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>尤其注意最后的断言，如果没有断言，不叫测试。</p><p>常见的错误就是，不写断言，而使用 <code>System.out.println()</code>来判断执行结果。<br> 这样做无法结合 CI 形成有效的自动化测试。 因为这种做法只能让编译通过，源码逻辑也许已经错误了，但测试结果仍然 100% 通过，这是没有意义的。</p><h3 id="测试难点" tabindex="-1"><a class="header-anchor" href="#测试难点" aria-hidden="true">#</a> 测试难点</h3><p>以函数的观点来看。</p><p>输入：</p><ol><li>内存数据</li><li>外部数据</li></ol><p>输出：</p><ol><li>内存数据</li><li>数据库</li><li>文件系统</li><li>网络调用</li></ol><p>单元测试从严格意义上来说需要满足三个No：</p><ol><li>No DB</li><li>No Network</li><li>No I/O</li></ol><p>由此，引出了 Mock 的概念及技术。作为单元测试，需要 Mock 依赖，准备好输入数据，并想办法在内存中验证外部输出。</p><p>也即，重要的是隔离依赖，让测试可重复执行。</p><h3 id="常用工具" tabindex="-1"><a class="header-anchor" href="#常用工具" aria-hidden="true">#</a> 常用工具</h3>`,15),y={href:"https://junit.org/junit5/",target:"_blank",rel:"noopener noreferrer"},x={href:"https://site.mockito.org/",target:"_blank",rel:"noopener noreferrer"},j={href:"https://plugins.jetbrains.com/plugin/9471-testme",target:"_blank",rel:"noopener noreferrer"},q=e(`<h2 id="bad-examples" tabindex="-1"><a class="header-anchor" href="#bad-examples" aria-hidden="true">#</a> Bad Examples</h2><p>以下是常见的错误测试示例，它们都不是合格的单元测试。</p><h3 id="没有测试类" tabindex="-1"><a class="header-anchor" href="#没有测试类" aria-hidden="true">#</a> 没有测试类</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// write a lot code to test</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>经典错误：写一个 main 方法，把所有测试代码都放进去。这样做的后果是，无论是人还是机器，都不知道原来这里还有测试代码。</p><h3 id="没有断言" tabindex="-1"><a class="header-anchor" href="#没有断言" aria-hidden="true">#</a> 没有断言</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">decryptPwdTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">String</span> pwdStr <span class="token operator">=</span> <span class="token string">&quot;YT08KDijKt/rqhhKv9NrLA==&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> decrypt <span class="token operator">=</span> <span class="token class-name">DatasourcePasswordUtils</span><span class="token punctuation">.</span><span class="token function">decrypt</span><span class="token punctuation">(</span>pwdStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>decrypt<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>经典错误：（很可能是单纯地把测试代码从 main 方法移过来）没有断言，依赖人用肉眼判断输出正确与否。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetSummary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token function">when</span><span class="token punctuation">(</span>dao<span class="token punctuation">.</span><span class="token function">countWithNoTenant</span><span class="token punctuation">(</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">when</span><span class="token punctuation">(</span>dao<span class="token punctuation">.</span><span class="token function">countEnableWithNoTenant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">when</span><span class="token punctuation">(</span>dao<span class="token punctuation">.</span><span class="token function">countWithNoTenant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Result</span> result <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个例子虽然用上了 Mock 技术，但依赖掩盖不了没有断言的事实。这也许是为了达到测试覆盖率百分百而进行的投机取巧。</p><h3 id="无法重复执行" tabindex="-1"><a class="header-anchor" href="#无法重复执行" aria-hidden="true">#</a> 无法重复执行</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAppendFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;D://appendtest.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    minioFileStorage<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token string">&quot;/appendtest.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果代码 Linux 环境运行怎么办？哪里来的 D 盘？</p><p>这种情况，正确的做法应该是把依赖的文件作为测试夹具，与测试代码一起放入版本控制中。<br><img src="https://raw.githubusercontent.com/levy9527/image-holder/main/md-image-kit/1695537638532-e8092338-3de2-4019-99a2-03bfb98f781f.png" alt="" loading="lazy"><br> 参考代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token annotation punctuation">@Test</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">importSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;src/test/fixtures/file-import&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">getImportResp</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">assertThat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token string">&quot;code&quot;</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>hamcrest<span class="token punctuation">.</span></span>Matchers</span><span class="token punctuation">.</span><span class="token function">equalTo</span><span class="token punctuation">(</span><span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">assertThat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token string">&quot;payload&quot;</span><span class="token punctuation">,</span> <span class="token function">equalTo</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15);function T(N,S){const a=o("ExternalLinkIcon");return c(),i("div",null,[r,d,k,v,n("ol",null,[n("li",null,[n("a",m,[s("测试左移"),t(a)]),s("，降低修复bug的成本"),h,b]),f]),l(" more "),g,n("p",null,[n("a",_,[s("AAA"),t(a)]),s(" 风格：")]),w,n("ol",null,[n("li",null,[n("a",y,[s("Junit"),t(a)])]),n("li",null,[n("a",x,[s("Mocktio"),t(a)])]),n("li",null,[n("a",j,[s("TestMe"),t(a)])])]),q])}const R=p(u,[["render",T],["__file","unit-testing-overview.html.vue"]]);export{R as default};
