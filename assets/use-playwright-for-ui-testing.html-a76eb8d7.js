import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as i,c as l,a as s,b as n,d as a,w as u,f as e}from"./app-ab8c151e.js";const r={},d=e(`<h1 id="下一代-ui-自动化测试工具-playwright" tabindex="-1"><a class="header-anchor" href="#下一代-ui-自动化测试工具-playwright" aria-hidden="true">#</a> 下一代 UI 自动化测试工具 Playwright</h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>Playwright 是微软于 2020 年发布的一款 E2E testing 工具，跟社区成熟的 Cypress 相比，稍显年轻。然而 Playwright 的主要优势有：</p><ol><li>支持多语言：Node.js、Java、Python，也即它并非是前端工程师专属的工具</li><li>开箱即用的代码生成功能（Cypress 现在也支持，不过要修改配置或安装插件）</li></ol><p>另外，Playwright 的安装没什么门槛，不像 Cypress 可能需要黑魔法。</p><p>综上所述，笔者认为 Playwright 是值得在研发过程中引入的一款测试工具，它可以帮助研发、测试团队较平滑地走上自动化测试之路。它适用的典型场景之一，就是做回归测试——测试人员再也不用在界面上使用鼠标进行“点点点”，解放双手，提高测试效率。</p><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> create playwright
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>根据命令提示，输入如下：<br><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/software-test/1683274667037.png" alt="image.png" loading="lazy"><br> 默认会下载所有浏览器，如果没有浏览器兼容性测试的需求，推荐如上图所示，手动安装一个浏览器。</p><p>以安装 chromium 为例，相应操作步骤如下：</p><ol><li>修改配置</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">vi</span> playwright.config.ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注释掉以下内容：<br><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/software-test/1683274759403.png" alt="image.png" loading="lazy"></p><ol start="2"><li>安装浏览器</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> playwright <span class="token function">install</span> --with-deps chromium
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>等待一段时间即可，如果失败，请重试。<br><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/software-test/1683274769748.png" alt="image.png" loading="lazy"></p>`,16),k={href:"https://marketplace.visualstudio.com/items?itemName=ms-playwright.playwright",target:"_blank",rel:"noopener noreferrer"},g=e(`<h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h2><h3 id="代码生成" tabindex="-1"><a class="header-anchor" href="#代码生成" aria-hidden="true">#</a> 代码生成</h3><p>虽然可以参考 <code>example.spec.ts</code>去编写测试用例，但这不是 Playwright 独特之处。Playwright 最引入注目的，是代码生成功能。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> playwright codegen
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上述命令会打开两个浏览器窗口：</p><ol><li>一个是普通的浏览器界面</li><li>另一个是代码生成界面，在前一个窗口进行的任何操作，都会生成相应的代码</li></ol><p><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/software-test/1683275050705.png" alt="image.png" loading="lazy"><br> 虽然默认生成代码是 Javascript，但可以选择切换语言：<br><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/software-test/1683275136008.png" alt="image.png" loading="lazy"><br> 注意到可以生成 Pytest 的代码，对测试工程师来说，简直是福音。这也提示我们，Playwright 既可以由前端研发来使用，也可以由测试人员来使用，并不限制使用者的职业身份。</p><p>点击&quot;Copy&quot;按钮<br><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/software-test/1683276292010.png" alt="image.png" loading="lazy"><br> 然后打开代码编辑器，把代码复制进去即可。</p><p>点击&quot;Clear&quot;按钮，<br><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/software-test/1683277483800.png" alt="image.png" loading="lazy"><br> 可以清空本次操作生成的代码，从而开始进行下一次操作的代码生成。</p><p>如果是使用 VS Code 插件，点击&quot;Record new&quot;即可。<br><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/software-test/1683277490131.png" alt="image.png" loading="lazy"></p><h3 id="修改代码" tabindex="-1"><a class="header-anchor" href="#修改代码" aria-hidden="true">#</a> 修改代码</h3><p>生成的代码，最好还是检查一下，也许需要去掉一些多余的操作记录。<br> 如下面的代码，<code>Tab</code>的操作只是人工操作时为了方便而进行的按键，对机器而言，是多余的，应该去掉。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;login&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> page <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token string">&#39;http://172.16.202.6:3000/#/login&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">getByRole</span><span class="token punctuation">(</span><span class="token string">&#39;textbox&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">getByRole</span><span class="token punctuation">(</span><span class="token string">&#39;textbox&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//await page.getByRole(&#39;textbox&#39;).first().press(&#39;Tab&#39;);</span>
  <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">getByRole</span><span class="token punctuation">(</span><span class="token string">&#39;textbox&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nth</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">&#39;code&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//await page.getByRole(&#39;textbox&#39;).nth(1).press(&#39;Tab&#39;);</span>
  <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">locator</span><span class="token punctuation">(</span><span class="token string">&#39;input[type=&quot;password&quot;]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">&#39;password&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">getByRole</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;登录&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果想基于现在的测试代码，继续生成新的代码，可以使用 VS Code：</p><ul><li>把光标放到测试用例的最后一行</li><li>点击&quot;Record at cursor&quot;，即可继续录制</li></ul><figure><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/software-test/1683277555357.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h3 id="执行用例" tabindex="-1"><a class="header-anchor" href="#执行用例" aria-hidden="true">#</a> 执行用例</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> playwright <span class="token builtin class-name">test</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/software-test/1683277566741.png" alt="image.png" loading="lazy"><br> 如果用例失败了，想查看到底哪里错了，可以用以下命令显示浏览器，查看用例执行过程：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> playwright <span class="token builtin class-name">test</span> <span class="token parameter variable">--headed</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果是使用 VS Code，直接点击运行用例即可。<br><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/software-test/1683277575650.png" alt="image.png" loading="lazy"><br> 勾选左下角的&quot;Show broswer&quot;，即可显示浏览器。<br><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/software-test/1683277598218.png" alt="image.png" loading="lazy"></p><h3 id="调试用例" tabindex="-1"><a class="header-anchor" href="#调试用例" aria-hidden="true">#</a> 调试用例</h3><p>对于失败的用例，如何 debug呢？添加 --debug 参数即可。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> playwright <span class="token builtin class-name">test</span> <span class="token parameter variable">--debug</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>点击&quot;Step over&quot; 即可执行下一行代码。<br><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/software-test/1683277605265.png" alt="image.png" loading="lazy"></p><p>如果是使用 VS Code，找到相应的用例，右键出现&quot;Debug Test&quot;，点击即可。<br><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/software-test/1683277678957.png" alt="image.png" loading="lazy"></p><h3 id="查看报告" tabindex="-1"><a class="header-anchor" href="#查看报告" aria-hidden="true">#</a> 查看报告</h3><p>在执行完用例后，本地会生成目录 <code>playwright-report</code>，可以通过以下命令查看测试报告</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> playwright show-report
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/software-test/1683277713874.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h2 id="常见场景与解决方案" tabindex="-1"><a class="header-anchor" href="#常见场景与解决方案" aria-hidden="true">#</a> 常见场景与解决方案</h2><h3 id="应用登录" tabindex="-1"><a class="header-anchor" href="#应用登录" aria-hidden="true">#</a> 应用登录</h3><p>下面给出一个自动登录、并保存用户数据的解决方案。</p><p>先创建文件夹，并让 git 忽略它</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> playwright/auth
<span class="token builtin class-name">echo</span> <span class="token string">&quot;playwright/auth&quot;</span> <span class="token operator">&gt;&gt;</span> .gitignore
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>创建 login.ts</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> chromium<span class="token punctuation">,</span> expect<span class="token punctuation">,</span> FullConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@playwright/test&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">config</span><span class="token operator">:</span> FullConfig</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;setting up&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> storageState <span class="token punctuation">}</span> <span class="token operator">=</span> config<span class="token punctuation">.</span>projects<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>use
  <span class="token keyword">const</span> browser <span class="token operator">=</span> <span class="token keyword">await</span> chromium<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> page <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">newPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 这里执行登录操作</span>
  <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token string">&#39;http://localhost:3000/login&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">getByRole</span><span class="token punctuation">(</span><span class="token string">&#39;textbox&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">locator</span><span class="token punctuation">(</span><span class="token string">&#39;input[type=&quot;password&quot;]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">&#39;pass&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">getByRole</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;登录&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 等待成功</span>
  <span class="token keyword">await</span> <span class="token function">expect</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">getByRole</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;登录&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">toBeVisible</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// End of authentication steps.</span>

  <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">storageState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> storageState <span class="token keyword">as</span> string <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> login
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改 playwright.config.ts</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">globalSetup</span><span class="token operator">:</span> require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;./login&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 添加这一行</span>
  <span class="token literal-property property">projects</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;chromium&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">{</span> 
        <span class="token operator">...</span>devices<span class="token punctuation">[</span><span class="token string">&#39;Desktop Chrome&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token literal-property property">storageState</span><span class="token operator">:</span> <span class="token string">&#39;playwright/auth/user.json&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 添加这一行</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="环境变量" tabindex="-1"><a class="header-anchor" href="#环境变量" aria-hidden="true">#</a> 环境变量</h3><p>通常不同的环境 url 前缀是不同的，我们希望通过变量注入的方式来适配不同的环境，而不是硬编码在测试用例里。</p><p>我们可以借助模块 <code>dotenv</code>， 来配置 baseURL。</p><p>首先安装该模块：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">add</span> dotenv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在项目根目录新建 <code>.env</code> 文件：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">vi</span> .env
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输入以下内容：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">BASE_URL</span><span class="token operator">=</span>http://dev-domain.company.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>修改 playwright.config.ts</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 加载配置</span>
<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;dotenv&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">baseURL</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">BASE_URL</span> <span class="token operator">?</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">BASE_URL</span> <span class="token operator">:</span> <span class="token string">&#39;http://127.0.0.1:3000&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 如果没有设置 .env，就默认使用本地路径</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，测试用例里，url 路径只写相对路径 <code>/path</code>，程序会自动拼接成完整的路径：<code>http://dev-domain.company.com/path</code></p><p>以后要测试不同的环境时，只需要修改 <code>.env</code> 的变量值即可。</p><h3 id="超时时间" tabindex="-1"><a class="header-anchor" href="#超时时间" aria-hidden="true">#</a> 超时时间</h3><p>默认的超时时间不太够用，建议修改 playwright.config.ts:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token comment">// 单个用例的超时时间</span>
  <span class="token literal-property property">expect</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token comment">// expect 语句的超时时间</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同时要注意拆分用例，没有依赖关系的用例建议拆分开来，避免用例执行时间过长超时。</p><h3 id="元素选择" tabindex="-1"><a class="header-anchor" href="#元素选择" aria-hidden="true">#</a> 元素选择</h3><p>人们对元素选择的第一反应是使用 CSS 或 XPath，但 Playwright 并不鼓励这样使用，因为这些选择器容易改变。较为好的办法是，为测试元素添加专门的属性 testid，如下所示：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">data-testid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>my-div<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后通过下列方式进行选择：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">getByTestId</span><span class="token punctuation">(</span><span class="token string">&#39;my-div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,61),m={href:"https://playwright.dev/docs/locators#locate-by-role",target:"_blank",rel:"noopener noreferrer"},v=s("br",null,null,-1),h=s("img",{src:"https://raw.gitmirror.com/levy9527/image-holder/main/docs/software-test/1683277746417.png",alt:"image.png",loading:"lazy"},null,-1),b=e(`<p>这里值得一提的是，业务class是针对 Tailwind CSS 这种“解构主义”的纯样式class而言的。你会发现，如果全是 Tailwind 的class，没有业务样式，E2E测试代码很不好写。</p><p>更复杂的示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">locator</span><span class="token punctuation">(</span><span class="token string">&#39;.el-table__row&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">locator</span><span class="token punctuation">(</span><span class="token string">&#39;.el-table_1_column_1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">locator</span><span class="token punctuation">(</span><span class="token string">&#39;.indicator-explore-chart-dlg .el-button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> treeRow <span class="token operator">=</span> page<span class="token punctuation">.</span><span class="token function">locator</span><span class="token punctuation">(</span><span class="token string">&#39;.el-tree-node__content&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">hasText</span><span class="token operator">:</span> <span class="token string">&#39;全部&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> checkAllElement <span class="token operator">=</span> treeRow<span class="token punctuation">.</span><span class="token function">locator</span><span class="token punctuation">(</span><span class="token string">&#39;label.is-checked&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">await</span> <span class="token function">expect</span><span class="token punctuation">(</span>checkAllElement<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveCount</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果是使用 VS Code，有辅助办法：</p><ol><li>点击“Pick locator”<br><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/software-test/1683421157907.png" alt="image.png" loading="lazy"></li><li>切换到浏览器界面，点击目标元素</li><li>切回 VS Code，即可看到相应的元素选择代码<br><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/software-test/1683421163861.png" alt="image.png" loading="lazy"></li></ol><h3 id="声明断言-检查元素是否存在" tabindex="-1"><a class="header-anchor" href="#声明断言-检查元素是否存在" aria-hidden="true">#</a> 声明断言 &amp;&amp; 检查元素是否存在</h3><p>生成的代码是没有断言的，因此，很有可能页面报错了，用例执行报告仍然显示成功。为避免这种情况，每个用例至少要有一句断言。</p><p>常用的断言是，检查某一元素是否存在：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">await</span> <span class="token function">expect</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">locator</span><span class="token punctuation">(</span><span class="token string">&#39;.selected-item&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveCount</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 1 代表相应的元素数量</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当然也可以用以下方法，这取决于元素是否可见（元素存在，未必可见）。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">await</span> <span class="token function">expect</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">locator</span><span class="token punctuation">(</span><span class="token string">&#39;.selected-item&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeVisible</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意，Node.js 才可以在 locator 里写 CSS 选择器，如果是 Python, 需要使用<code>query_selector</code>：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">await</span> expect<span class="token punctuation">(</span>page<span class="token punctuation">.</span>query_selector<span class="token punctuation">(</span><span class="token string">&#39;.selected-item&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toBeVisible<span class="token punctuation">(</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,13),y={href:"https://playwright.dev/docs/test-assertions#auto-retrying-assertions",target:"_blank",rel:"noopener noreferrer"},f=e(`<h3 id="获取第n个元素" tabindex="-1"><a class="header-anchor" href="#获取第n个元素" aria-hidden="true">#</a> 获取第n个元素</h3><p>通过定位器得到的元素可能不止一个，可以使用以下代码获得具体某一个元素：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>page<span class="token punctuation">.</span><span class="token function">locator</span><span class="token punctuation">(</span><span class="token string">&#39;.my-class&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nth</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// n 从 0 开始算起</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="遍历元素" tabindex="-1"><a class="header-anchor" href="#遍历元素" aria-hidden="true">#</a> 遍历元素</h3><p>使用定位器后，调用<code>.all()</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> row <span class="token keyword">of</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">getByRole</span><span class="token punctuation">(</span><span class="token string">&#39;listitem&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">await</span> row<span class="token punctuation">.</span><span class="token function">textContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="获取元素属性" tabindex="-1"><a class="header-anchor" href="#获取元素属性" aria-hidden="true">#</a> 获取元素属性</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;href&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="判断子元素数量" tabindex="-1"><a class="header-anchor" href="#判断子元素数量" aria-hidden="true">#</a> 判断子元素数量</h3>`,9),w=s("code",null,"$",-1),x=s("code",null,"$$",-1),_={href:"https://playwright.dev/docs/api/class-elementhandle#element-handle-query-selector",target:"_blank",rel:"noopener noreferrer"},q=e(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> hiddenColumns <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;.table-section .hidden-columns&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span><span class="token keyword">await</span> hiddenColumns<span class="token punctuation">.</span><span class="token function">$$</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveLength</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="鼠标悬浮" tabindex="-1"><a class="header-anchor" href="#鼠标悬浮" aria-hidden="true">#</a> 鼠标悬浮</h3><p>有些元素是在鼠标悬浮时才显示或创建的，可以使用以下代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">locator</span><span class="token punctuation">(</span><span class="token string">&#39;.my-class&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hover</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 模拟鼠标悬浮事件</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">locator</span><span class="token punctuation">(</span><span class="token string">&#39;.my-class .hover-element&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 点击悬浮后显示的元素</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这里有个问题，自己怎么知道悬浮后显示的元素是否正确地定位到了呢？可以通过下面的小技巧：</p><ol><li>切换到 codegen 打开的浏览器页面</li><li>打开网页控制台（按F12)</li><li>鼠标悬浮在目标元素上面，然后右键，如下图所示</li></ol><figure><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/software-test/1683277759344.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><ol start="4"><li>点击控制台内部，则此时元素不会丢失 hover 状态，如下图所示</li></ol><figure><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/software-test/1683277780882.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><ol start="5"><li>切换到 VS Code</li></ol><figure><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/software-test/1683277793308.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h3 id="操作剪贴板" tabindex="-1"><a class="header-anchor" href="#操作剪贴板" aria-hidden="true">#</a> 操作剪贴板</h3><p>读写剪贴板需要设置权限，下面给出一个判断是否成功从剪贴板获取特定文本的测试用例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;clipboard&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>page<span class="token punctuation">,</span> context<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    context<span class="token punctuation">.</span><span class="token function">grantPermissions</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;clipboard-read&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token string">&#39;www.my-home.com&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">getByRole</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Copy&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> copyText <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> navigator<span class="token punctuation">.</span>clipboard<span class="token punctuation">.</span><span class="token function">readText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> <span class="token function">expect</span><span class="token punctuation">(</span>copyText<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;text from copy!&#39;</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="持续集成" tabindex="-1"><a class="header-anchor" href="#持续集成" aria-hidden="true">#</a> 持续集成</h2>`,15),j={href:"https://playwright.dev/docs/ci#jenkins",target:"_blank",rel:"noopener noreferrer"},C=e(`<p>端对端的测试耗时较长，并且对环境的稳定性有要求，作为回归测试的实践时，一般倾向于借助定时任务跑测试用例。</p><p>新建调度：<br><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/software-test/1683436020492.png" alt="image.png" loading="lazy"><br> 设置调度时间及环境变量：</p><ul><li>每 6 小时跑一次</li><li>e2e 环境变量的值为 true</li></ul><figure><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/software-test/1683436027996.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>现在可以开始编写 .gitlab-ci.yml，下面只给出测试相关的配置。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">image</span><span class="token punctuation">:</span> node<span class="token punctuation">:</span>lts <span class="token comment"># it doesn&#39;t matter because playwright will use another image</span>

<span class="token key atrule">cache</span><span class="token punctuation">:</span>
  <span class="token key atrule">paths</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> node_modules/

<span class="token key atrule">stages</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> test

<span class="token key atrule">e2e</span><span class="token punctuation">:</span>
  <span class="token key atrule">stage</span><span class="token punctuation">:</span> test
  <span class="token key atrule">tags</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> your<span class="token punctuation">-</span>runner<span class="token punctuation">-</span>name <span class="token comment"># 把这里修改成实际的 gitlab runner 对应的 tag</span>
  <span class="token key atrule">rules</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">if</span><span class="token punctuation">:</span> <span class="token string">&#39;$CI_PIPELINE_SOURCE == &quot;schedule&quot; &amp;&amp; $e2e&#39;</span>
  <span class="token key atrule">image</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> mcr.microsoft.com/playwright<span class="token punctuation">:</span>v1.33.0<span class="token punctuation">-</span>jammy
    <span class="token key atrule">entrypoint</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;/bin/bash&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;-c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ln -snf /bin/bash /bin/sh &amp;&amp; /bin/bash -c $0&#39;</span> <span class="token punctuation">]</span>
  <span class="token key atrule">script</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> yarn <span class="token punctuation">-</span><span class="token punctuation">-</span>frozen<span class="token punctuation">-</span>lockfile <span class="token punctuation">-</span><span class="token punctuation">-</span>ignore<span class="token punctuation">-</span>engines
    <span class="token punctuation">-</span> yarn playwright install <span class="token punctuation">-</span><span class="token punctuation">-</span>with<span class="token punctuation">-</span>deps chromium
    <span class="token punctuation">-</span> yarn playwright test
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意点：</p>`,7),R={href:"https://gitlab.com/gitlab-org/gitlab-runner/-/issues/27614",target:"_blank",rel:"noopener noreferrer"},z=s("li",null,"--ignore-engines 可以在不修改源码的情况下避免安装失败",-1),S=s("li",null,"只有定时调度才会触发该任务的执行",-1),B={href:"https://github.com/nodejs/help/issues/1754#issuecomment-1260462271",target:"_blank",rel:"noopener noreferrer"},P=e(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">vi</span> /srv/gitlab-runner/config/config.toml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>根据 token 找到对应的 Runner 配置，按照下图所示，把红框处的值设置成 <code>true</code><br><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/software-test/1683277800200.png" alt="image.png" loading="lazy"><br> config.toml 里面可能会有多个 Runner 配置，如何找到要修改哪一个呢？<br> 可以在项目界面，根据下图所示的 token（w8exPBfA） 去查找。<br><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/software-test/1683277808112.png" alt="image.png" loading="lazy"></p><p>修改完后，重启 Gitlab Runner</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> restart gitlab-runner 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>最后，使用 Chromium 可能会出现内存超出限制的问题，需要对 Docker 设置 --ipc=host，配置 .gitlab-ci.yml 如下：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> docker<span class="token punctuation">:</span>dind
    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;--insecure-registry&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;registry.example.com&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;--storage-driver=overlay2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;--iptables=false&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;--ip-masq=false&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;--ipv6=false&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;--fixed-cidr=10.0.0.0/8&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;--fixed-cidr-v6=fc00::/7&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;-H&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;tcp://0.0.0.0:2375&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;-H&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;unix:///var/run/docker.sock&quot;</span><span class="token punctuation">]</span>
    <span class="token key atrule">ipc</span><span class="token punctuation">:</span> host
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h2>`,7),E={id:"setup-py-bdist-wheel-did-not-run-successfully",tabindex:"-1"},V=s("a",{class:"header-anchor",href:"#setup-py-bdist-wheel-did-not-run-successfully","aria-hidden":"true"},"#",-1),T={href:"http://setup.py",target:"_blank",rel:"noopener noreferrer"},L=e(`<p>Python安装时，可能会再现此错误。解决方案如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pip install cmake
<span class="token comment"># or </span>
pip3 install cmake
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后，再安装</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pip install wheel setuptools <span class="token operator">-</span><span class="token operator">-</span>upgrade
<span class="token comment"># or</span>
pip3 install wheel setuptools <span class="token operator">-</span><span class="token operator">-</span>upgrade
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，重新安装Playwright即可</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pip install playwright
<span class="token comment"># or</span>
pip3 install playwright
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>playwright install <span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">with</span><span class="token operator">-</span>deps chromium
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,7);function A(I,$){const t=p("ExternalLinkIcon"),o=p("RouterLink");return i(),l("div",null,[d,s("p",null,[n("推荐再安装 "),s("a",k,[n("VS Code 插件"),a(t)]),n("，获取更好的使用体验。")]),g,s("p",null,[n("当然，这种方式会对源代码有侵入。更为折衷的方式是，优先使用下列"),s("a",m,[n("官方推荐的方法"),a(t)]),n("进行元素选择，最后再使用业务 class，"),v,h]),b,s("p",null,[n("更多断言写法，参考官方文档("),s("a",y,[n("https://playwright.dev/docs/test-assertions#auto-retrying-assertions"),a(t)]),n(")。")]),f,s("p",null,[n("使用 "),w,n(" 及 "),x,n(),s("a",_,[n("元素选择器"),a(t)])]),q,s("p",null,[n("以 Gitlab CI 为例，说明 Playwright 如何集成进 CI 流水线中。其他方式如 Jenkins，请"),s("a",j,[n("参考文档"),a(t)]),n("。")]),s("p",null,[n("首先确保已安装 Gitlab Runner 并成功注册，具体操作可以参考"),a(o,{to:"/git/gitlab-ci.html#%E5%AE%89%E8%A3%85gitlab-runner"},{default:u(()=>[n("安装文档")]),_:1}),n("。")]),C,s("ol",null,[s("li",null,[n("entrypoint 解决的是 "),s("a",R,[n("shell not found"),a(t)]),n(" 问题")]),z,S]),s("p",null,[n("再修改 Gitlab Runner 的配置，解决"),s("a",B,[n("yarn命令无法运行"),a(t)]),n("的问题：")]),P,s("h3",E,[V,n(),s("strong",null,[s("a",T,[n("setup.py"),a(t)]),n(" bdist_wheel did not run successfully")])]),L])}const H=c(r,[["render",A],["__file","use-playwright-for-ui-testing.html.vue"]]);export{H as default};
