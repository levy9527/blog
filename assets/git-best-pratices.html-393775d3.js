import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{r as s,o,c as l,a as e,b as a,d as i,f as t}from"./app-abd65974.js";const d={},h=t('<p>2020-09-21</p><h1 id="git最佳实践" tabindex="-1"><a class="header-anchor" href="#git最佳实践" aria-hidden="true">#</a> Git最佳实践</h1><h2 id="精简提交" tabindex="-1"><a class="header-anchor" href="#精简提交" aria-hidden="true">#</a> 精简提交</h2><p>一次只提交一个“瘦”的功能，同时只包含相关改动文件。例如，对于两个错误的修复应该进行两次不同的提交。<br> 如果发现写提交信息时，需要写两点以上;  则可以考虑拆分提交。</p><h2 id="频繁提交" tabindex="-1"><a class="header-anchor" href="#频繁提交" aria-hidden="true">#</a> 频繁提交</h2><p>一次提交应只对应一个“瘦”的功能。从而达到频繁提交的目标。<br> 经常性地提交改动可以确保不会出现特别庞大的提交，同时也可以比较精准地对应到所需要的改动上。</p><p>此外，通过频繁地提交也可以比较快速地和其他开发人员来共享你的改动。同样也会避免在整合代码时出现过多的合并冲突。相反的，非常庞大的提交会加大整合代码时出现冲突的风险，解决这些冲突也会非常复杂。</p><h2 id="不要提交不完整的改动" tabindex="-1"><a class="header-anchor" href="#不要提交不完整的改动" aria-hidden="true">#</a> 不要提交不完整的改动</h2><p>虽然原则上来说不要提交一些还没有完成的改动，但是对于一个非常庞大的新功能来说，也并不意味着你必须整体完成这个功能后才可以提交。恰恰相反，你必须把那些改动正确地分割成一些有意义的逻辑模块来进行频繁地提交。</p><p>如果你仅仅是因为急着想要下班，或者是想要得到一个干净的工作副本（比如想要切换到另一个分支上），你可以利用 Git 所提供的储藏（Stash）功能来解决这些问题。切记不要把那些不完整的改动提交到仓库中。</p><h2 id="提交前测试那些改动" tabindex="-1"><a class="header-anchor" href="#提交前测试那些改动" aria-hidden="true">#</a> 提交前测试那些改动</h2><p>不要理所当然地认为自己完成的改动都是正确的。所有的改动一定要通过彻底地测试才表示它真正地被完成了。</p><h2 id="版本控制不是备份系统" tabindex="-1"><a class="header-anchor" href="#版本控制不是备份系统" aria-hidden="true">#</a> 版本控制不是备份系统</h2><p>版本控制系统具有一个很强大的附带功能，那就是服务器端的备份功能。但是千万不要把 VCS 仅仅当成一个备份系统。特别需要注意的是，只能提交那些有意义的改动。</p><h2 id="github实例" tabindex="-1"><a class="header-anchor" href="#github实例" aria-hidden="true">#</a> Github实例</h2><h3 id="一个功能对应一个分支" tabindex="-1"><a class="header-anchor" href="#一个功能对应一个分支" aria-hidden="true">#</a> 一个功能对应一个分支</h3><p>下面是好的示例： 格式化代码，也应该单独一个PR<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682344980430.png" alt="" loading="lazy"><br> 下面是不好的示例：因为一个PR修改了不同的主题内容<br><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682344985874.png" alt="" loading="lazy"><br><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682344990582.png" alt="" loading="lazy"></p><h3 id="提交-瘦-的pr" tabindex="-1"><a class="header-anchor" href="#提交-瘦-的pr" aria-hidden="true">#</a> 提交“瘦”的PR</h3>',18),c={href:"https://deliveroo.engineering/2017/09/06/play-pull-request-roulette.html#ideas-to-make-your-prs-more-review-friendly",target:"_blank",rel:"noopener noreferrer"},g=e("br",null,null,-1),p=e("br",null,null,-1),m=e("br",null,null,-1),u=e("img",{src:"https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682344998899.png",alt:"",loading:"lazy"},null,-1),b=e("p",null,[a("下图是拆分后："),e("img",{src:"https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682345004360.png",alt:"",loading:"lazy"})],-1),_=e("p",null,[a("单个PR的改动文件只有11个"),e("br"),e("img",{src:"https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682345009991.png",alt:"",loading:"lazy"}),a("每个 PR 改动的文件少了，这样 review 起来就更容易了。")],-1),f=e("h3",{id:"使用正确的标题",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#使用正确的标题","aria-hidden":"true"},"#"),a(" 使用正确的标题")],-1),v={href:"https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#commits",target:"_blank",rel:"noopener noreferrer"},y=t(`<p>另外，请回答：出于什么原因需要进行这次修改？具体改动了些什么？</p><ul><li>使用一定要使用现在时祈使句（例如要使用 change ，而不是 changed 或 changes）。</li><li>优先使用正面肯定语句，而不是否定句。</li></ul><p>好的示例：<code>docs: extraQuery 的正确使用方法</code><br> 不好的示例：<code>docs: 更新不直观的例子</code></p><h3 id="根据模板填写pr描述" tabindex="-1"><a class="header-anchor" href="#根据模板填写pr描述" aria-hidden="true">#</a> 根据模板填写PR描述</h3><p>这是我们 Github 的 PR 模板，融合了我们的最佳实践<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682345014045.png" alt="" loading="lazy"><br> 下面是实际的好的例子<img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682345019293.png" alt="" loading="lazy"></p><h3 id="自动关闭issue" tabindex="-1"><a class="header-anchor" href="#自动关闭issue" aria-hidden="true">#</a> 自动关闭issue</h3><figure><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682345024941.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&#39;fix #6&#39;</span>
<span class="token comment"># 或</span>
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&#39;close #6&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当pr合并时，将自动close issue</p><h3 id="_1-2-review-规则" tabindex="-1"><a class="header-anchor" href="#_1-2-review-规则" aria-hidden="true">#</a> 1+2 review 规则</h3><p>1 是指发起 PR 的人，2 是指进行 code review 的人。也即，每一个 PR，至少要经过两个团队成员 approve 才能合并。</p><blockquote><p>上面是针对 github 的协作，项目组中可酌情变为 1+1 规则</p></blockquote><p><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682345031945.png" alt="" loading="lazy"><br><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682345036964.png" alt="" loading="lazy"></p><h3 id="礼貌提问" tabindex="-1"><a class="header-anchor" href="#礼貌提问" aria-hidden="true">#</a> 礼貌提问</h3><p>在 github 向人提问时，需要有礼貌。当提出 feature request时，还要说明自己的情况，尽可能提供更多的信息给对方。<br><img src="https://raw.gitmirror.com/levy9527/image-holder/main/docs/git/1682345041577.png" alt="" loading="lazy"><br> 上面的示例有三个重点：</p><ol><li>开头表达感谢</li><li>中间说明己方的使用情况，并给出相应链接</li><li>最后参考业界已有实现，给出一个方案设想，并给出相应链接</li></ol><h2 id="学习资源" tabindex="-1"><a class="header-anchor" href="#学习资源" aria-hidden="true">#</a> 学习资源</h2>`,17),x={href:"https://git.oschina.net/progit/",target:"_blank",rel:"noopener noreferrer"},w={href:"https://learngitbranching.js.org/?NODEMO",target:"_blank",rel:"noopener noreferrer"};function k(P,z){const r=s("ExternalLinkIcon");return o(),l("div",null,[h,e("p",null,[a("参考文章："),e("a",c,[a("https://deliveroo.engineering/2017/09/06/play-pull-request-roulette.html#ideas-to-make-your-prs-more-review-friendly"),i(r)]),g,a(" 其中最重要的一点：不要一次提交一个很大改动的PR，否则别人很难 review，要学会拆分步骤。"),p,a(" 下面是一个 PR 示例："),m,a(" 拆分前，包含了35个改动，很难 review"),u]),b,_,f,e("p",null,[e("a",v,[a("相关规范看这里"),i(r)])]),y,e("ul",null,[e("li",null,[e("a",x,[a("Pro Git"),i(r)])]),e("li",null,[e("a",w,[a("https://learngitbranching.js.org"),i(r)])])])])}const V=n(d,[["render",k],["__file","git-best-pratices.html.vue"]]);export{V as default};
