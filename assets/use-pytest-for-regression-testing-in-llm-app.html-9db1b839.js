const t=JSON.parse('{"key":"v-7ba1021b","path":"/software-testing/use-pytest-for-regression-testing-in-llm-app.html","title":"使用 pytest 为LLM应用添加回归测试","lang":"zh-CN","frontmatter":{"date":"2023-12-08T00:00:00.000Z","tag":["Python","Testing","Gitlab"],"description":"使用 pytest 为LLM应用添加回归测试 回归测试的必要性 基于 LLM 的 Chat 应用大量依赖了 Prompt Engineering，而用户的输入又千奇百怪，调整了 Prompt 模板，很可能会有意想不到的效果：满足了新需求，却破坏了旧功能。 因此，LLM应用比任何时候都需要回归测试，确保在迭代过程中，不破坏旧功能、不让已修复的bug复现。 而回归测试，当然是自动化执行效率才高。本文交分享如何使用 pytest 对 LLM 应用进行自动化的回归测试。","head":[["meta",{"property":"og:url","content":"https://levy.vip/software-testing/use-pytest-for-regression-testing-in-llm-app.html"}],["meta",{"property":"og:site_name","content":"levy"}],["meta",{"property":"og:title","content":"使用 pytest 为LLM应用添加回归测试"}],["meta",{"property":"og:description","content":"使用 pytest 为LLM应用添加回归测试 回归测试的必要性 基于 LLM 的 Chat 应用大量依赖了 Prompt Engineering，而用户的输入又千奇百怪，调整了 Prompt 模板，很可能会有意想不到的效果：满足了新需求，却破坏了旧功能。 因此，LLM应用比任何时候都需要回归测试，确保在迭代过程中，不破坏旧功能、不让已修复的bug复现。 而回归测试，当然是自动化执行效率才高。本文交分享如何使用 pytest 对 LLM 应用进行自动化的回归测试。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-22T08:20:17.000Z"}],["meta",{"property":"article:author","content":"levy"}],["meta",{"property":"article:tag","content":"Python"}],["meta",{"property":"article:tag","content":"Testing"}],["meta",{"property":"article:tag","content":"Gitlab"}],["meta",{"property":"article:published_time","content":"2023-12-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-22T08:20:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用 pytest 为LLM应用添加回归测试\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-12-08T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-22T08:20:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"levy\\"}]}"]]},"headers":[{"level":2,"title":"回归测试的必要性","slug":"回归测试的必要性","link":"#回归测试的必要性","children":[]},{"level":2,"title":"pytest","slug":"pytest","link":"#pytest","children":[{"level":3,"title":"安装","slug":"安装","link":"#安装","children":[]},{"level":3,"title":"配置","slug":"配置","link":"#配置","children":[]},{"level":3,"title":"用例","slug":"用例","link":"#用例","children":[]}]},{"level":2,"title":"持续集成","slug":"持续集成","link":"#持续集成","children":[]}],"git":{"createdTime":1703233217000,"updatedTime":1703233217000,"contributors":[{"name":"levy","email":"levy9527@gmail.com","commits":1}]},"readingTime":{"minutes":2.9,"words":871},"filePathRelative":"software-testing/use-pytest-for-regression-testing-in-llm-app.md","localizedDate":"2023年12月8日","excerpt":"<h1> 使用 pytest 为LLM应用添加回归测试</h1>\\n<h2> 回归测试的必要性</h2>\\n<p>基于 LLM 的 Chat 应用大量依赖了 Prompt Engineering，而用户的输入又千奇百怪，调整了 Prompt 模板，很可能会有意想不到的效果：满足了新需求，却破坏了旧功能。</p>\\n<p>因此，LLM应用比任何时候都需要回归测试，确保在迭代过程中，不破坏旧功能、不让已修复的bug复现。</p>\\n<p>而回归测试，当然是自动化执行效率才高。本文交分享如何使用 pytest 对 LLM 应用进行自动化的回归测试。</p>\\n","autoDesc":true}');export{t as data};
