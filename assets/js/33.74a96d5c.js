(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{305:function(t,a,s){"use strict";s.r(a);var n=s(10),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"使用-restassured-进行-api-测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-restassured-进行-api-测试"}},[t._v("#")]),t._v(" 使用 RestAssured 进行 API 测试")]),t._v(" "),a("h2",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),a("p",[t._v("本文将借助 RestAssured 工具，向大家介绍如何进行 API 测试，从而在团队中开启接口自动化之路。")]),t._v(" "),a("p",[t._v("本文的示例代码使用的是 Java 语言。尽管本文的首要读者是 Java 研发人员，但道理是相通的，其他语言的研发人员也能从中受益。")]),t._v(" "),a("h2",{attrs:{id:"what"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#what"}},[t._v("#")]),t._v(" What")]),t._v(" "),a("p",[t._v("什么是 API 测试？简单来说，可以认为是针对 Controller 层的测试，但不是 Mock，而是会真实地处理请求，与数据库或外部服务进行交互。")]),t._v(" "),a("h2",{attrs:{id:"why"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#why"}},[t._v("#")]),t._v(" Why")]),t._v(" "),a("p",[t._v("为什么要做 API 测试呢？")]),t._v(" "),a("p",[t._v("考虑有过这样的场景：")]),t._v(" "),a("ul",[a("li",[t._v("加一个新功能，自测没问题，结果被测试人员发现一个旧模块出了问题，感到措手不及")]),t._v(" "),a("li",[t._v("后端写好了接口，前端还没开发好界面，于是感觉不方便自测，因为没有界面，只好催前端快去做页面")])]),t._v(" "),a("p",[t._v("API 测试就是来解决上述问题的。做 API 测试的原因有：")]),t._v(" "),a("ul",[a("li",[t._v("必要性：做回归测试，避免添加新功能时破坏旧功能。")]),t._v(" "),a("li",[t._v("便利性：方便本地调试，不用部署到线上，依赖界面去测试。")]),t._v(" "),a("li",[t._v("资产化：让测试用例变成资产，与团队共享。")])]),t._v(" "),a("p",[t._v("当然，要做好 API 测试，还要接受这样的认知： 接口自动化测试并不仅仅是测试人员事情，研发人员也有责任把它做好。 否则，研发人员难免会觉得这不关我的事, 从而不愿意写这种代码。 建议研发人员从以下方便思考其好处，提升行动的积极性：")]),t._v(" "),a("ul",[a("li",[t._v("减少阻塞，接口自测不再依赖前端")]),t._v(" "),a("li",[t._v("提高效率，本地就能自测，不用把应用部署到线上环境")]),t._v(" "),a("li",[t._v("提高质量，减少部署到研发环境、前端一调用接口就 500 的情况")])]),t._v(" "),a("h2",{attrs:{id:"为什么不用postman"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么不用postman"}},[t._v("#")]),t._v(" 为什么不用Postman")]),t._v(" "),a("p",[t._v("Postman 确实是符合直觉的接口调试的第一选项。 但注意，调试不等于测试。")]),t._v(" "),a("p",[t._v("Postman 在实践过程中，最大的问题在于，无法将测试用例有效地资产化:")]),t._v(" "),a("ul",[a("li",[t._v("你会在 Postman 里写断言吗？很少吧，你其实是在用肉眼去检查接口成功与否，这本质还是手工测试")]),t._v(" "),a("li",[t._v("你的 Postman 数据能与团队共享吗？不能吧，大多数人的 Postman 数据是在本地的，也不会去付费创建一个团队以共享数据")]),t._v(" "),a("li",[t._v("你的 Postman 数据在有版本管理吗？没有吧，大多数人的 Postman 数据是与源代码分离的，不利于维护与管理")])]),t._v(" "),a("p",[t._v("另外，如果要与 CI 结合，Postman 的数据更适合使用 Node.js 的 "),a("a",{attrs:{href:"https://github.com/postmanlabs/newman",target:"_blank",rel:"noopener noreferrer"}},[t._v("Newman"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("p",[t._v("考虑源代码是 Java，使用 RestAssured，编写 API 测试代码用同一种语言，可以减少使用者的心智负担较轻；并且与源代码放在同一个 Git 仓库中，易于管理。")]),t._v(" "),a("p",[t._v("因此，我仍然会使用 Postman，但更多是把它应用在出现线上问题时，直接复制一个 cURL 用来复现、排查问题的情况。")]),t._v(" "),a("h2",{attrs:{id:"安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[t._v("#")]),t._v(" 安装")]),t._v(" "),a("p",[t._v("下面将介绍如何用 Maven 安装 RestAssured。")]),t._v(" "),a("p",[t._v("复制以下内容到 pom.xml 即可。")]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("io.rest-assured"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("rest-assured"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("version")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("5.3.0"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("version")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("scope")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("test"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("scope")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("exclusions")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("exclusion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("json-path"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("io.rest-assured"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("exclusion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("exclusions")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("io.rest-assured"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("json-path"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("version")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("5.3.0"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("version")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("scope")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("test"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("scope")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("io.rest-assured"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("xml-path"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("version")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("5.3.0"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("version")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("scope")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("test"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("scope")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\n")])])]),a("p",[t._v("安装完成后，重启 Spring 容器。")]),t._v(" "),a("p",[t._v("如果安装依赖不成功，可以进行以下检查：")]),t._v(" "),a("ul",[a("li",[t._v("显式指定 json-path 与 xml-path 的版本，并排除其他测试包(如 sping-boot-starter-test) 对 json-path 的依赖")]),t._v(" "),a("li",[t._v("声明放在 JUnit 前面")])]),t._v(" "),a("h2",{attrs:{id:"快速上手"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#快速上手"}},[t._v("#")]),t._v(" 快速上手")]),t._v(" "),a("p",[t._v("语法结构为： given()、when()、then()")]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[t._v("given()  // 设置请求信息\n        .log().body() // 输出请求日志\n        .when()\n        .get() // 发送请求\n        .then()\n        .log().body() // 输出响应日志\n        .statusCode(200) // 断言响应\n        ;\n")])])]),a("h2",{attrs:{id:"通用设置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#通用设置"}},[t._v("#")]),t._v(" 通用设置")]),t._v(" "),a("p",[t._v("以下代码可直接复制到 Java 测试类中。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('private RequestSpecification requestSpec;\n\n// @BeforeEach // JUnit5 \n@Before // JUnit4\npublic void init(){\n    // 如果是本地调试 domain 就是 localhost\n    RestAssured.baseURI="http://your-domain.com:port/context-path";\n\n    // 设置请求头\n    RequestSpecBuilder builder=new RequestSpecBuilder();\n    // 也可以改成调用登录接口，动态获取 token\n    String token=System.getenv("TOKEN");\n    builder.addHeader("Authorization",token); // jwt\n    // 在 give().spec() 中使用即可\n    requestSpec=builder.build();\n    }\n\n')])])]),a("h2",{attrs:{id:"请求示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#请求示例"}},[t._v("#")]),t._v(" 请求示例")]),t._v(" "),a("p",[t._v("下面是一个较完整的示例，包含了：")]),t._v(" "),a("ul",[a("li",[t._v("设置请求头")]),t._v(" "),a("li",[t._v("设置请求体")]),t._v(" "),a("li",[t._v("设置query")]),t._v(" "),a("li",[t._v("判断响应体的数据结构")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('  @Test\npublic void test(){\n    Workflow workflow = new Workflow();\n    workflow.setWorkflowId(1643167159934930966L);\n    workflow.setWorkflowName("flow");\n    List<Workflow> body = new ArrayList<>();\n    body.add(workflow);\n\n    given()\n    .spec(requestSpec)\n    .queryParam("query","value")\n    .body(JSON.toJSONString(body))\n    .log().body()\n    .when()\n    .post("/api/v1/your-api?t=1")\n    .then()\n    .log().body()\n    .statusCode(200)\n    .assertThat().body("code",equalTo("0"))\n    ;\n    }\n')])])]),a("p",[t._v("提醒，在运行测试代码前，需要做两件事：")]),t._v(" "),a("ul",[a("li",[t._v("一定保证 Web 服务已请求，因为这不是 Mock，而是会发送真实的请求。")]),t._v(" "),a("li",[t._v("正确配置了环境变量 TOKEN。如果使用 IDEA，可以编辑运行配置，在环境变量里注入类似代码：TOKEN=Bearer xxx")])]),t._v(" "),a("h2",{attrs:{id:"接口依赖"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#接口依赖"}},[t._v("#")]),t._v(" 接口依赖")]),t._v(" "),a("p",[t._v("有时在请求接口 B 之前，需要请求接口 A，于是就产生了接口依赖：B 依赖了 A。")]),t._v(" "),a("p",[t._v("此时可以使用 extract() 及 path() 获取请求 A 返回的数据。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('  @Test\npublic void test(){\n    // 发送第一个请求\n    List<Map<String, String>>workflowList = getWorkflowList();\n    if (workflowList.isEmpty()) {\n      System.out.println("workflowList  empty, test not execute");\n      return;\n    }\n\n    // 返回的数据结构是个 Map\n    // 也可以是　Map<String, Object>，这取决于你实际的数据结构\n    Map<String, String> target = workflowList.get(0);\n\n    WorkflowRunVO workflow = new WorkflowRunVO();\n    workflow.setWorkflowId(Long.valueOf(target.get("workflowId")));\n    workflow.setWorkflowName(target.get("name"));\n    List<WorkflowRunVO> body = new ArrayList<>();\n    body.add(workflow);\n\n    // 在第二个请求中断言\n    given()\n    .spec(requestSpec)\n    .body(JSON.toJSONString(body))\n    .log().body()\n    .when()\n    .post("/api/v1/workflows")\n    .then()\n    .statusCode(200)\n    .assertThat().body("code",equalTo("0")) // org.hamcrest.Matchers.equalTo\n    .log().body();\n    }\n\nprivate List<Map<String, String>>getWorkflowList(){\n    return given()\n    .spec(requestSpec)\n    .when()\n    .get("/api/v1/workflows")\n    .then()\n    .statusCode(200)\n    .extract()\n    .path("payload.content");\n    }\n')])])]),a("h2",{attrs:{id:"上传示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#上传示例"}},[t._v("#")]),t._v(" 上传示例")]),t._v(" "),a("p",[t._v("RestAssured 很强大，还能处理上传与下载的请求，简直让人“爱了爱了”。 下面是具体的示例：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('  @Test\npublic void upload(){\n    // 需要本地有文件\n    File file = new File("src/test/fixtures/txt-success");\n\n    getImportResp(file)\n    .assertThat().body("code",org.hamcrest.Matchers.equalTo("0"))\n    .assertThat().body("payload",equalTo(true))\n    ;\n    }\n\nprivate ValidatableResponse getImportResp(File file){\n    return given()\n    .spec(requestSpec)\n    .multiPart(file)\n    .when()\n    .post("/api/v1/upload")\n    .then()\n    .statusCode(200);\n    }\n')])])]),a("p",[t._v("如果想在传文件的基础上，还传其他参数，可以这样写：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('private ValidatableResponse getImportResp(File file) {\n    return given()\n    .spec(requestSpec)\n    .multiPart("file", file, "application/json")\n    .multiPart("extraParam", "value")\n    .when()\n    .post("/v1/upload")\n    .then()\n    .statusCode(200);\n    }\n')])])]),a("p",[t._v("对应的前端请求代码为(记录一下，以备不时之需😃)：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("import axios from 'axios';\n\nfunction getImportResp(file) {\n  const formData = new FormData();\n  formData.append('file', file, 'application/json');\n  formData.append('extraParam', 'value');\n\n  return axios.post('/v1/upload', formData)\n    .then(response => {\n      return response;\n    })\n    .catch(error => {\n      throw error;\n    });\n}\n")])])]),a("h2",{attrs:{id:"下载示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#下载示例"}},[t._v("#")]),t._v(" 下载示例")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('  @Test\npublic void download(){\n    Map<String, Object> license = getLicenseList().get(0);\n    if(Objects.isNull(license))return;\n\n    // 因为设置的请求头跟默认的不一样，所以单独设置\n    RequestSpecBuilder builder = new RequestSpecBuilder();\n    String token=System.getenv("TOKEN");\n    builder.addQueryParam("token",token.replace("Bearer ",""));\n    builder.addHeader("Content-Type","application/json;charset=UTF-8");\n    requestSpec=builder.build();\n\n    String result = given()\n    .spec(requestSpec)\n    .log().body()\n    .when()\n    .get("/api/v1/download/"+license.get("id"))\n    .then()\n    .statusCode(200)\n    .extract()\n    .response()\n    .asString() //　获取输出流打印的字符串\n    ;\n\n    System.out.println(result);\n    Assert.assertEquals(5,result.split("\\n").length);\n    }\n')])])]),a("p",[t._v("看到全部用例都执行成功，非常爽快！\n"),a("img",{attrs:{src:"https://raw.gitmirror.com/levy9527/image-holder/main/docs/software-testing/resetassured-download.png",alt:"resetassured-download"}})]),t._v(" "),a("h2",{attrs:{id:"其他问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他问题"}},[t._v("#")]),t._v(" 其他问题")]),t._v(" "),a("h3",{attrs:{id:"为什么不用-pytest"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么不用-pytest"}},[t._v("#")]),t._v(" 为什么不用 Pytest")]),t._v(" "),a("p",[t._v("如果编码代码的人员是测试人员，那可能首选 Pytest。但本文面向的读者的 Java 研发——既写 API，也写相应的测试代码。故选型理由参考前面 为什么不用Postman 的回答。")]),t._v(" "),a("h3",{attrs:{id:"这也是单元测试吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#这也是单元测试吗"}},[t._v("#")]),t._v(" 这也是单元测试吗")]),t._v(" "),a("p",[t._v("不是。运行上述测试代码，如果是测试本地接口，需要先在本地启动 Spring 容器；如果是测试线上接口，则需要先把应用部署到线上。因此，这是集成测试。")]),t._v(" "),a("h2",{attrs:{id:"参考资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),a("p",[t._v("官方文档："),a("a",{attrs:{href:"https://github.com/rest-assured/rest-assured/wiki/Usage#examples",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/rest-assured/rest-assured/wiki/Usage"),a("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=e.exports}}]);