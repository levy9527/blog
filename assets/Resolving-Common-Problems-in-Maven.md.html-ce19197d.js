import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o,c as i,a as n,b as a,d as e,f as t}from"./app-6c39dc78.js";const c={},r=t(`<h1 id="maven常见问题与解决方案" tabindex="-1"><a class="header-anchor" href="#maven常见问题与解决方案" aria-hidden="true">#</a> Maven常见问题与解决方案</h1><h2 id="运行-class-找不到主类" tabindex="-1"><a class="header-anchor" href="#运行-class-找不到主类" aria-hidden="true">#</a> 运行 class 找不到主类</h2><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>maven compile
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>得到 class 文件后</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>cd /my-app/target/com/mycompany/app
java App
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>报错：</p><blockquote><p>错误: 找不到或无法加载主类 App<br> 原因: java.lang.NoClassDefFoundError: com/mycompany/app/App (wrong name: App)</p></blockquote><p>这是因为主类并非在默认包下，故需要在正确的路径下调用全限定名。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /my-app/target

<span class="token function">java</span> com.mycompany.app.App
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="运行-jar-找不到主类" tabindex="-1"><a class="header-anchor" href="#运行-jar-找不到主类" aria-hidden="true">#</a> 运行 jar 找不到主类</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>maven <span class="token keyword">package</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>打出 jar 后，运行失败，因为主清单找不到主类。这是因为缺少了打包配置</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-jar-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.0.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!--           添加下面的配置 --&gt;</span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>archive</span><span class="token punctuation">&gt;</span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifest</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mainClass</span><span class="token punctuation">&gt;</span></span>com.mycompany.app.App<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mainClass</span><span class="token punctuation">&gt;</span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifest</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>archive</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="编译时找不到主类" tabindex="-1"><a class="header-anchor" href="#编译时找不到主类" aria-hidden="true">#</a> 编译时找不到主类</h2><p>表现：Maven 有相应的 jar，IDEA 能自动 import，编译时却报找不到类 <code>NoClassDefFoundError</code></p><p>实例：flink-quickstart-java 项目就是如此。</p>`,16),d={href:"https://www.baeldung.com/maven-dependency-scopes",target:"_blank",rel:"noopener noreferrer"},u=t(`<p>解决方案：</p><ol><li>build configuration</li><li>modify options</li><li>把 provided 加入 classpath</li></ol><figure><img src="https://raw.gitmirror.com/levy9527/image-holder/main/md-image-kit/1668066163479-43ea1144-f764-4ec0-b5ca-823b8efccae8.png" alt="" tabindex="0"><figcaption></figcaption></figure><h2 id="设置maven目录" tabindex="-1"><a class="header-anchor" href="#设置maven目录" aria-hidden="true">#</a> 设置Maven目录</h2><p><img src="https://raw.gitmirror.com/levy9527/image-holder/main/md-image-kit/1670227320589-edf93b93-25d6-4992-9fe1-528218537ecf.png" alt=""><br> 尽管IDEA可以设置 local repository，但实际上还是以 settings.xml 的配置为主，注意检查路径是否正确</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&lt;</span>localRepository<span class="token operator">&gt;</span>/path/to/repository<span class="token operator">&lt;</span>/localRepository<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="无法识别-maven-项目" tabindex="-1"><a class="header-anchor" href="#无法识别-maven-项目" aria-hidden="true">#</a> 无法识别 Maven 项目</h2><p><img src="https://raw.gitmirror.com/levy9527/image-holder/main/md-image-kit/1668149177501-37c6b4d2-1674-4ab2-b7c7-f7774ab90e12.png" alt=""><br><img src="https://raw.gitmirror.com/levy9527/image-holder/main/md-image-kit/1668149163603-a59d7ffe-7236-4756-8add-a55c1d282754.png" alt=""></p><p>此时代码的方法、变量不能跳转到定义处，无法编译、找不到主类。</p><p>表面上看，这是没有把源码目录设置为 src root，但实际上，这是 pom.xml 解析缓存或Maven依赖下载失败后的结果。</p><p>这里又分两种情况：</p><ol><li>子模块不能被识别</li><li>主模块不能被识别</li></ol><p>如果是第1种情况，添加了子模块不能正确识别，删除 <code>&lt;module&gt;my-new-submodule&lt;/module&gt;</code> 这一行，重新加载 pom.xml；再重新添加这一行，然后重新加载 pom.xml 即可。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>my-new-submodule<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果是第2种情况，笔者曾遇到的场景是： 因为把 IDEA 下载依赖的进程杀死了而导致的。 解决方案：删除项目，重新创建。</p><h2 id="使用了不想要的镜像源" tabindex="-1"><a class="header-anchor" href="#使用了不想要的镜像源" aria-hidden="true">#</a> 使用了不想要的镜像源</h2><p>有可能第三方依赖包指定了第三方镜像源，而该镜像源不可用、或网络很慢，此时想避免使用该镜像源。</p><p>解决方案：观察日志，确认第三方镜像源的名字，修改 ~/.m2/settings.xml，拦截其请求</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>  <span class="token operator">&lt;</span>mirror<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>id<span class="token operator">&gt;</span>my-central<span class="token operator">&lt;</span>/id<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>mirrorOf<span class="token operator">&gt;</span>central,third-party-central<span class="token operator">&lt;</span>/mirrorOf<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>name<span class="token operator">&gt;</span>my-central<span class="token operator">&lt;</span>/name<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>url<span class="token operator">&gt;</span>my-central-url<span class="token operator">&lt;</span>/url<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>/mirror<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上配置会拦截所有指向 Maven中央仓库、third-party-central 的请求，使用 my-central 下载依赖。</p><h2 id="下载-jar-失败" tabindex="-1"><a class="header-anchor" href="#下载-jar-失败" aria-hidden="true">#</a> 下载 jar 失败</h2><p>如果因为网络问题， mvn 命令安装依赖失败（如下载某个依赖卡死），可以试试手动下载。</p><p>解决方案：</p><ol><li>点击相应的 jar 包链接，使用浏览器下载</li><li>观察 jar 包的下载链接，把下载到的 jar 复制到相应的 ~/.m2 子目录下</li><li>重新执行 mvn install</li></ol><h2 id="私服认证401" tabindex="-1"><a class="header-anchor" href="#私服认证401" aria-hidden="true">#</a> 私服认证401</h2><p>下载私服依赖时，报了 401。</p><p>解决方案：</p><ol><li>检查 ~/.m2/settings.xml，找到 server 选项，确保设置了相应的用户名与密码</li><li>点击私服链接，输入用户名与密码</li><li>如果上述步骤不能正确执行，说明设置有误，需要更正设置；如果上述步骤正常，有可能是 IDEA 抽风，建议： <ol><li>删除项目，重新克隆</li><li>手动下载 jar，放到~/.m2 目录</li></ol></li></ol><h2 id="避免缓存" tabindex="-1"><a class="header-anchor" href="#避免缓存" aria-hidden="true">#</a> 避免缓存</h2><p>pom.xml 作好设置</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>my-central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>my repo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>http://<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshots</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>updatePolicy</span><span class="token punctuation">&gt;</span></span>always<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>updatePolicy</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshots</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或命令行强制不使用依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>mvn -U clean install
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,34),m={href:"https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html",target:"_blank",rel:"noopener noreferrer"},g=n("br",null,null,-1);function k(v,h){const s=l("ExternalLinkIcon");return o(),i("div",null,[r,n("p",null,[a("原因：这跟 Maven 依赖的 score 有关，因为 pom.xml 对依赖的 scope 定义为 provided，默认时编译不会去找相应的依赖。关于 maven scope 的知识点，"),n("a",d,[a("点击这里"),e(s)]),a("。")]),u,n("p",null,[a("官网："),n("a",m,[a("https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html"),e(s)]),g,a(" 书籍：《Maven实战》")])])}const f=p(c,[["render",k],["__file","Resolving-Common-Problems-in-Maven.md.html.vue"]]);export{f as default};
