import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{o as t,c as i,e as o,a,b as n,t as l,f as s}from"./app-46c6c0c4.js";const c={},m=a("h1",{id:"使用postman进行接口测试",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#使用postman进行接口测试","aria-hidden":"true"},"#"),n(" 使用postman进行接口测试")],-1),r=a("h2",{id:"前言",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),n(" 前言")],-1),d=a("p",null,"虽然之前分享过 RestAssured 进行接口测试的教程，但实践起来，会有阻碍：研发同学还是对 Postman 更熟悉，更倾向于使用 Postman 调试接口，而不是写 Java 代码对 Controller 层进行测试。",-1),u=a("p",null,"而笔者在针对旧的 Java 项目添加接口测试时，又遇到了另一个问题：那就是由于模块依赖，进行接口测试时，还在把旧的测试代码一并带上。虽然说有办法解决，但究竟是麻烦不断。",-1),g=a("p",null,"还有就是，Java 的类型检查，在写接口测试时十分束缚手脚。如下述代码：",-1),h=s(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 为什么不设置 Map&lt;String, String&gt; ? </span>
<span class="token comment">// 因为 menu 有个字段的值是数字，使用 String 接收运行时会报错！</span>
Optional<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">&gt;&gt;</span> foundMenu <span class="token operator">=</span> menuList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>v <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  String code <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> v<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> code<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;管理员&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>笔者实在忍不住吐槽了一番：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/160590/1694596433278-eb3e5566-0126-4e93-9dfe-a9c4d8edae51.png#clientId=u840bb390-3dd6-4&amp;from=paste&amp;height=337&amp;id=u8353972f&amp;originHeight=506&amp;originWidth=490&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=162686&amp;status=done&amp;style=none&amp;taskId=u2bd878c8-bf67-4898-bc86-cdc64384d44&amp;title=&amp;width=326.6666666666667" alt="image.png" loading="lazy"><img src="https://cdn.nlark.com/yuque/0/2023/png/160590/1694596460562-b472ca9d-8b73-4e1f-b5a5-7c9c1fb8253a.png#averageHue=%23ede2e0&amp;clientId=u840bb390-3dd6-4&amp;from=paste&amp;height=156&amp;id=ucaf12f74&amp;originHeight=234&amp;originWidth=489&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=21212&amp;status=done&amp;style=none&amp;taskId=uc97f45e9-a92b-4d35-ae34-bf2855f8b56&amp;title=&amp;width=326" alt="image.png" loading="lazy"></p><p>笔者思前想后，最终还是放弃测试代码要与源码使用统一技术栈的构想，再次搬出 Postman 作为接口自动化测试的工具。</p><h2 id="本地调试" tabindex="-1"><a class="header-anchor" href="#本地调试" aria-hidden="true">#</a> 本地调试</h2><h3 id="接口集合" tabindex="-1"><a class="header-anchor" href="#接口集合" aria-hidden="true">#</a> 接口集合</h3><p>新建一个 collection，然后再在里面新建接口。</p><p>新建方法多种多样，可以手工新建，也可以 curl 导入，也可以从 swagger 导入。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/160590/1694595120400-0e37bf26-405b-412c-b54f-7057cf49ab20.png#averageHue=%23fcfafa&amp;clientId=u49f46c82-3f02-4&amp;from=paste&amp;height=251&amp;id=u6bfbe493&amp;originHeight=377&amp;originWidth=1249&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=23706&amp;status=done&amp;style=none&amp;taskId=ub80d0899-20bc-4c9e-b9c3-0462eb82e3a&amp;title=&amp;width=832.6666666666666" alt="image.png" loading="lazy"></p><h3 id="环境变量" tabindex="-1"><a class="header-anchor" href="#环境变量" aria-hidden="true">#</a> 环境变量</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/160590/1602746875957-dc9090e7-900e-4352-91f7-039792e2a9e0.png#align=left&amp;display=inline&amp;height=119&amp;margin=[object Object]&amp;name=image.png&amp;originHeight=346&amp;originWidth=1744&amp;size=178268&amp;status=done&amp;style=none&amp;width=600#averageHue=%23b9b7b6&amp;id=adhT3&amp;originHeight=346&amp;originWidth=1744&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="image.png" loading="lazy"><br> 点击右上角红框处，即可设置变量，需要先设置环境名。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/160590/1602747172023-7b96aa77-39bc-4881-b1e9-36d5535c92f1.png#align=left&amp;display=inline&amp;height=256&amp;margin=[object Object]&amp;name=image.png&amp;originHeight=584&amp;originWidth=1368&amp;size=118188&amp;status=done&amp;style=none&amp;width=600#averageHue=%23f9f9f9&amp;id=Ybwlr&amp;originHeight=584&amp;originWidth=1368&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="image.png" loading="lazy"><br> 值得注意的是：</p><ol><li>一般设置 initial value 即可</li><li>如果设置了 current value，则运行 postman 时使用的是 current value</li><li>建议只针对线上环境做相应的 environment 管理，本地开发环境通过 current value 设置即可</li></ol><p>如果有多套环境，就点击复制，再修改环境名及包含变量的 initial value 即可。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/160590/1602747475793-1f85e976-8189-44b7-9667-f1a195ff8c35.png#align=left&amp;display=inline&amp;height=93&amp;margin=[object Object]&amp;name=image.png&amp;originHeight=230&amp;originWidth=1482&amp;size=56407&amp;status=done&amp;style=none&amp;width=600#averageHue=%23f6f4f4&amp;id=ouZSe&amp;originHeight=230&amp;originWidth=1482&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="image.png" loading="lazy"></p>`,11),b=a("br",null,null,-1),f=a("img",{src:"https://cdn.nlark.com/yuque/0/2020/png/160590/1602746808280-6743bf6c-34b5-402a-abe6-397eb76c5380.png#align=left&display=inline&height=322&margin=[object Object]&name=image.png&originHeight=700&originWidth=1306&size=279151&status=done&style=none&width=600#averageHue=%23f9f8f7&id=xvnep&originHeight=700&originWidth=1306&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=",alt:"image.png",loading:"lazy"},null,-1),k=s(`<p>环境变量还可以在测试用例里去修改值：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/160590/1694424229773-4c83c6cf-0640-4c8a-aa33-38097d84f0cd.png#averageHue=%23fafaf9&amp;clientId=ud0af0b54-f452-4&amp;from=paste&amp;height=455&amp;id=uf2c9b6a5&amp;originHeight=455&amp;originWidth=1249&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=78599&amp;status=done&amp;style=none&amp;taskId=u141727ea-9797-4227-8021-b7f6d069eb7&amp;title=&amp;width=1249" alt="image.png" loading="lazy"></p><h3 id="请求设置" tabindex="-1"><a class="header-anchor" href="#请求设置" aria-hidden="true">#</a> 请求设置</h3><p>对于请求体的发送，一般进行如下设置<br><img src="https://cdn.nlark.com/yuque/0/2020/png/160590/1602747761421-f2c415ec-1b1c-48f6-976d-fbc958fdcbf3.png#align=left&amp;display=inline&amp;height=278&amp;margin=[object Object]&amp;name=image.png&amp;originHeight=610&amp;originWidth=1318&amp;size=285542&amp;status=done&amp;style=none&amp;width=600#averageHue=%23f8f6f6&amp;id=xR281&amp;originHeight=610&amp;originWidth=1318&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="image.png" loading="lazy"><br> 如果要上传文件，则一般进行如下设置<br><img src="https://cdn.nlark.com/yuque/0/2020/png/160590/1602747847485-5d86f2f6-18cc-4262-b5fd-69349feb4bbe.png#align=left&amp;display=inline&amp;height=281&amp;margin=[object Object]&amp;name=image.png&amp;originHeight=590&amp;originWidth=1258&amp;size=146125&amp;status=done&amp;style=none&amp;width=600#averageHue=%23f7f5f5&amp;id=mfgAx&amp;originHeight=590&amp;originWidth=1258&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="image.png" loading="lazy"></p><h2 id="接口测试" tabindex="-1"><a class="header-anchor" href="#接口测试" aria-hidden="true">#</a> 接口测试</h2><h3 id="编写用例" tabindex="-1"><a class="header-anchor" href="#编写用例" aria-hidden="true">#</a> 编写用例</h3><p>在 Tests 标签页里，即可编写测试，在 SNIPPETS 里会有相应的示例。</p><p>示例接口的测试用例分别如下：</p><ul><li>POST请求</li></ul><figure><img src="https://cdn.nlark.com/yuque/0/2020/png/160590/1602748404916-daf8d633-1a35-48f8-a652-cc13c16244b5.png#align=left&amp;display=inline&amp;height=299&amp;margin=[object Object]&amp;name=image.png&amp;originHeight=648&amp;originWidth=1732&amp;size=362328&amp;status=done&amp;style=none&amp;width=800#averageHue=%23faf7f6&amp;id=JFy97&amp;originHeight=648&amp;originWidth=1732&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><ul><li>GET请求：请求成功后，取第一个数组，并把其 id 设置到环境变量中</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>pm<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;Status code is 200&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  pm<span class="token punctuation">.</span>response<span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> resp <span class="token operator">=</span> <span class="token keyword">let</span> payload <span class="token operator">=</span> pm<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  pm<span class="token punctuation">.</span>environment<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;feedback_id&#39;</span><span class="token punctuation">,</span> resp<span class="token punctuation">.</span>payload<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者确保返回的数据里没有特定的数据：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>pm<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;Status code is 200&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    pm<span class="token punctuation">.</span>response<span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> payload <span class="token operator">=</span> pm<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>payload<span class="token punctuation">;</span>
    <span class="token comment">// 在这里写 node.js 代码</span>
    <span class="token keyword">let</span> found <span class="token operator">=</span> payload<span class="token punctuation">.</span>content<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=&gt;</span> v<span class="token punctuation">.</span>username<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;unwanted&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    pm<span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span>found<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span><span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>DELETE请求：从环境变量中取值，判断接口响应码是否 200 即可</li></ul><figure><img src="https://cdn.nlark.com/yuque/0/2020/png/160590/1602752518841-f3717ddd-fbee-428f-a34f-794a8ab1ac0e.png#align=left&amp;display=inline&amp;height=265&amp;margin=[object Object]&amp;name=image.png&amp;originHeight=530&amp;originWidth=1316&amp;size=136137&amp;status=done&amp;style=none&amp;width=658#averageHue=%23f8f8f8&amp;id=NBiKR&amp;originHeight=530&amp;originWidth=1316&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h3 id="运行集合" tabindex="-1"><a class="header-anchor" href="#运行集合" aria-hidden="true">#</a> 运行集合</h3><p>本地调试好了，上线开发环境后，可以使用 postman 对线上接口进行测试</p><p>记得先恢复变量当前值<br><img src="https://cdn.nlark.com/yuque/0/2020/png/160590/1603339930271-36e9f9e5-8013-40fa-9fac-e7cb642ba451.png#align=left&amp;display=inline&amp;height=174&amp;margin=[object Object]&amp;name=image.png&amp;originHeight=412&amp;originWidth=1418&amp;size=102880&amp;status=done&amp;style=none&amp;width=600#averageHue=%23d9d8d8&amp;id=ewGCQ&amp;originHeight=412&amp;originWidth=1418&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="image.png" loading="lazy"></p><p>再选择集合，点击运行<br><img src="https://cdn.nlark.com/yuque/0/2020/png/160590/1602747943902-be50a347-cf3d-417c-9bed-e8d8abbb520d.png#align=left&amp;display=inline&amp;height=259&amp;margin=[object Object]&amp;name=image.png&amp;originHeight=716&amp;originWidth=1660&amp;size=299452&amp;status=done&amp;style=none&amp;width=600#averageHue=%23dcd9d8&amp;id=ptduQ&amp;originHeight=716&amp;originWidth=1660&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="image.png" loading="lazy"><br> 点击如图所示内容。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/160590/1602748072901-4d49553d-bf78-4276-baee-6b8e84c83951.png#align=left&amp;display=inline&amp;height=376&amp;margin=[object Object]&amp;name=image.png&amp;originHeight=1328&amp;originWidth=2474&amp;size=365551&amp;status=done&amp;style=none&amp;width=700#averageHue=%23edecec&amp;id=vF3AK&amp;originHeight=1328&amp;originWidth=2474&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="image.png" loading="lazy"><br> 在弹出的窗口中，选择环境，再把下面的四个 checkbox 取消勾选，一般而言，这样不会错。</p><p>点击执行，可以看到集合内所有接口的执行结果。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/160590/1602748206140-245e5362-ffe3-4d2f-b3a3-61f781730e86.png#align=left&amp;display=inline&amp;height=391&amp;margin=[object Object]&amp;name=image.png&amp;originHeight=1010&amp;originWidth=2068&amp;size=371291&amp;status=done&amp;style=none&amp;width=800#averageHue=%23e8e7e6&amp;id=L5fDL&amp;originHeight=1010&amp;originWidth=2068&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="image.png" loading="lazy"></p><h2 id="持续集成" tabindex="-1"><a class="header-anchor" href="#持续集成" aria-hidden="true">#</a> 持续集成</h2><h3 id="导出数据" tabindex="-1"><a class="header-anchor" href="#导出数据" aria-hidden="true">#</a> 导出数据</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/160590/1694594443532-5ca5008a-4e57-4eb1-909d-2b40ff4241ff.png#averageHue=%23f6f1f0&amp;clientId=ud8b830b6-ab27-4&amp;from=paste&amp;height=325&amp;id=uc26f5863&amp;originHeight=487&amp;originWidth=470&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=35579&amp;status=done&amp;style=none&amp;taskId=u2285a1c9-7f72-45c8-9164-9308e224033&amp;title=&amp;width=313.3333333333333" alt="image.png" loading="lazy"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/160590/1694594460053-8cf994d3-a2fa-4dbc-a6da-911ae41a8e35.png#averageHue=%23faf5f4&amp;clientId=ud8b830b6-ab27-4&amp;from=paste&amp;height=269&amp;id=ufbde5341&amp;originHeight=403&amp;originWidth=692&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=27733&amp;status=done&amp;style=none&amp;taskId=u85993242-c6e3-438c-80f7-d0eca50b862&amp;title=&amp;width=461.3333333333333" alt="image.png" loading="lazy"><br> 这会导出一个 json 文件。</p><h3 id="提交到git" tabindex="-1"><a class="header-anchor" href="#提交到git" aria-hidden="true">#</a> 提交到Git</h3><p>把 json 文件放到项目中，并提交到 Git<br><img src="https://cdn.nlark.com/yuque/0/2023/png/160590/1694594578211-b381d377-f6a5-4dd2-be82-0c9295f10fc6.png#averageHue=%233e454d&amp;clientId=ud8b830b6-ab27-4&amp;from=paste&amp;height=209&amp;id=u5d8c3186&amp;originHeight=314&amp;originWidth=622&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=22859&amp;status=done&amp;style=none&amp;taskId=u11d239a3-5b99-4879-af2f-909c6d25521&amp;title=&amp;width=414.6666666666667" alt="image.png" loading="lazy"></p><h3 id="建立ci任务" tabindex="-1"><a class="header-anchor" href="#建立ci任务" aria-hidden="true">#</a> 建立CI任务</h3><p>以 Gitlab 为例，修改 .gitlab-ci.yml，增加以下内容：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>newman<span class="token operator">:</span>
  stage<span class="token operator">:</span> test
  image<span class="token operator">:</span> node<span class="token operator">:</span>lts
  script<span class="token operator">:</span>
    <span class="token operator">-</span> node <span class="token operator">--</span>version
    <span class="token operator">-</span> npm <span class="token operator">--</span>version
    <span class="token operator">-</span> npm install <span class="token operator">-</span>g newman
    <span class="token operator">-</span> newman run export<span class="token punctuation">.</span>postman_collection<span class="token punctuation">.</span>json
  tags<span class="token operator">:</span>
    <span class="token operator">-</span> gitlab<span class="token operator">-</span>runner
  only<span class="token operator">:</span>
    <span class="token operator">-</span> <span class="token operator">/</span>develop<span class="token operator">|</span>test<span class="token operator">|</span>uat<span class="token operator">/</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>推送代码，即可看到流水线<br><img src="https://cdn.nlark.com/yuque/0/2023/png/160590/1694594759551-cb5a8564-cf20-4491-9378-3b6408e2c9fc.png#averageHue=%23f5f5f5&amp;clientId=ud8b830b6-ab27-4&amp;from=paste&amp;height=107&amp;id=u5d039deb&amp;originHeight=161&amp;originWidth=297&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=6130&amp;status=done&amp;style=none&amp;taskId=u9f90edf8-388c-4dbe-b9d5-098a89086ea&amp;title=&amp;width=198" alt="image.png" loading="lazy"></p><p>结果如下：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/160590/1694594789278-08b7d7e5-397b-47a9-9cbe-2f989a357ae1.png#averageHue=%23171615&amp;clientId=ud8b830b6-ab27-4&amp;from=paste&amp;height=387&amp;id=uf06b5710&amp;originHeight=580&amp;originWidth=585&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=32328&amp;status=done&amp;style=none&amp;taskId=u9783ae76-8888-4dc5-a259-482bc032938&amp;title=&amp;width=390" alt="image.png" loading="lazy"></p>`,30);function y(e,v){return t(),i("div",null,[m,r,d,u,g,o(" more "),h,a("p",null,[n("使用 "+l(e.var)+" 的形式引用变量，可在 url 及 body 处引用。",1),b,f]),k])}const T=p(c,[["render",y],["__file","use-postman-for-api-testing.html.vue"]]);export{T as default};
