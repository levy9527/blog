import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as p,c as o,e as i,a,b as n,t as c,f as s}from"./app-65207321.js";const l={},r=a("h1",{id:"使用-postman-进行接口测试",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#使用-postman-进行接口测试","aria-hidden":"true"},"#"),n(" 使用 Postman 进行接口测试")],-1),u=a("h2",{id:"前言",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),n(" 前言")],-1),d=a("p",null,"虽然之前分享过 RestAssured 进行接口测试的教程，但实践起来，会有阻碍：研发同学还是对 Postman 更熟悉，更倾向于使用 Postman 调试接口，而不是写 Java 代码对 Controller 层进行测试。",-1),m=a("p",null,"而笔者在针对旧的 Java 项目添加接口测试时，又遇到了另一个问题：那就是由于模块依赖，进行接口测试时，还在把旧的测试代码一并带上。虽然说有办法解决，但究竟是麻烦不断。",-1),k=a("p",null,"还有就是，Java 的类型检查，在写接口测试时十分束缚手脚。如下述代码：",-1),g=s(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 为什么不设置 Map&lt;String, String&gt; ? </span>
<span class="token comment">// 因为 menu 有个字段的类型是 Integer，使用 String 接收运行时会报错。</span>
Optional<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">&gt;&gt;</span> foundMenu <span class="token operator">=</span> menuList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>v <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  String code <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> v<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这种类型转换代码实在多余！</span>
  <span class="token keyword">return</span> code<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;管理员&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>笔者实在忍不住吐槽了一番：<br><img src="https://raw.githubusercontent.com/levy9527/image-holder/main/md-image-kit/1694596433278-eb3e5566-0126-4e93-9dfe-a9c4d8edae51.png" alt="" loading="lazy"></p><figure><img src="https://raw.githubusercontent.com/levy9527/image-holder/main/md-image-kit/1694596460562-b472ca9d-8b73-4e1f-b5a5-7c9c1fb8253a.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>笔者思前想后，最终还是放弃测试代码要与源码使用统一技术栈的构想，再次搬出 Postman 作为接口自动化测试的工具。</p><h2 id="本地调试" tabindex="-1"><a class="header-anchor" href="#本地调试" aria-hidden="true">#</a> 本地调试</h2><h3 id="接口集合" tabindex="-1"><a class="header-anchor" href="#接口集合" aria-hidden="true">#</a> 接口集合</h3><p>新建一个 collection，然后再在里面新建接口。</p><p>新建方法多种多样，可以手工新建，也可以 curl 导入，也可以从 swagger 导入。<br><img src="https://raw.githubusercontent.com/levy9527/image-holder/main/md-image-kit/1694595120400-0e37bf26-405b-412c-b54f-7057cf49ab20.png" alt="" loading="lazy"></p><h3 id="从-curl-导入" tabindex="-1"><a class="header-anchor" href="#从-curl-导入" aria-hidden="true">#</a> 从 cURL 导入</h3><p>对于已经上线的接口，使用 cURL 导入非常方便，省去了拼接参数的过程。</p><p>下面以获取 token 接口为例进行说明。</p><p>打开登录页面，打开浏览器控制台（按 F12），点击登录按钮，找到获取 token 的接口，然后右键 -&gt; Copy -&gt; Copy as cURL（bash）。<br><img src="https://raw.githubusercontent.com/levy9527/image-holder/main/md-image-kit/1694737892655-0ebc74d0-17de-4972-9411-e36697fd5637.png" alt="" loading="lazy"><br> 再打开 Postman，点击 Import -&gt; Raw text -&gt; 粘贴，即可导入接口。</p><figure><img src="https://raw.githubusercontent.com/levy9527/image-holder/main/md-image-kit/1694738073586-9de6f40e-6ddd-4b0a-b330-b807f9cb851b.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="环境变量" tabindex="-1"><a class="header-anchor" href="#环境变量" aria-hidden="true">#</a> 环境变量</h3><p><img src="https://raw.githubusercontent.com/levy9527/image-holder/main/md-image-kit/1602746875957-dc9090e7-900e-4352-91f7-039792e2a9e0.png" alt="" loading="lazy"><br> 点击右上角红框处，即可设置变量，需要先设置环境名。<br><img src="https://raw.githubusercontent.com/levy9527/image-holder/main/md-image-kit/1602747172023-7b96aa77-39bc-4881-b1e9-36d5535c92f1.png" alt="" loading="lazy"><br> 值得注意的是：</p><ol><li>一般设置 initial value 即可</li><li>如果设置了 current value，则运行 postman 时使用的是 current value</li></ol><p>如果有多套环境，就点击复制，再修改环境名及包含变量的 initial value 即可。<br><img src="https://raw.githubusercontent.com/levy9527/image-holder/main/md-image-kit/1602747475793-1f85e976-8189-44b7-9667-f1a195ff8c35.png" alt="" loading="lazy"></p>`,17),h=a("br",null,null,-1),b=a("img",{src:"https://raw.githubusercontent.com/levy9527/image-holder/main/md-image-kit/1602746808280-6743bf6c-34b5-402a-abe6-397eb76c5380.png",alt:"",loading:"lazy"},null,-1),v=s(`<p>环境变量还可以在测试用例里去修改值：<br><img src="https://raw.githubusercontent.com/levy9527/image-holder/main/md-image-kit/1694424229773-4c83c6cf-0640-4c8a-aa33-38097d84f0cd.png" alt="" loading="lazy"></p><h3 id="请求设置" tabindex="-1"><a class="header-anchor" href="#请求设置" aria-hidden="true">#</a> 请求设置</h3><p>对于请求体的发送，一般进行如下设置<br><img src="https://raw.githubusercontent.com/levy9527/image-holder/main/md-image-kit/1602747761421-f2c415ec-1b1c-48f6-976d-fbc958fdcbf3.png" alt="" loading="lazy"><br> 如果要上传文件，则一般进行如下设置<br><img src="https://raw.githubusercontent.com/levy9527/image-holder/main/md-image-kit/1602747847485-5d86f2f6-18cc-4262-b5fd-69349feb4bbe.png" alt="" loading="lazy"></p><h2 id="接口测试" tabindex="-1"><a class="header-anchor" href="#接口测试" aria-hidden="true">#</a> 接口测试</h2><h3 id="编写用例" tabindex="-1"><a class="header-anchor" href="#编写用例" aria-hidden="true">#</a> 编写用例</h3><p>在 Tests 标签页里，即可编写测试，在 SNIPPETS 里会有相应的示例。</p><p>示例接口的测试用例分别如下：</p><ul><li>这是最简单的测试用例，判断接口响应码 200</li></ul><figure><img src="https://raw.githubusercontent.com/levy9527/image-holder/main/md-image-kit/1602748404916-daf8d633-1a35-48f8-a652-cc13c16244b5.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>请求成功后，取数组的第一个元素，并把其 id 设置到环境变量中</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>pm<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;Status code is 200&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  pm<span class="token punctuation">.</span>response<span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> resp <span class="token operator">=</span> <span class="token keyword">let</span> payload <span class="token operator">=</span> pm<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  pm<span class="token punctuation">.</span>environment<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;feedback_id&#39;</span><span class="token punctuation">,</span> resp<span class="token punctuation">.</span>payload<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>从环境变量中取值, 作为请求参数<br><img src="https://raw.githubusercontent.com/levy9527/image-holder/main/md-image-kit/1602752518841-f3717ddd-fbee-428f-a34f-794a8ab1ac0e.png" alt="" loading="lazy"></p></li><li><p>再复杂一点的示例：确保返回的数据里没有特定的数据</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>pm<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;Status code is 200&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    pm<span class="token punctuation">.</span>response<span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> payload <span class="token operator">=</span> pm<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>payload<span class="token punctuation">;</span>
    <span class="token comment">// 在这里写 node.js 代码</span>
    <span class="token keyword">let</span> found <span class="token operator">=</span> payload<span class="token punctuation">.</span>content<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=&gt;</span> v<span class="token punctuation">.</span>username<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;unwanted&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    pm<span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span>found<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span><span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="运行集合" tabindex="-1"><a class="header-anchor" href="#运行集合" aria-hidden="true">#</a> 运行集合</h3><p>本地调试好了，把代码部署到线上环境后，就可以使用 postman 对线上的接口进行测试了</p><p>记得先重置变量当前值<br><img src="https://raw.githubusercontent.com/levy9527/image-holder/main/md-image-kit/1603339930271-36e9f9e5-8013-40fa-9fac-e7cb642ba451.png" alt="" loading="lazy"></p><p>再选择集合，点击运行<br><img src="https://raw.githubusercontent.com/levy9527/image-holder/main/md-image-kit/1602747943902-be50a347-cf3d-417c-9bed-e8d8abbb520d.png" alt="" loading="lazy"></p><p>点击如图所示内容：<br><img src="https://raw.githubusercontent.com/levy9527/image-holder/main/md-image-kit/1602748072901-4d49553d-bf78-4276-baee-6b8e84c83951.png" alt="" loading="lazy"><br> 在弹出的窗口中，选择环境，再把下面的四个 checkbox 取消勾选。一般而言，这样不会容易出错。</p><p>点击执行，可以看到集合内所有接口的执行结果：<br><img src="https://raw.githubusercontent.com/levy9527/image-holder/main/md-image-kit/1602748206140-245e5362-ffe3-4d2f-b3a3-61f781730e86.png" alt="" loading="lazy"></p><h2 id="持续集成" tabindex="-1"><a class="header-anchor" href="#持续集成" aria-hidden="true">#</a> 持续集成</h2><h3 id="导出数据" tabindex="-1"><a class="header-anchor" href="#导出数据" aria-hidden="true">#</a> 导出数据</h3><figure><img src="https://raw.githubusercontent.com/levy9527/image-holder/main/md-image-kit/1694594443532-5ca5008a-4e57-4eb1-909d-2b40ff4241ff.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>使用推荐的格式，导出一个 json 文件。</p><h3 id="提交到git" tabindex="-1"><a class="header-anchor" href="#提交到git" aria-hidden="true">#</a> 提交到Git</h3><p>把 json 文件放到项目中，并提交到 Git<br><img src="https://raw.githubusercontent.com/levy9527/image-holder/main/md-image-kit/1694594578211-b381d377-f6a5-4dd2-be82-0c9295f10fc6.png" alt="" loading="lazy"></p><h3 id="建立ci任务" tabindex="-1"><a class="header-anchor" href="#建立ci任务" aria-hidden="true">#</a> 建立CI任务</h3><p>以 Gitlab 为例，修改 .gitlab-ci.yml，增加以下内容：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>newman<span class="token operator">:</span>
  stage<span class="token operator">:</span> test
  image<span class="token operator">:</span> node<span class="token operator">:</span>lts
  script<span class="token operator">:</span>
    <span class="token operator">-</span> node <span class="token operator">-</span>v
    <span class="token operator">-</span> npm <span class="token operator">-</span>v
    <span class="token operator">-</span> npm install <span class="token operator">-</span>g newman
    <span class="token operator">-</span> newman run export<span class="token punctuation">.</span>postman_collection<span class="token punctuation">.</span>json <span class="token operator">--</span>reporter<span class="token operator">-</span>cli<span class="token operator">-</span>exit<span class="token operator">-</span>code
  tags<span class="token operator">:</span>
    <span class="token operator">-</span> gitlab<span class="token operator">-</span>runner
  only<span class="token operator">:</span>
    <span class="token operator">-</span> <span class="token operator">/</span>dev<span class="token operator">|</span>test<span class="token operator">|</span>uat<span class="token operator">/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>推送代码，即可看到流水线<br><img src="https://raw.githubusercontent.com/levy9527/image-holder/main/md-image-kit/1694594759551-cb5a8564-cf20-4491-9378-3b6408e2c9fc.png" alt="" loading="lazy"></p><p>结果如下：<br><img src="https://raw.githubusercontent.com/levy9527/image-holder/main/md-image-kit/1694594789278-08b7d7e5-397b-47a9-9cbe-2f989a357ae1.png" alt="" loading="lazy"></p>`,30);function f(t,y){return p(),o("div",null,[r,u,d,m,k,i(" more "),g,a("p",null,[n("使用 "+c(t.var)+" 的形式引用变量，可在 url 及 body 处引用。",1),h,b]),v])}const x=e(l,[["render",f],["__file","use-postman-for-api-testing.html.vue"]]);export{x as default};
