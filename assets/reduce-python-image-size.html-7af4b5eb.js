import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as l,c as p,e as o,a as e,b as n,d as s,f as i}from"./app-7610ad73.js";const d={},c=i('<h1 id="缩减python应用的镜像体积" tabindex="-1"><a class="header-anchor" href="#缩减python应用的镜像体积" aria-hidden="true">#</a> 缩减Python应用的镜像体积</h1><h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景</h2><p>当你为 LLM 应用构建镜像时，发现整个过程很慢，一看镜像体积：好家伙，1.76 G！<br><img src="https://raw.gitmirror.com/levy9527/image-holder/main/md-image-kit/1701851964516-fbd3eb62-111f-4e94-b8d6-2948a974a0ac.png" alt="" loading="lazy"><br> 能不能减少镜像体积，缩短打包时间啊？本文将分享两招实用的技巧，让 Python 应用的镜像体积减少 50%。</p>',3),u=i(`<h2 id="原始dockerfile" tabindex="-1"><a class="header-anchor" href="#原始dockerfile" aria-hidden="true">#</a> 原始Dockerfile</h2><p>先来看看 Dockerfile 的原始模样：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>FROM python:3.10.13

WORKDIR /app

COPY requirements.txt <span class="token builtin class-name">.</span>

RUN pip <span class="token function">install</span> <span class="token parameter variable">-i</span> https://pypi.tuna.tsinghua.edu.cn/simple <span class="token parameter variable">--upgrade</span> pip
RUN pip <span class="token function">install</span> <span class="token parameter variable">-i</span> https://pypi.tuna.tsinghua.edu.cn/simple <span class="token parameter variable">-r</span> requirements.txt --ignore-installed

COPY <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span>

ENV <span class="token assign-left variable">HOST</span><span class="token operator">=</span><span class="token number">0.0</span>.0.0
ENV LISTEN_PORT <span class="token number">8000</span>
EXPOSE <span class="token number">8000</span>

CMD <span class="token punctuation">[</span><span class="token string">&quot;chainlit&quot;</span>, <span class="token string">&quot;run&quot;</span>, <span class="token string">&quot;app.py&quot;</span>, <span class="token string">&quot;--no-cache&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用slim镜像" tabindex="-1"><a class="header-anchor" href="#使用slim镜像" aria-hidden="true">#</a> 使用slim镜像</h2><p>最简单快捷的优化方式，是修改第一行代码，使用 slim 镜像。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>FROM python:3.10.13-slim
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>重点是：为什么用 slim，而不是 alpine？</p><p>这里我们就要搞清楚，Alpine 是 Linux 众多发行版中的一员，与 CentOS、Ubuntu、Archlinux 之类一样，只是一个发行版的名字，主打一个小巧安全。</p><p>然而，alpine 镜像有一个陷阱，它使用的标准库与大多数发行版不同，它使用的是 <code>musl libc</code>，与常用的标准库 <code>glibc</code>并不兼容。</p><p>而在 alpine 镜像中，使用 Wheel 文件(后缀为 .whl) 安装 Python 依赖时，可能会出现兼容性问题，因为 Wheel 会与 C 语言的扩展库有关联，而这些 C extensions 不一定与 <code>musl libc</code>兼容，尤其是使用到了 NumPy、 Pandas 的时候。</p><p>那么为什么 slim 镜像又可以呢？因为 slim 镜像是基于 Debian 的, 使用的是 <code>glibc</code>，通过删除了许多非必需的软件包方式，优化了体积。</p><p>因此，在 Python 中，最稳妥的做法是，做 slim 镜像，而不是 alpine。</p><h2 id="减少层数、取消本地缓存" tabindex="-1"><a class="header-anchor" href="#减少层数、取消本地缓存" aria-hidden="true">#</a> 减少层数、取消本地缓存</h2><p>来看这两行代码：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>RUN pip <span class="token function">install</span> <span class="token parameter variable">-i</span> https://pypi.tuna.tsinghua.edu.cn/simple <span class="token parameter variable">--upgrade</span> pip
RUN pip <span class="token function">install</span> <span class="token parameter variable">-i</span> https://pypi.tuna.tsinghua.edu.cn/simple <span class="token parameter variable">-r</span> requirements.txt --ignore-installed
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>安装依赖，应该一步到位，我们可以把这两行压缩成一行，以减少 docker layer 数量。</p><p>另外，pip 安装依赖时，会在本地生成缓存，而这对于镜像来说是无用的，可以添加参数 <code>--no-cache-dir</code>禁止此行为。</p><p>则上述两行代码优化如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>run pip <span class="token function">install</span> <span class="token parameter variable">-i</span> https://pypi.tuna.tsinghua.edu.cn/simple <span class="token parameter variable">--upgrade</span> pip <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\\</span>
    pip <span class="token function">install</span> <span class="token parameter variable">-i</span> https://pypi.tuna.tsinghua.edu.cn/simple --ignore-installed --no-cache-dir <span class="token parameter variable">-r</span> requirements.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="优化效果" tabindex="-1"><a class="header-anchor" href="#优化效果" aria-hidden="true">#</a> 优化效果</h2><p>第一次优化，使用 slim 镜像：<br><img src="https://raw.gitmirror.com/levy9527/image-holder/main/md-image-kit/1701851939395-45a1f231-9075-4d41-b71e-b4eeaf53136e.png" alt="" loading="lazy"></p><p>第二次优化，减少层数、取消本地缓存：<br><img src="https://raw.gitmirror.com/levy9527/image-holder/main/md-image-kit/1701853194080-cb829a4a-b778-4b19-b221-6b6896252223.png" alt="" loading="lazy"><br> 小小的改动，大大的变化！</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>`,23),m={href:"https://icloudnative.io/posts/intro-guide-to-dockerfile-best-practices/",target:"_blank",rel:"noopener noreferrer"},h=e("br",null,null,-1),b={href:"https://icloudnative.io/posts/docker-images-part2-details-specific-to-different-languages/#jdk-vs-jre",target:"_blank",rel:"noopener noreferrer"},v=e("br",null,null,-1),g={href:"https://www.ardanlabs.com/blog/2020/04/docker-images-part3-going-farther-reduce-image-size.html",target:"_blank",rel:"noopener noreferrer"};function k(f,_){const a=r("ExternalLinkIcon");return l(),p("div",null,[c,o(" more "),u,e("p",null,[e("a",m,[n("https://icloudnative.io/posts/intro-guide-to-dockerfile-best-practices/"),s(a)]),h,e("a",b,[n("https://icloudnative.io/posts/docker-images-part2-details-specific-to-different-languages"),s(a)]),v,e("a",g,[n("https://www.ardanlabs.com/blog/2020/04/docker-images-part3-going-farther-reduce-image-size"),s(a)])])])}const N=t(d,[["render",k],["__file","reduce-python-image-size.html.vue"]]);export{N as default};
