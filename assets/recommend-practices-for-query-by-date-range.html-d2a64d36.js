import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as t,e as p,a as n,b as a,f as o}from"./app-22de02ae.js";const c={},l=n("h1",{id:"根据时间范围查询推荐实践",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#根据时间范围查询推荐实践","aria-hidden":"true"},"#"),a(" 根据时间范围查询推荐实践")],-1),i=n("h2",{id:"背景",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#背景","aria-hidden":"true"},"#"),a(" 背景")],-1),u=n("p",null,"不敢说是最佳实践，因为受限于特定技术、框架，并且带上了个人偏好。",-1),r=n("p",null,"虽然原理简单，但细节很多，不想每次搞来搞去，因此还是有记录的价值。",-1),d=n("p",null,"本文用到的技术栈为：MySQL、MyBatis、Java 8、Jackson",-1),k=o(`<h2 id="需求" tabindex="-1"><a class="header-anchor" href="#需求" aria-hidden="true">#</a> 需求</h2><p>删除某个时间段以前的日志。类似于消除浏览记录：<br><img src="https://raw.githubusercontent.com/levy9527/image-holder/main/md-image-kit/1694499288408-aaec3b0c-9d06-43c1-849b-7af4ec9eb01a.png" alt="" loading="lazy"></p><h2 id="分析" tabindex="-1"><a class="header-anchor" href="#分析" aria-hidden="true">#</a> 分析</h2><p>上图只是UI示例，为了适应UI的变化，最好把接口设置成接收两个参数：</p><ul><li>开始时间</li><li>结束时间</li></ul><p>如果UI如上图所示，则选择过去 7 天时，开始时间就是 1970 年 1 月 1 日，结束时间就是过去第 7 天。</p><h2 id="实现" tabindex="-1"><a class="header-anchor" href="#实现" aria-hidden="true">#</a> 实现</h2><h3 id="mysql" tabindex="-1"><a class="header-anchor" href="#mysql" aria-hidden="true">#</a> MySQL</h3><p>对于 MySQL，推荐使用，因为简单直观，且方便：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> operation_logs 
<span class="token keyword">WHERE</span> created_time <span class="token operator">BETWEEN</span> <span class="token string">&#39;2023-09-12 11:44:26&#39;</span> <span class="token operator">AND</span> <span class="token string">&#39;2023-09-12 13:54:52&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>另一种方式：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> operation_logs 
<span class="token keyword">WHERE</span> created_time <span class="token operator">&gt;=</span> <span class="token string">&#39;2023-09-12 11:44:26&#39;</span> <span class="token operator">AND</span> created_time <span class="token operator">&lt;=</span> <span class="token string">&#39;2023-09-12 13:54:52&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面是时间精确到秒的设计思路，逻辑上没有问题，但体验会有问题：如果是查询某个时间范围的日志还好，精确一点；现在需要是删除日志，谁还关心到秒啊！</p><p>通常人们只会关心到天，则考虑一种情况：开始时间与结束时间是同一天，下面的语句无法删除任何记录：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> operation_logs 
<span class="token keyword">WHERE</span> created_time <span class="token operator">BETWEEN</span> <span class="token string">&#39;2023-09-12&#39;</span> <span class="token operator">AND</span> <span class="token string">&#39;2023-09-12&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>那么现在，就是分歧点了，有两种方案：</p><ol><li>程序为开始时间、结束时间填充时分秒：</li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> operation_logs 
<span class="token keyword">WHERE</span> created_time <span class="token operator">BETWEEN</span> <span class="token string">&#39;2023-09-12 00:00:00&#39;</span> <span class="token operator">AND</span> <span class="token string">&#39;2023-09-12 23:59:59&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>结束时间 +1 天：</li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> operation_logs 
<span class="token keyword">WHERE</span> created_time <span class="token operator">BETWEEN</span> <span class="token string">&#39;2023-09-12&#39;</span> <span class="token operator">AND</span> <span class="token string">&#39;2023-09-13&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>两种方案都是可以行，我推荐的是第二种。并且，由后端处理，不需要前端拼接字符串。</p><blockquote><p>注：结束时间 +1 的原因是，实际存储的的 created_time 是带有时分秒的，而用户选择时，只精确到日，这就相当于时分秒的值为0。如果结束时间不加1，则结束时间当天的记录都无法匹配到。</p></blockquote><h3 id="mybatis" tabindex="-1"><a class="header-anchor" href="#mybatis" aria-hidden="true">#</a> MyBatis</h3><p>如果使用的是 <code>&gt;=</code> 这种要SQL写法，MyBatis 就需要转义：</p><ul><li><code>&gt;</code> 转成 <code>&amp;gt;</code></li><li><code>&lt;</code> 转成 <code>&amp;lt;</code></li></ul><p>这就是不推荐这种写法的原因之一。</p><h3 id="loxaldate" tabindex="-1"><a class="header-anchor" href="#loxaldate" aria-hidden="true">#</a> LoxalDate</h3><p>都已经 Java 8 了，就不要使用 java.util.Date 了，使用 java.time.LocalDate 吧。方便应对后续的时间操作。</p><p>结束时间+1天，非常简单：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">deleteLog</span><span class="token punctuation">(</span><span class="token class-name">DeleteOperationLogDto</span> log<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> operationLog<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">getStartDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> log<span class="token punctuation">.</span><span class="token function">getEndDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">ChronoUnit</span><span class="token punctuation">.</span><span class="token constant">DAYS</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>记得在 Controller 对时间字段加注解：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@DateTimeFormat</span><span class="token punctuation">(</span>iso <span class="token operator">=</span> <span class="token class-name">DateTimeFormat</span><span class="token punctuation">.</span><span class="token constant">ISO</span><span class="token punctuation">.</span><span class="token constant">DATE</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">LocalDate</span> startDate<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>否则会报错：</p><blockquote><p>Failed to convert property value of type &#39;java.lang.String&#39; to required type &#39;java.time.LocalDate&#39; for property &#39;startDate&#39;; nested exception is org.springframework.core.convert.ConversionFailedException:</p></blockquote><h3 id="jackson" tabindex="-1"><a class="header-anchor" href="#jackson" aria-hidden="true">#</a> Jackson</h3><p>如果不想在每个字段都加 <code>@DateTimeFormat</code> 注解，可以利用 Jackson 进行反序列化相关设置。</p><p>既然要设置反序列化，那序列化也少不了。我把全部设置的代码放下面了，有需要复制即可：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootConfiguration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JacksonConfig</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">DATE_TIME_PATTERN</span> <span class="token operator">=</span> <span class="token string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">DATE_PATTERN</span> <span class="token operator">=</span> <span class="token string">&quot;yyyy-MM-dd&quot;</span><span class="token punctuation">;</span> 
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">TIME_PATTERN</span> <span class="token operator">=</span> <span class="token string">&quot;HH:mm:ss&quot;</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">ObjectMapper</span> <span class="token function">objectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ObjectMapper</span> objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 对于空的对象转json的时候不抛出错误</span>
        objectMapper<span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token class-name">SerializationFeature</span><span class="token punctuation">.</span><span class="token constant">FAIL_ON_EMPTY_BEANS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 禁用遇到未知属性抛出异常</span>
        objectMapper<span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token class-name">DeserializationFeature</span><span class="token punctuation">.</span><span class="token constant">FAIL_ON_UNKNOWN_PROPERTIES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 序列化BigDecimal时不使用科学计数法输出</span>
        objectMapper<span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">JsonGenerator<span class="token punctuation">.</span>Feature</span><span class="token punctuation">.</span><span class="token constant">WRITE_BIGDECIMAL_AS_PLAIN</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 时区</span>
        objectMapper<span class="token punctuation">.</span><span class="token function">setTimeZone</span><span class="token punctuation">(</span><span class="token class-name">TimeZone</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 日期和时间格式序列化器</span>
        <span class="token class-name">JavaTimeModule</span> javaTimeModule <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JavaTimeModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        javaTimeModule<span class="token punctuation">.</span><span class="token function">addSerializer</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">LocalDateTimeSerializer</span><span class="token punctuation">(</span>
                        <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token constant">DATE_TIME_PATTERN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        javaTimeModule<span class="token punctuation">.</span><span class="token function">addSerializer</span><span class="token punctuation">(</span><span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">LocalDateSerializer</span><span class="token punctuation">(</span><span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token constant">DATE_PATTERN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        javaTimeModule<span class="token punctuation">.</span><span class="token function">addSerializer</span><span class="token punctuation">(</span><span class="token class-name">LocalTime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">LocalTimeSerializer</span><span class="token punctuation">(</span><span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token constant">TIME_PATTERN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 日期和时间格式反序列化器</span>
        javaTimeModule<span class="token punctuation">.</span><span class="token function">addDeserializer</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">LocalDateTimeDeserializer</span><span class="token punctuation">(</span>
                        <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token constant">DATE_TIME_PATTERN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        javaTimeModule<span class="token punctuation">.</span><span class="token function">addDeserializer</span><span class="token punctuation">(</span><span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">LocalDateDeserializer</span><span class="token punctuation">(</span><span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token constant">DATE_PATTERN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        javaTimeModule<span class="token punctuation">.</span><span class="token function">addDeserializer</span><span class="token punctuation">(</span><span class="token class-name">LocalTime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">LocalTimeDeserializer</span><span class="token punctuation">(</span><span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token constant">TIME_PATTERN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        objectMapper<span class="token punctuation">.</span><span class="token function">registerModule</span><span class="token punctuation">(</span>javaTimeModule<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> objectMapper<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="结语" tabindex="-1"><a class="header-anchor" href="#结语" aria-hidden="true">#</a> 结语</h2><p>好了，终于搞完了，我的评价是：<br><img src="https://raw.githubusercontent.com/levy9527/image-holder/main/md-image-kit/1694501621853-c16a33fa-68e7-4aba-a72e-a9907793b564.png" alt="" loading="lazy"></p>`,40);function m(v,b){return e(),t("div",null,[l,i,u,r,d,p(" more "),k])}const y=s(c,[["render",m],["__file","recommend-practices-for-query-by-date-range.html.vue"]]);export{y as default};
